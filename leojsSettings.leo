<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html -->
<leo_file xmlns:leo="http://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20041119035137"><vh>About this file, leoSettings.leo</vh>
<v t="ekr.20041122163623"><vh>About settings names</vh></v>
<v t="ekr.20041119035704"><vh> Basic setting nodes</vh>
<v t="ekr.20041119042929"><vh>@bool</vh></v>
<v t="ekr.20041119042929.1"><vh>@color</vh></v>
<v t="ekr.20041119044139"><vh>@directory</vh></v>
<v t="ekr.20041119042929.3"><vh>@encoding</vh></v>
<v t="ekr.20041119042929.4"><vh>@int</vh></v>
<v t="ekr.20061002115414"><vh>@float</vh></v>
<v t="ekr.20111003130143.15561"><vh>@font</vh></v>
<v t="ekr.20041120181045"><vh>@ratio</vh></v>
<v t="ekr.20041119042929.2"><vh>@path</vh></v>
<v t="ekr.20041119042929.7"><vh>@string</vh></v>
</v>
<v t="ekr.20041119035704.1"><vh> Organizer nodes</vh></v>
<v t="ekr.20071217093419"><vh>\@data</vh></v>
<v t="ekr.20080312071248.25"><vh>\@buttons</vh></v>
<v t="ekr.20080312071248.19"><vh>\@button name [@key=value]</vh></v>
<v t="ekr.20080312071248.26"><vh>\@commands</vh></v>
<v t="ekr.20080312071248.20"><vh>\@command name [@key=value]</vh></v>
<v t="ekr.20070224073109"><vh>\@enabled-plugins</vh></v>
<v t="ekr.20060913144412"><vh>\@keys keyset-name</vh></v>
<v t="ekr.20150426033400.1"><vh>\@ifenv name,value</vh></v>
<v t="ekr.20150426031409.1"><vh>\@ifhostname hostname or !hostname</vh></v>
<v t="ekr.20041119110141"><vh>\@ifplatform platform-name</vh></v>
<v t="ekr.20041119035704.2"><vh>\@ignore comment</vh></v>
<v t="ekr.20170823083657.1"><vh>\@menu and \@item</vh></v>
<v t="ekr.20130503155210.16364"><vh>\@menuat </vh></v>
<v t="ekr.20070411172718"><vh>\@openwith name = shortcut</vh></v>
<v t="ekr.20131115075142.18226"><vh>\@outline-data setting-name</vh></v>
<v t="ekr.20180124050114.1"><vh>\@rclick</vh></v>
<v t="ekr.20041119105509"><vh>\@set name = value</vh></v>
<v t="ekr.20041120155431.1"><vh>\@shortcuts</vh></v>
<v t="ekr.20041119035704.3"><vh>\@type type-name: base-type = [list of valid values]</vh></v>
<v t="ekr.20041120155431.2"><vh>\@type type-name: script: script-name</vh></v>
</v>
<v t="ekr.20061011082224"><vh>About myLeoSettings.leo</vh></v>
<v t="ekr.20041119034357.1"><vh>@settings</vh>
<v t="ekr.20201010141557.1"><vh>@string theme-name = None</vh></v>
<v t="ekr.20041119034357.10"><vh>Command options</vh>
<v t="ekr.20131112150804.18737"><vh>@bool force-execute-entire-body = False</vh></v>
<v t="ekr.20150227102835.1"><vh>@bool make-node-conflicts-node = True</vh></v>
<v t="ekr.20180117074230.1"><vh>@bool show-tips = True</vh></v>
<v t="ekr.20060323131801"><vh>@bool warn-about-missing-settings = False</vh></v>
<v t="ekr.20220105172501.1"><vh>@data add-mypy-annotations</vh></v>
<v t="ekr.20210530064911.1"><vh>@data exec-script-commands</vh></v>
<v t="ekr.20210530064922.1"><vh>@data exec-script-patterns</vh></v>
<v t="ekr.20160428072005.1"><vh>@data history-list</vh></v>
<v t="ekr.20211014064402.1"><vh>@data python-to-typescript-types</vh></v>
<v t="ekr.20190608085550.1"><vh>@int max-find-long-lines-length = 110</vh></v>
<v t="ekr.20180301060510.1"><vh>@int print-settings-at-data-limit = 20</vh></v>
<v t="ekr.20041119041019.1"><vh>@string remove-sentinels-extension = .txt</vh></v>
<v t="ekr.20110917104720.9414"><vh>c-to-python settings</vh>
<v t="ekr.20110917104720.9415"><vh>@data c-to-python-class-list</vh></v>
<v t="ekr.20110917104720.9416"><vh>@data c-to-python-type-list</vh></v>
<v t="ekr.20110917104720.9417"><vh>@data c-to-python-ivars-dict</vh></v>
</v>
<v t="ekr.20110611092035.16482"><vh>Headline commands settings</vh>
<v t="ekr.20181018105904.1"><vh>@bool headline-gmt-time = False</vh></v>
<v t="ekr.20041119050749.10"><vh>@string headline-time-format-string = %m/%d/%Y %H:%M:%S</vh></v>
</v>
<v t="ekr.20160127043440.1"><vh>make-stub-files settings</vh>
<v t="ekr.20160127051552.1"><vh>@bool stub-overwrite = False</vh></v>
<v t="ekr.20160318061607.3"><vh>@bool stub-trace-matches = False</vh></v>
<v t="ekr.20160318061607.4"><vh>@bool stub-trace-patterns = False</vh></v>
<v t="ekr.20160318061607.6"><vh>@bool stub-trace-reduce = False</vh></v>
<v t="ekr.20160318061607.5"><vh>@bool stub-trace-visitors = False</vh></v>
<v t="ekr.20160318061607.7"><vh>@bool stub-update = False</vh></v>
<v t="ekr.20181018103813.1"><vh>@bool stub-verbose = False</vh></v>
<v t="ekr.20181018103757.1"><vh>@bool stub-warn = False</vh></v>
<v t="ekr.20160127043520.1"><vh>@data stub-def-name-patterns</vh></v>
<v t="ekr.20160130145944.1"><vh>@data stub-general-patterns</vh></v>
<v t="ekr.20160112111247.1"><vh>@data stub-prefix-lines</vh></v>
<v t="ekr.20160317062151.1"><vh>@data stub-regex-patterns</vh></v>
<v t="ekr.20160127051243.1"><vh>@string stub-output-directory = ~/stubs</vh></v>
</v>
<v t="ekr.20160316111054.1"><vh>python-to-coffeescript settings</vh>
<v t="ekr.20160316112407.2"><vh>@bool py2cs-overwrite = True</vh></v>
<v t="ekr.20160316112407.8"><vh>@string py2cs-output-directory = ~/py2cs</vh></v>
</v>
<v t="ekr.20071213060239"><vh>rst3 command settings</vh>
<v t="ekr.20210327193736.1"><vh>rst3 reporting options</vh>
<v t="ekr.20071213061811.2"><vh>@bool rst3-verbose = True</vh></v>
</v>
<v t="ekr.20210327193806.1"><vh>rst3 http options</vh>
<v t="ekr.20071213061454.1"><vh>@bool rst3-http-server-support = False</vh></v>
<v t="ekr.20071213061454.3"><vh>@string rst3-node-begin-marker = http-node-marker-</vh></v>
</v>
<v t="ekr.20210327193854.1"><vh>rst3 output options</vh>
<v t="ekr.20071213061504"><vh>@string rst3-default-path = None</vh></v>
<v t="ekr.20090430075506.7"><vh>@bool rst3-generate-rst-header-comment = True</vh></v>
<v t="ekr.20071213061811.1"><vh>@string rst3-underline-characters = #=+*^~`-:&gt;&lt;-</vh></v>
<v t="ekr.20071213061811.3"><vh>@bool rst3-write-intermediate-file = True</vh></v>
<v t="ekr.20131027064821.18683"><vh>@string rst3-write-intermediate-extension = .txt</vh></v>
</v>
<v t="ekr.20210327194119.1"><vh>rst3 docutils options</vh>
<v t="ekr.20131009050634.17656"><vh>@bool rst3-call-docutils = True</vh></v>
<v t="ekr.20210327193418.1"><vh>@bool rst3-stylesheet-embed = False</vh></v>
<v t="ekr.20071213061504.3"><vh>@string rst3-publish-argv-for-missing-stylesheets = None</vh></v>
<v t="ekr.20071213061504.1"><vh>@string rst3-stylesheet-name = default.css</vh></v>
<v t="ekr.20071213061504.2"><vh>@string rst3-stylesheet-path = None</vh></v>
</v>
</v>
<v t="ekr.20110611092035.16477"><vh>Undo settings</vh>
<v t="ekr.20041119041019.2"><vh>@bool save-clears-undo-buffer = False</vh></v>
<v t="ekr.20060127050605"><vh>@int max-undo-stack-size = 0</vh></v>
<v t="ekr.20050126083026"><vh>@string undo-granularity = None</vh></v>
</v>
</v>
<v t="ekr.20070926132045"><vh>Common @button nodes</vh>
<v t="ekr.20070926082407"><vh>@buttons</vh></v>
</v>
<v t="ekr.20080312075451.1"><vh>Common @command nodes</vh>
<v t="ekr.20080312075451.2"><vh>@commands</vh></v>
</v>
<v t="ekr.20061003173413"><vh>Files &amp; directories</vh>
<v t="ekr.20061210091932"><vh>@bool chdir-to-relative-path = False</vh></v>
<v t="ekr.20150216135059.1"><vh>@bool create-at-persistence-nodes-automatically = False</vh></v>
<v t="ekr.20041119041304"><vh>@bool create-nonexistent-directories = False</vh></v>
<v t="ekr.20170718054928.1"><vh>@bool log-show-save-time = False</vh></v>
<v t="ekr.20200226102131.1"><vh>@bool report-unchanged-files = True</vh></v>
<v t="ekr.20181018113812.1"><vh>@string initial-chooser-directory = None</vh></v>
<v t="ekr.20170718054951.1"><vh>@string log-timestamp-format = %H:%M:%S</vh></v>
<v t="ekr.20041119041304.1"><vh>@string relative-path-base-directory = .</vh></v>
<v t="ekr.20181018113813.1"><vh>@string script-file-path = None</vh></v>
<v t="ekr.20170706103843.1"><vh>Checking files</vh>
<v t="ekr.20071110153046"><vh>@bool at-auto-warns-about-leading-whitespace = True</vh></v>
<v t="ekr.20150403055250.1"><vh>@bool check-for-changed-external-files = True</vh></v>
<v t="ekr.20090514111518.8379"><vh>@bool check-python-code-on-write = True</vh></v>
<v t="ekr.20161021095001.1"><vh>@bool run-pyflakes-on-write = False</vh></v>
<v t="ekr.20150321090958.1"><vh>@bool verbose-check-outline = False</vh></v>
<v t="ekr.20150710084507.1"><vh>@bool syntax-error-popup = False</vh></v>
</v>
<v t="ekr.20041119034357.12"><vh>External files</vh>
<v t="ekr.20041119034357.14"><vh>@bool at-root-bodies-start-in-doc-mode = True</vh></v>
<v t="ekr.20070419103554"><vh>@bool force-newlines-in-at-nosent-bodies = True</vh></v>
<v t="ekr.20041119041747"><vh>@string output-newline = nl</vh></v>
<v t="ekr.20081216090156.5"><vh>@string underindent-escape-string = \\-</vh></v>
</v>
<v t="ekr.20041119034357.7"><vh>Leo files</vh>
<v t="ekr.20041119034357.8"><vh>@string output-initial-comment = None</vh></v>
<v t="ekr.20041119034357.9"><vh>@string stylesheet = </vh></v>
<v t="ekr.20080921060401.3"><vh>@string default-leo-file = ~/.leo/workbook.leo</vh></v>
<v t="vitalije.20170811125150.1"><vh>@string default-leo-extension = .leo</vh></v>
</v>
<v t="ekr.20110611092035.16474"><vh>Recent files</vh>
<v t="tbrown.20081003103821.1"><vh>@bool recent-files-group = False</vh></v>
<v t="tbrown.20081003103821.2"><vh>@bool recent-files-group-always = False</vh></v>
<v t="tbrown.20180212145842.1"><vh>@data path-demangle</vh></v>
</v>
<v t="ekr.20060730101451"><vh>Shadow files</vh>
<v t="ekr.20181018110022.1"><vh>@bool shadow-in-home-dir = False</vh></v>
<v t="ekr.20060730101451.3"><vh>@string shadow-prefix = x</vh></v>
<v t="ekr.20060730101451.5"><vh>@string shadow-subdir = .leo_shadow</vh></v>
</v>
</v>
<v t="ekr.20041119034357.20"><vh>Find/replace options</vh>
<v t="ekr.20141024165714.1"><vh>@bool auto-scroll-find-tab = True</vh></v>
<v t="ekr.20131119143342.20107"><vh>@bool minibuffer-find-mode = False</vh></v>
<v t="tbrown.20151010094807.1"><vh>@bool show-find-result-in-status = True</vh></v>
<v t="ekr.20150710065036.1"><vh>@bool preload-find-pattern = False</vh></v>
<v t="ekr.20210901110017.1"><vh>@bool reverse-find-defs = False</vh></v>
<v t="ekr.20150618105435.1"><vh>@bool use-find-dialog = False</vh></v>
<v t="ekr.20041119050105.1"><vh>@string change-text = None</vh></v>
<v t="ekr.20041119050105.2"><vh>@string find-text = None</vh></v>
<v t="ekr.20131119143342.20108"><vh>Find panel defaults</vh>
<v t="ekr.20041119050105.3"><vh>Checkboxes in the Find panel</vh>
<v t="ekr.20041119050105.4"><vh>@bool batch = False</vh></v>
<v t="ekr.20041119050105.5"><vh>@bool ignore-case = True</vh></v>
<v t="ekr.20041119050105.6"><vh>@bool mark-changes = False</vh></v>
<v t="ekr.20041119050105.7"><vh>@bool mark-finds = False</vh></v>
<v t="ekr.20041119050105.9"><vh>@bool reverse = False</vh></v>
<v t="ekr.20041119050105.8"><vh>@bool pattern-match = False</vh></v>
<v t="ekr.20041119050105.14"><vh>@bool search-body = True</vh></v>
<v t="ekr.20041119050105.15"><vh>@bool search-headline = True</vh></v>
<v t="ekr.20041119050105.10"><vh>@bool whole-word = False</vh></v>
<v t="ekr.20041119050105.11"><vh>@bool wrap = False</vh></v>
</v>
<v t="ekr.20110611092035.16476"><vh>Radio buttons in the Find panel</vh>
<v t="ekr.20041119050105.12"><vh>@bool node-only = False</vh></v>
<v t="ekr.20041119050105.16"><vh>@bool suboutline-only = False</vh></v>
</v>
</v>
</v>
<v t="ekr.20110611092035.16480"><vh>Import options</vh>
<v t="ekr.20211209060458.1"><vh>@bool put-class-in-imported-headlines = True</vh></v>
<v t="tbrown.20180525163032.1"><vh>@bool add-context-to-headlines = True</vh></v>
<v t="ekr.20200620064409.1"><vh>@bool add-file-context-to-headlines = True</vh></v>
<v t="ekr.20200620060909.1"><vh>@bool put-cython-decorators-in-imported-headlines = False</vh></v>
<v t="ekr.20080811105020.2"><vh>@bool suppress-import-parsing = False</vh></v>
<v t="ekr.20170825083426.1"><vh>@data c-import-typedefs</vh></v>
<v t="ekr.20111029055127.16616"><vh>@data import-html-tags</vh></v>
<v t="ekr.20111029055127.16614"><vh>@data import-xml-tags</vh></v>
<v t="ekr.20181018075844.1"><vh>zim importer options</vh>
<v t="ekr.20181018075857.1"><vh>@int zim-rst-level = 0</vh></v>
<v t="ekr.20181018075747.1"><vh>@string path-to-zim = None</vh></v>
<v t="ekr.20181018075857.3"><vh>@string zim-node-name = Imported Zim Tree</vh></v>
<v t="ekr.20181018075857.2"><vh>@string zim-rst-type = rst</vh></v>
</v>
</v>
<v t="ekr.20110611092035.16491"><vh>Leo Directives</vh>
<v t="ekr.20041119034357.32"><vh>@int page-width = 80</vh></v>
<v t="ekr.20041119034357.31"><vh>@int tab-width = -4</vh></v>
</v>
<v t="ekr.20110611092035.16481"><vh>Scripting</vh>
<v t="ekr.20061029091403"><vh>@bool show-full-tracebacks-in-scripts = False</vh></v>
</v>
<v t="ekr.20110611092035.16463"><vh>Tree operation</vh>
<v t="nh910.20110621123823.3423"><vh>@bool collapse-nodes-after-move = True</vh></v>
<v t="ekr.20060930085532"><vh>@bool collapse-nodes-during-finds = True</vh></v>
<v t="ekr.20080315083057.7"><vh>@bool collapse-nodes-while-spelling = True</vh></v>
<v t="felix.20220506230435.1"><vh>@bool collapse-on-goto-first-last-visible = True</vh></v>
<v t="ekr.20111109104336.12503"><vh>@bool collapse-on-lt-arrow = True</vh></v>
<v t="ekr.20070615094204"><vh>@bool contractVisitedNodes = True</vh></v>
<v t="tbnorth.20160414102131.1"><vh>@bool drag-alt-drag-expands = True</vh></v>
<v t="ekr.20041119050749.4"><vh>@bool enable-drag-messages = False</vh></v>
<v t="ekr.20131008181812.17533"><vh>@bool enable-tree-dragging = True</vh></v>
<v t="ekr.20061012122620"><vh>@bool insert-new-nodes-at-end = False</vh></v>
<v t="tbrown.20110212091818.20118"><vh>@bool inter-outline-drag-moves = False</vh></v>
<v t="ekr.20181018105945.1"><vh>@bool invisible-outline-navigation = False</vh></v>
<v t="ekr.20100107060708.6390"><vh>@bool qt-tree-multiple-selection = True</vh></v>
<v t="ekr.20110601103939.19339"><vh>@bool single-click-auto-edits-headline = False</vh></v>
<v t="ekr.20061007211759"><vh>@bool sparse-move-outline-left = False</vh></v>
<v t="ekr.20060122105527.7"><vh>@bool stayInTreeAfterSelect = True</vh></v>
<v t="ekr.20061002115414.1"><vh>@float outline-nav-extend-delay = 2.0</vh></v>
<v t="chris.20180324074923.1"><vh>@int icon-height = 16</vh></v>
<v t="ekr.20171121100639.1"><vh>Declutter</vh>
<v t="tbrown.20150807123339.1"><vh>@bool tree-declutter = False</vh></v>
<v t="tbrown.20150807123421.1"><vh>@data tree-declutter-patterns</vh>
<v t="ekr.20171122113628.1"><vh> About Decluttering</vh>
<v t="ekr.20171122113628.3"><vh>Rule &amp; replacement lines</vh></v>
<v t="ekr.20171122113628.4"><vh>Style lines</vh></v>
</v>
<v t="ekr.20171122044441.3"><vh>declutter: add icon to folders and remove...</vh></v>
<v t="ekr.20171122044441.1"><vh>declutter: demo pattern</vh></v>
<v t="ekr.20171122044417.1"><vh>declutter: hide org-mode tags</vh></v>
<v t="ekr.20171122044441.2"><vh>declutter: replace @&lt;file&gt; with an icon</vh></v>
<v t="ekr.20171122044906.1"><vh>declutter: show last part of long filenames</vh></v>
</v>
</v>
</v>
<v t="ekr.20041119034357.15"><vh>Unicode options</vh>
<v t="ekr.20041119042929.10"><vh>@string new-leo-file-encoding = utf-8</vh></v>
<v t="ekr.20080212084020"><vh>@string default-at-auto-file-encoding = utf-8</vh></v>
<v t="ekr.20041119042929.9"><vh>@string default-derived-file-encoding = utf-8</vh></v>
</v>
<v t="ekr.20110611092035.16471"><vh>Widget colors</vh>
<v t="ekr.20080326060254.3"><vh>@string target-language = plain</vh></v>
</v>
<v t="ekr.20041213105954"><vh>Windows</vh>
<v t="ekr.20041119034357.38"><vh>Body pane options</vh>
<v t="jlunz.20151119171553.1"><vh>@bool cursor-stay-on-paste = True</vh></v>
<v t="ekr.20061010111324"><vh>@bool select-all-text-when-editing-headlines = False</vh></v>
<v t="ekr.20060531094310"><vh>@bool autoindent-in-nocolor-mode = True</vh></v>
<v t="ekr.20041119034357.43"><vh>@bool body-gmt-time = False</vh></v>
<v t="jlunz.20151120072157.1"><vh>@bool body-pane-wraps = True</vh></v>
<v t="ekr.20041119034357.42"><vh>@string body-time-format-string = %m/%d/%Y %H:%M:%S</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="chris.20180324074923.1"></t>
<t tx="ekr.20041119034357.1">@language rest
@wrap

This @settings tree contains all active settings.

Settings outside this tree have no effect.

The node "Qt Gui Stylesheet settings" contains most of the setting relating to appearance.
</t>
<t tx="ekr.20041119034357.10">See the "Tree Operation" node for settings that affect how the tree pane works.</t>
<t tx="ekr.20041119034357.12"></t>
<t tx="ekr.20041119034357.14">This option affects how Leo treats body text in @root trees.

True:    Body text in @root trees start in doc mode.

This is the way @root trees always worked prior to version 3.10.

False:    Body text in @root trees start in code mode.

This way makes @root trees more compatible with @file trees.</t>
<t tx="ekr.20041119034357.15"></t>
<t tx="ekr.20041119034357.20">
</t>
<t tx="ekr.20041119034357.31">The width of tabs on the screen.  This setting is also used when writing doc parts.

Valid values: Any nonzero integer.

Negative tab widths (recommended) cause Leo to convert tabs to blanks when typing.</t>
<t tx="ekr.20041119034357.32">The page width for wrapping doc parts in external files.

Valid values: any nonzero positive integer.</t>
<t tx="ekr.20041119034357.38"></t>
<t tx="ekr.20041119034357.42">The format string used when creating the Time/Date string for the Insert Time/Date command.
See the Python documentation for time.strftime for full details.

Examples:

1/30/2003 8:31:55
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S</t>
<t tx="ekr.20041119034357.43">True:  use gmt time.
False: use local time.</t>
<t tx="ekr.20041119034357.7"></t>
<t tx="ekr.20041119034357.8">Example:

"Created by Leo at @date"

A comment to be iserted in derived files just after the initial @+leo line.
The comment will appear in an @comment sentinel.
Notes:
1. Leo replaces @date with the date and time that the derived file was created.
2. Use \n to separate lines.
3. This must be empty for compatibility with older versions of Leo.
4. Please use an empty comment when updating to CVS!</t>
<t tx="ekr.20041119034357.9">@language rest

If present, say::
    
    @string stylesheet = x
    
The .leo file will contain the following line::

  &lt;?xml-stylesheet x ?&gt;

**Note**: x should contain any needed XML escapes.

**Note**: if x is empty, Leo will retain any xml-stylesheet line in the .leo file.
</t>
<t tx="ekr.20041119035137">@language rest
@wrap
@pagewidth 80

This is Leo's main settings file.  It specifies settings used to customize Leo.

@settings trees are composed of various kinds of nodes.

The headline of each node indicates its type.

The body text of most nodes contain comments. However, the body text of @data, @font and @shortcuts nodes contain settings. See the children of this node for details.
</t>
<t tx="ekr.20041119035704">These nodes describe the type, name and value of a single setting. Their
headlines have the form::

    @type-name setting-name = value

The basic types are: @bool, @color, @directory, @encoding, @font, @int, @path,
and @string.

None is a valid value for all types, indicating that the setting node has no
effect.
</t>
<t tx="ekr.20041119035704.1">Organizer nodes have headlines that do **not** start with @.

Organizer nodes may be inserted freely without changing the meaning of an @setting tree.</t>
<t tx="ekr.20041119035704.2">Leo ignores subtrees of @settings trees whose headline starts with @ignore.</t>
<t tx="ekr.20041119035704.3">Not implemented yet.

Creates a user-defined type. For example:

@type relief: string = [raised, sunken, flat, ridge, solid, groove]

This is much better than using a base type because the dialog creator can
present the user with a listbox containing only the valid options.</t>
<t tx="ekr.20041119041019.1">The string to be appended to file names resulting from the Remove Sentinels command.
If the value starts with . the extension is appended to the original file name.
Otherwise, the extension is appended before the file extension.
Example 1:
  File name x.y
  remove_sentinels_extension = _ns
  Result: x_ns.y
Example 2:
  File name x.y
  remove_sentinels_extension = .txt
  Result: x.y.txt

</t>
<t tx="ekr.20041119041019.2">True:  The Save command clears undo buffer.
False: The undo buffer persists across saves.</t>
<t tx="ekr.20041119041304">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.</t>
<t tx="ekr.20041119041304.1">This option specifies the directory to be used as a prefix for &lt;filename&gt; in

@path &lt;filename&gt;
@file &lt;filename&gt;
@root &lt;filename&gt;

when &lt;filename&gt; is a relative path.

Valid values for this option:

'!' means relative to the location leo.py (recommended).
'.' means relative to the location of the .leo file in the top window.

An absolute path (in platform-dependent format).

Relative paths are not allowed because their meaning would depend on the changing value of the current working directory.</t>
<t tx="ekr.20041119041747">nl or lf: (recommended) All lines end with "\n"
cr:       All lines end with "\r"
crlf:     All lines end with "\r\n"
platform: Lines end in platform-specific way.

With platform Leo opens output files in "w" mode rather than "wb" mode and writes '\n'

Please specify nl when uploading files to Leo's CVS site.</t>
<t tx="ekr.20041119042929"></t>
<t tx="ekr.20041119042929.1">Value must be Qt color name or value, such as 'red' or 'xf2fddff' (without the quotes).

Unlike in @data qt-gui-plugin-style-sheet, @values are not allowed as color values.</t>
<t tx="ekr.20041119042929.10">The encoding specified in the following line of new .leo files:

&lt;?xml version="1.0" encoding="UTF-8"&gt;

The recommended value is UTF-8 (upper case for compatibility for old versions of Leo).

iso-8859-1 would be a popular alternative.

Important: Once a .leo file is created the &lt;?xml..."&gt; line can only be changed by hand.  Alas, changing the &lt;?xml..."&gt; line by hand may cause unicode errors the next time the .leo file is loaded.  Therefore, you should change the &lt;?xml..."&gt; line by hand only when first creating a .leo file.</t>
<t tx="ekr.20041119042929.2">Same as @directory.</t>
<t tx="ekr.20041119042929.3"></t>
<t tx="ekr.20041119042929.4"></t>
<t tx="ekr.20041119042929.7"></t>
<t tx="ekr.20041119042929.9">The encoding used for derived files if no @encoding directive is in effect.
Default is UTF-8 (case not important).</t>
<t tx="ekr.20041119044139"></t>
<t tx="ekr.20041119050105.1">The change string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.</t>
<t tx="ekr.20041119050105.10"></t>
<t tx="ekr.20041119050105.11"></t>
<t tx="ekr.20041119050105.12"></t>
<t tx="ekr.20041119050105.14">When checked, the Find and Change commands search body text.
</t>
<t tx="ekr.20041119050105.15">When checked, the Find and Change commands search headline text.
</t>
<t tx="ekr.20041119050105.16">When checked, the Find and Change commands search only the currently selected headline and its offspring.
</t>
<t tx="ekr.20041119050105.2">The find string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.

</t>
<t tx="ekr.20041119050105.3">These settings determine whether the corresponding checkbox is checked by default.</t>
<t tx="ekr.20041119050105.4">Despite its name, this setting affects the default value of the Show Context checkbox.</t>
<t tx="ekr.20041119050105.5">When checked, the Find and Change commands ignore the case of alphabetic characters when determining matches.
</t>
<t tx="ekr.20041119050105.6">When checked, the Change command marks all headlines whose headline or body text are changed by the command.
</t>
<t tx="ekr.20041119050105.7">When checked, the Find and Change commands mark all headlines in which a match is found with the pattern.
</t>
<t tx="ekr.20041119050105.8">When checked, the Find and Change commands treat several characters specially in
the find pattern. The '*' character matches any sequence of zero or more
characters. The '.' character matches any single character. The '^' character at
the start of a pattern, or a '$' character at the end of a pattern matches a
newline.

Examples:

The pattern "^abc$" matches lines that only contain "abc".
The pattern "^a" matches any line starting with "A".
The pattern "a$" matches any line ending with "a".
The pattern "^*$" matches any line at all.</t>
<t tx="ekr.20041119050105.9"></t>
<t tx="ekr.20041119050749.10">The format string used when creating the Time/Date string for the Insert Time/Date command.

See the Python documentation for time.strftime for full details.

Examples:
1/30
%m/%d

1/30/03 8:31:02
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S
</t>
<t tx="ekr.20041119050749.4">True:  Tell whether drags will move nodes or clone nodes.
False: Don't issue such messages.

</t>
<t tx="ekr.20041119105509">**Not implemented**.

Creates a permanent value that can be tested later with @if. That is, it alters
the environment in which @if code is executed.</t>
<t tx="ekr.20041119110141">Enable descendant settings if sys.platform is the given platform name or names.

Typical platform names are darwin, linux2, win32.

Case is ignored in platform names.

Examples:

@ifplatform darwwin, linux2
    Enables descendant settings for MacOs or Linux
    
@ifplatform win32
    Enables descendant settings for Windows
    
</t>
<t tx="ekr.20041120155431.1">The body text of @shortcut nodes contain the specification for zero or more shortcuts.

Lines starting with # are ignored.

All other non-blank lines should have the form:

commandName = shortcut specifier.

**Note**: not all bindings are possible on MacOS, especially Ctrl-H and Ctrl-period.</t>
<t tx="ekr.20041120155431.2">Not implemented yet.

Autments the settings parser and the dialog creator with scripts.</t>
<t tx="ekr.20041120181045">A float value restricted to the range 0.0 to 1.0.</t>
<t tx="ekr.20041122163623">When looking for @whatever, Leo converts whatever to lower case and removes
minus signs. For example, the following are equivalent::

    @if-platform
    @ifPlatform
    @ifplatform
</t>
<t tx="ekr.20041213105954">Options that require pixel values can be any Python expression that yields an int.
Warning: the number of pixels per inch varies...</t>
<t tx="ekr.20050126083026">node granularity: start a new undo unit when typing moves to a new node.
line granularity: start a new undo unit when typing moves to new line.
word granularity: start a new undo unit when typing starts a new word.
char granularity: start a new undo unit for each character typed.

'line' granularity is the default used if no valid setting is specified.

Leo used char granularity for all version prior to 4.3. char granularity is not
recommended; it is clumsy and wasteful of computer memory.</t>
<t tx="ekr.20060122105527.7">True: (Recommended) Selecting an outline node leaves the focus in the outline pane.

If this is False it will be harder to use the arrow keys in the headline.
    
False: (Legacy) Selecting an outline node transfers focus to the body pane.</t>
<t tx="ekr.20060127050605">Zero (recommended): unlimited stack size.
Non-zero: limit the maximum stack size to the given number.</t>
<t tx="ekr.20060323131801">True: warn if a command has no setting.</t>
<t tx="ekr.20060531094310">True:  auto-indent regardless of how text is colored.
False: suppress auto-indenting if in range @nocolor or @kill.</t>
<t tx="ekr.20060730101451"></t>
<t tx="ekr.20060730101451.3"></t>
<t tx="ekr.20060730101451.5"></t>
<t tx="ekr.20060913144412">@keys nodes mark as set of @shortcuts nodes.  @keys nodes are used only by the script in the node:
    
    @button Check Bindings
    
in this file.  This makes it possible for the script to produce better error messages.</t>
<t tx="ekr.20060930085532">True: (Recommended) The find commands collapse all nodes that are not ancestors of the node containing the match.
False: The find command expands nodes needed to show the match, but does not collapse any nodes.</t>
<t tx="ekr.20061002115414"></t>
<t tx="ekr.20061002115414.1">The time (in seconds) that controls how handles keystrokes when the outline pane has focus.

When two keystrokes are separated by less than this time, Leo will attempt to
find the next headline that starts with the previous match, extended by the key
just typed. Otherwise, Leo will find the next headline that starts with the key
just typed.

The outline nav search reverts to a single-character search if the extended
search fails, so in practice everything works well without thinking about what
is happening.
</t>
<t tx="ekr.20061003173413"></t>
<t tx="ekr.20061007211759">True: collapse the parent of the moved node when moving a node left.
</t>
<t tx="ekr.20061010111324">True: (legacy) Select all headline text when editing a headline.
False: Put the cursor at the end of the headline text.</t>
<t tx="ekr.20061011082224">@language rest
@wrap

myLeoSettings.leo contains your personal settings.

Settings in myLeoSettings.leo override the settings in this file.

Put myLeoSettings.leo in your home (~) directory or in the ~/.leo directory.

Distributions of Leo do not contain myLeoSettings.leo; Leo never
changes your personal myLeoSettings.leo file.

**Note**: If you don't have myLeoSettings.leo, Leo creates it for you with a copy of @enabled-plugins from leoSettings.leo.
</t>
<t tx="ekr.20061012122620">True:  When a node is expanded, insert new nodes as the last child.
False: (legacy &amp; recommended) When a node is expanded, insert new nodes as the first child.</t>
<t tx="ekr.20061029091403"></t>
<t tx="ekr.20061210091932">True: call os.chdir(base) when handling a relative path.
      as specified by the @string relative_path_base_directory setting.
      
False: Do not call os.chdir(base) when handing a relative path.</t>
<t tx="ekr.20070224073109">The body text of @enabled-plugins nodes contain the list of enabled plugins, one per line.

Comment lines starting with '#' are ignored.

Leo loads plugins in the order they appear.

There has been considerable confusion in the past about just how this works. Please read the following carefully.

Let us distinguish two different situations. First, what Leo does when loading a file, say x.leo initially. Second, what Leo does when loading a second file, say y.leo, *from x.leo*.

In the first case, Leo will use the *last* found @enabled-plugins node from the list list of settings files.  As always, the search order for settings is:

1. leo/config/leoSettings.leo
2. ~/.leo/leoSettings.leo
3. leo/config/myLeoSettings.leo
4. ~/.leo/myLeoSettings.leo
5.  x.leo

In the first case, it *is* possible to disable any or all plugins. For example, you could put an empty @enabled-plugins node in x.leo. If x.leo contains no @enabled-plugins node, you could put an empty @enabled-plugins node in myLeoSettings.leo.

In the second case, plugins have *already* been loaded and enabled. In this case, there is *no way* to disable already-loaded-and-enabled plugins. All you can do is enable more plugins.

y.leo can enable more plugins if it contains an @enabled-plugins node that mentions more plugins. If y.leo contains no @enabled-plugins node, loading y.leo might cause myLeoSettings.leo to enable more plugins if

a) x.leo contained an @enabled-plugins node and
b) myLeoSettings.leo mentions plugins not mentioned x.leo

To summarize, Leo enables plugins in a (relatively) straightforward way when it loads x.leo. Leo also enables plugins (in the same way) when loading y.leo. But things might get confusing, depending on whether x.leo or y.leo (or both or neither) contain @enabled-plugins nodes. This simply can't be helped, and it is emphatically *not* a bug in Leo.

Leo acts in a reasonable manner, but it is still possible to get confused even if you know the rules. This suggests that you refrain from putting @enabled-plugins nodes in any .leo file except myLeoSettings.leo. That way all your .leo files will use the same plugins. If you do put @enabled-plugins nodes in x.leo, be prepared for confusion from time to time.
</t>
<t tx="ekr.20070411172718">@openwith nodes in @settings trees create menu items. The openWith
plugin must be active for these settings to have any effect.

The headline of an @openwith node has the form::

    @openwith name = shortcut
    
name is name of the menu item. shortcut specifies the shortcut used to invoke
the menu item. shortcut may be None.

The body text @openwith nodes should contain a single line contain a tuple of the form::

    command,arg,ext

For example::
    
    'subprocess.Popen',['pythonw','C:/Python24/Lib/idlelib/idle.pyw'],'.py'
    
When the user selects this menu item Leo executes command(arg+path) where path
is the full path to the temp file. The ext argument specifies the extension of
the temp file. Notes:

- command is a string.  Valid values are::
    
  'subprocess.Popen'
  'os.system'
  'os.startfile'
  'os.spawnl'
  'os.spawnv'
  'exec'
  
- arg is either a single string or a list of strings.

- ext is a string or None. If None, Leo computes a file extension base on what
  @language directive is in effect.
  
- If the .leo file being loaded contains @openwith nodes, the File:Open With
menu contains only the items created by those nodes. Similarly, @openwith nodes
in myLeoSettings.leo override entries in leoSettings.leo.
</t>
<t tx="ekr.20070419103554">True:  Leo ensures that non-empty body text ends in a newline in @nosent trees.
False: Leo leaves body text alone when writing @nosent trees.</t>
<t tx="ekr.20070615094204">True: goto-next-node and goto-prev-node commands contract the selected node.</t>
<t tx="ekr.20070926082407">@language rest

All @button nodes in the @buttons tree define **global buttons** that appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this outline.

@language python
</t>
<t tx="ekr.20070926132045">@language rest

All @button nodes in the @buttons tree define **global buttons** that
appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this
outline.

@language python
</t>
<t tx="ekr.20071110153046">This option has effect only when importing so-called non-strict languages,
for which leading whitespace is not terribly significant.

True: @auto warns about mismatches that occur solely in leading whitespace.</t>
<t tx="ekr.20071213060239">@color</t>
<t tx="ekr.20071213061454.1">True: Writes **node markers** for use by the http plugin.

Node markers are rst named hyperlink targets. By default they look like:
``.. _http-node-marker-N``, where N is a unique node number.

`@string rst3-node-begin-marker` specifies the format of these node markers.

</t>
<t tx="ekr.20071213061454.3">The string used for node markers.  See `@bool rst3-http-server-support`.
</t>
<t tx="ekr.20071213061504">The path to be prepended to *relative* filenames given in @rst nodes.

This setting has no effect for *absolute* filenames.</t>
<t tx="ekr.20071213061504.1">The name of the stylesheet passed to docutils.

This setting has effect only if `@bool rst3-call-docutils = True`.
</t>
<t tx="ekr.20071213061504.2">The directory containing the stylesheet passed to docutils.

This setting has effect only if `@bool rst3-call-docutils = True`.
</t>
<t tx="ekr.20071213061504.3">This setting has effect only if `@bool rst3-call-docutils = True`.

This setting gives arguments to be passed to ``docutils.core.Publisher().publish()``
when no stylesheet is in effect.

The setting should be comma-separated list of strings: For example, the option::

    publish-argv-for-missing-stylesheets=--language=de,--documentclass=report,--use-latex-toc

results in the call::

    publish(['--language=de','--documentclass=report','--use-latex-toc'])</t>
<t tx="ekr.20071213061811.1">The underlining characters to be used to specify rST sections.

The first character is reserved (not used) so you can specify the top-level
section explicitly.</t>
<t tx="ekr.20071213061811.2">**True**: write additional informational messages to the log.</t>
<t tx="ekr.20071213061811.3">True: writes the intermediate file to the external file system.
      Must be True when using Sphinx.
    
The name of the intermediate file is the name of the output file with the extension given by

`@string rst3-write-intermediate-extension`.
</t>
<t tx="ekr.20071217093419">The body text should contain the data, one string per line. Lines starting with '#' are *included* in the data.

@data nodes may be split: the data consists of the body text of the @data node itself and the body text of all descendant nodes, in outline order. Two fine points about the concatenation of data:

1. Descendant nodes whose headlines start with '@' do not become part of the data. At present, no @data nodes have descendants, but this convention does something reasonable if nodes like @int or @string were descendants of an @data node.

2. The @data parser adds a newline to every "fragment" if necessary. This doesn't seem to matter for style sheets, but it could matter for other kinds of @data data.

**@data qt-gui-plugin-style-sheet**

The @data qt-gui-plugin-style-sheet node consists of some general comments, with descendant nodes for the body pane, tree pane, etc. etc. There is no limit of nesting: the Plugins node has a child for each plugin that uses style sheets.

This makes debugging style sheets easier. Typically, an error in any part of the style sheet invalidates the whole style sheet. With the new organization, one can swap nodes into or out of the @data node to find the invalid node or nodes.

**@data history-list**

Contains a list, one per line, of command names to be added to command history.  Order is significant.
</t>
<t tx="ekr.20080212084020">The encoding used for files imported by @auto if no @encoding directive is in effect.
Default is UTF-8 (case not important).</t>
<t tx="ekr.20080312071248.19">The headline contains the button name, optionally followed by an @key=val field indicating a shortcut.

The body text contains the script associated with the button.</t>
<t tx="ekr.20080312071248.20">The headline contains the command name, optionally followed by an @key=val field indicating a shortcut.

The body text contains the script associated with the command.</t>
<t tx="ekr.20080312071248.25">Denotes the tree containing active @button nodes.
@button nodes outside this tree are ignored.</t>
<t tx="ekr.20080312071248.26">Denotes the tree containing active @command nodes.
@command nodes outside this tree are ignored.</t>
<t tx="ekr.20080312075451.1">@language rest

All @command nodes in the @commands tree define **global commands** that
appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in
this outline.
</t>
<t tx="ekr.20080312075451.2">@language python
@nocolor-node

All @command nodes in the @commands tree define **global commands** that appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in this outline.
</t>
<t tx="ekr.20080315083057.7">True: (Recommended) The spell commands collapse all nodes that are not ancestors of the node containing the match.
False: The spell commands do not collapse any nodes.</t>
<t tx="ekr.20080326060254.3">The default language if no @language or @comment is in effect.

Valid values are (case is ignored):

actionscript,c,csharp,css,cweb,elisp,html,java,latex,
pascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.</t>
<t tx="ekr.20080811105020.2">False: (recommended) Enable import parsing for @shadow and @auto
True: @shadow and @auto create a single node for the entire file.</t>
<t tx="ekr.20080921060401.3"></t>
<t tx="ekr.20081216090156.5">The escape string that Leo inserts to represent underindented lines.

If a line starts with \\-N, Leo will write the line with N fewer spaces
than expected.

An **underindented line** is a line of body text that is indented less then
the starting line of the class, method or function in which it appears. Leo
outlines can not represent such lines exactly: every line in an external
file will have at least the indentation of any unindented line of the
corresponding node in the outline. Leo will issue a warning (not an error)
for underindented Python comment lines. Such lines can not change the
meaning of Python programs.
</t>
<t tx="ekr.20090430075506.7">True: write comment line of the form:
    
.. rst3: filename: &lt;filename&gt;

at these start of the output.</t>
<t tx="ekr.20090514111518.8379"></t>
<t tx="ekr.20100107060708.6390"></t>
<t tx="ekr.20110601103939.19339">True: A *single* click in an already selected node begins editing of the headline.</t>
<t tx="ekr.20110611092035.16463"></t>
<t tx="ekr.20110611092035.16471"></t>
<t tx="ekr.20110611092035.16474"></t>
<t tx="ekr.20110611092035.16476">If neither is checked, Leo searches the entire outline.</t>
<t tx="ekr.20110611092035.16477"></t>
<t tx="ekr.20110611092035.16480">@language rest
@wrap

</t>
<t tx="ekr.20110611092035.16481"></t>
<t tx="ekr.20110611092035.16482"></t>
<t tx="ekr.20110611092035.16491"></t>
<t tx="ekr.20110917104720.9414"></t>
<t tx="ekr.20110917104720.9415"># The names of your classes, one per line.

Commands
vnode
position
</t>
<t tx="ekr.20110917104720.9416"># The names of your typedef types and standard types, one per line.
#
# c-to-python converts::
#
#   new aType(...)
#
# to::
#
#   aType(...)

char
void
short
long
int
double
float
unsigned</t>
<t tx="ekr.20110917104720.9417"># The instance variables (ivars) used by your programs classes.
# This creates a dictionary.  Keys are class names, values are lists of ivars.

# Lines ending with a colon specify keys.
# All other lines are comma-delimited lists of ivars for the last-seen key.
# Trailing commas are ignored.

atFile:
    mCommands, mErrors, mStructureErrors,
    mTargetFileName, mOutputFileName, mOutputStream,
    mStartSentinelComment, mEndSentinelComment, mRoot

vnode:
    mCommands, mJoinList, mIconVal, mTreeID, mT, mStatusBits

tnode:
    mBodyString, mBodyRTF, mJoinHead, mStatusBits, mFileIndex,
    mSelectionStart, mSelectionLength, mCloneIndex,

LeoFrame:
    mNextFrame, mPrevFrame, mCommands,

Commands:
# public
    mCurrentVnode, mLeoFrame, mInhibitOnTreeChanged, mMaxTnodeIndex,
    mTreeCtrl, mBodyCtrl, mFirstWindowAndNeverSaved,
#private
    mTabWidth, mChanged, mOutlineExpansionLevel, mUsingClipboard,
    mFileName, mMemoryInputStream, mMemoryOutputStream, mFileInputStream,
    mInputFile, mFileOutputStream, mFileSize, mTopVnode, mTagList,
    mMaxVnodeTag,
    mUndoType, mUndoVnode, mUndoParent, mUndoBack, mUndoN,
    mUndoDVnodes, mUndoLastChild, mUndoablyDeletedVnode,
</t>
<t tx="ekr.20111003130143.15561">**Important**: these nodes **only** specify fonts used by Leo's syntax colorizer.

To set fonts in Leo's widgets, change Leo's master style sheet::
    
    @data qt-gui-plugin-style-sheet
    
**Notes**
    
- Leo ignores everything in the headline after @font: only the body matters.
- Body lines starting with '#' are comments.
- All other body lines should have the form:

    &lt;optional language name&gt;&lt;jEdit or Pygments key&gt;&lt;specifiers&gt;

- Underlines and '-' characters are ignored, and can be used for readability.
- Valid specifiers are:
    
    family: a font family name.
            None is the default, indicating the default font.
    size:   an integer.  Leo will ignore suffixes like pt and px.
    weight: bold, normal, None.'
            Default is normal.
    slant:  roman, italic, None.
            Default is roman.

- **Note**: A single @font node may create settings for different languages.
            See example 3 below.

Example 1: Sets the comment1 font, for python only:

python_comment1_family = None
python_comment1_size = 12
python_comment1_slant = italic
python_comment1_weight = None

Example 2: Sets the comment1 font for all languages:

comment1_family = None
comment1_size = 12
comment1_slant = italic
comment1_weight = bold

Example 3: Combining the previous two examples:

python_comment1_size = 12
python_comment1_slant = italic
comment1_size = 12
comment1_slant = italic

Use the show-fonts command to pick fonts, then copy the values shown by the
show-fonts command to the values here.
</t>
<t tx="ekr.20111029055127.16614"># lowercase xml tags, one per line.

html
body
head
div
table
</t>
<t tx="ekr.20111029055127.16616"># lowercase html tags, one per line.

a
abbr
acronym
address
applet
area
b
base
basefont
bdo
big
blockquote
body
br
button
caption
center
cite
code
col
colgroup
dd
del
dfn
dir
div
dl
dt
em
fieldset
font
form
frame
frameset
head
h1
h2
h3
h4
h5
h6
hr
html
i
iframe
img
input
ins
kbd
label
legend
li
link
map
menu
meta
noframes
noscript
object
ol
optgroup
option
p
param
pre
q
s
samp
script
select
small
span
strike
strong
style
sub
sup
table
tbody
td
textarea
tfoot
th
thead
title
tr
tt
u
ul
var</t>
<t tx="ekr.20111109104336.12503">New in Leo 4.9.1.

True (Recommended):
    An excellent, subliminal, improvement.
    The contract-or-goto-parent (Alt-RtArrow) contracts all
    children of the to-be-selected parent.
</t>
<t tx="ekr.20130503155210.16364">\@menuat modifies the menu tree created by \@menus. This allows settings in
myLeoSettings.leo to change menues without copying the entire menu tree from
leoSettings.leo. This ensures you don’t miss out when new things are added in
the @menus in leoSettings.leo, as you would if you replaced the @menus in
leoSettings.leo with one in myLeoSettings.leo.

\@menuat should occur in a \@settings tree, but not as a descendant of a \@menus
tree. Its children are \@menu and \@item nodes as for the
@menu setting.

The @menuat setting has 2-3 parameters in its head text.

    @menuat *&lt;path&gt;* *&lt;action&gt;* *[clipboard]*

The path argument specifies a **target** in the menu tree as defined by
\@menus and modified by earlier @menuat settings. The path takes the form::

    /entry1/entry2/entry3
    
Each entry is the **cleaned** name of a menu or item. Cleaned names are a
name with all text except a-z and 0-9 removed and upper case letters converted
to lower case. For example, specify::

    Outline-&gt;Move-&gt;Move Down
    
as::
    
     /outline/move/movedown

The action argument specifies what the menu item does. There are 5 available
actions:

- before: Insert items and sub menus immediately before the target.
- after:  Insert items and sub menus immediately after the target.
- append: Append items and sub menus at the end of the target menu or item.
- cut:    Remove the target from the menu tree and save it to an internal clipboard.
- copy:   Copy the target to an internal clipboard. Descendants of the @menuat setting are ignored.

The cut and copy arguments ignore descendants of the @menuat setting .

The optional clipboard argument modifies the action of the before, after, and
append actions. By default these actions insert the menus and items supplied as
descendants of the @menuat setting. If you specify “clipboard” (without the
quotes) as the source, the contents of the clipboard from a previous cut or copy
action will be used instead.</t>
<t tx="ekr.20131008181812.17533">False: disable all drag and drop operations in the outline.</t>
<t tx="ekr.20131009050634.17656">True: Call docutils to process the intermediate file.

Set this option to False when using Sphinx.</t>
<t tx="ekr.20131027064821.18683">The extention appended to the names of intermediate files.

See `@bool rst3-write-intermediate-file`</t>
<t tx="ekr.20131112150804.18737">True: the execute-script command executes the entire body, even if text is selected.</t>
<t tx="ekr.20131115075142.18226">\@outline-data nodes and their descendants create settings whose values are
entire trees. Here's how it works:

The *value* returned by c.config.getOutlineData is the xml string created when
Leo pastes the @outline-data node to the clipboard. As a result, Leo can use all
the standard configuration code for @outline-data! Settings in a local file
override myLeoSettings.leo settings, which override settings in leoSettings.leo.

To retrive the value of an @outline-data setting::

    s = c.config.getOutlineData(setting-name)
    c.fileCommands.leo_file_encoding='utf-8' p =
    c.pasteOutline(s=tree_s,redrawFlag=False,undoFlag=False)
    
This makes the outline available for further processing.

For example, to handle tree-valued abbreviations, the inint code in the
abbrevCommandsClass pastes the outline into the present outline, uses the pasted
outline to discover tree-valued abbreviations, and then *deletes* the tree.

</t>
<t tx="ekr.20131119143342.20107">@language rest

The @bool use-find-dialog and @bool minibuffer-find-mode settings comprise
a tri-state setting, as shown in this table:
    
minibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in
--------------------    ---------------     --------------------------
    True                    Ignored         minibuffer
    False                   True            dialog
    False                   False           Find tab in the log pane

*All modes*

- Start the search with Ctrl-F (start-search).
- Enter the find pattern.
- (Optional) Use &lt;Tab&gt; to enter the search pattern.
- Use &lt;Enter&gt; to start the search.

*dialog and find tab modes*

- Non-functional "buttons" remind you of key bindings.

*minibuffer mode*

- Use Ctrl-G as always to leave the minibuffer.
- The Find tab is not made visible, but the status area shows the settings.</t>
<t tx="ekr.20131119143342.20108"></t>
<t tx="ekr.20141024165714.1">True:  Scroll the find tab ensure find input field visible. (fixes bug 1254861)
False: Never scroll the find tab automatically.</t>
<t tx="ekr.20150216135059.1">With @clean and @file, Leo can store persistent data in nodes. This
information consists of the node’s gnx (Global Node Index) and the node’s
uA, (User Attributes).

The gnx gives each node a unique, immutable identity. Gnx’s make clones
possible. The uA allows scripts and plugins to associate arbitrarily much
additional data with each node.

By default, Leo’s importers preserve neither gnx’s nor uA’s. This makes
imported @auto trees second class citizens. To remedy this, if an outline
contains an @persistence node, Leo will save data in the @persistence tree
that allows Leo to recover gnx’s and uA’s when re-reading @auto files
later. This allows clone links and uA’s to persist.

This is an optional feature. The stored data is akin to bookmarks. The data
can “break” (become inaccessible) if the structure (including
class/method/function names) changes.
</t>
<t tx="ekr.20150227102835.1">True: (Recommended) Make a "Recovered Nodes" node whenever Leo reads a file that has been changed outside of Leo.
</t>
<t tx="ekr.20150321090958.1">True: write check messages to Leo's log pane as well as the console.

Note: check-outline always writes error messages to both log and console.</t>
<t tx="ekr.20150403055250.1">True: check all @&lt;file&gt; nodes in the outline for changes in corresponding external files.

Warning: Checking many networked files can hang Leo. See:
https://github.com/leo-editor/leo-editor/issues/262
</t>
<t tx="ekr.20150426031409.1">Enables descendant settings depending on the HOSTNAME environmental variable.

Case is ignored in the value of the environment variable.

For example, let h = os.environ('HOSTNAME').lower()
        
@ifhostname bob
    Enables descendant settings if h == 'bob'

@ifhostname !bob
    Enables descendant settings if h != 'bob'
</t>
<t tx="ekr.20150426033400.1">Enables descendant settings depending on the value of an environment variable.

Valid form is:

    @ifenv name,comma-separated-values

Case is significant in the *name* of the environment variable.
Case is ignored in the *values*.

Examples:

@ifenv HOSTNAME,bob
    Enables descendant settings if os.environ('HOSTNAME') is 'Bob' or 'bob'
    
@ifenv EDITOR,leo,lion
    Enables descendant settings if os.environ('Editor') is 'Leo' or 'Lion'.
</t>
<t tx="ekr.20150618105435.1">@language rest

The @bool use-find-dialog and @bool minibuffer-find-mode settings comprise
a tri-state setting, as shown in this table:
    
minibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in
--------------------    ---------------     --------------------------
    True                    Ignored         minibuffer
    False                   True            dialog
    False                   False           Find tab in the log pane

*All modes*

- Start the search with Ctrl-F (start-search).
- Enter the find pattern.
- (Optional) Use &lt;Tab&gt; to enter the search pattern.
- Use &lt;Enter&gt; to start the search.

*dialog and find tab modes*

- Non-functional "buttons" remind you of key bindings.

*minibuffer mode*

- Use Ctrl-G as always to leave the minibuffer.
- The Find tab is not made visible, but the status area shows the settings.</t>
<t tx="ekr.20150710065036.1">True: start-search (F3) automatically loads the Find Pattern.</t>
<t tx="ekr.20150710084507.1">True: raise a dialog warning about Python errors when writing files.</t>
<t tx="ekr.20160112111247.1"># Lines to be inserted at the start of each stub file.

from typing import Any, Dict, Optional, Sequence, Tuple, Union

# At present, I don't understand how to tell mypy about ast.Node
# import ast
# Node = ast.Node

Node = Any
</t>
<t tx="ekr.20160127043440.1"></t>
<t tx="ekr.20160127043520.1">AstFormatter.*: str
Pattern.all_matches: Sequence
Pattern.full_balanced_match: Optional[int]
Pattern.match_balanced: int
Pattern.match_entire_string: bool
StandAloneMakeStubFile.scan_types: Dict[str, str]
StubFormatter.do_.*: str
StubTraverser.format_returns: str
StubTraverser.match_return_patterns: Tuple[bool,str]
StubTraverser.match_return_pattern: Optional[str]
StubTraverser.match_balanced: int</t>
<t tx="ekr.20160127051243.1">The directory to which stub files are written.</t>
<t tx="ekr.20160127051552.1">True: allow stub files to be overwritten
</t>
<t tx="ekr.20160130145944.1"># Patterns to be applied to argument lists and return expressions.

aList: Sequence
controller: StandAloneMakeStubFile
fn: str
i[0-3]*: int
node: Node
parser: optparse.OptionParser
repr(*): str
s[0-3]*: str
str%(*): str
str%str: str
str.join(*): str
str.replace(*): str

# Leo patterns:

aList: Sequence
aList1: Sequence
aList2: Sequence
c: C
c1: C
c2: C
i: int
j: int
k: int
node: ast.Ast
p: P
p1: P
p2: P
s: str
s2: str
strict: bool
v: V
v1: V
v2: V</t>
<t tx="ekr.20160316111054.1"></t>
<t tx="ekr.20160316112407.2">True: allow stub files to be overwritten
</t>
<t tx="ekr.20160316112407.8">The directory to which stub files are written.</t>
<t tx="ekr.20160317062151.1"># Regular expression patterns.

.*__name__: str
</t>
<t tx="ekr.20160318061607.3"></t>
<t tx="ekr.20160318061607.4"></t>
<t tx="ekr.20160318061607.5"></t>
<t tx="ekr.20160318061607.6"></t>
<t tx="ekr.20160318061607.7"></t>
<t tx="ekr.20160428072005.1"># Lines starting with '#' are comment lines.
# A list of command names to be pre-loaded into the history list.
pylint
sort-lines
</t>
<t tx="ekr.20161021095001.1">True: run Pyflakes on each saved files, but only if it has been changed.</t>
<t tx="ekr.20170706103843.1"></t>
<t tx="ekr.20170718054928.1"></t>
<t tx="ekr.20170718054951.1"></t>
<t tx="ekr.20170823083657.1">Leo creates its menus using @menus trees. Within @menus trees,
@menu nodes create menus and @item nodes create menu items.

Notes:

- The menu name always follows @menu. If the menu name is 'Plugins', Leo will create the Plugins menu and populate the menu by calling the 'create-optional-menus' hook. This creates the Plugins menu as usual.

- The first non-blank, non-comment line of the body of an @menu item is an an alternate name for the menu.  This allows translations of menus.

- Nested @menu nodes contain submenus.

- The command name follows @item. If the body text of an @item node exists, the first non-blank, non-comment line of the body text is the menu name. Otherwise, the menu name is the command name. However, if the command name starts with a '*', hyphens are removed from the menu name.

- Menu names and command names may contain a single ampersand (&amp;). If present, the following character is underlined in the name.

- If the command name in an @item node is just a hyphen (-), the item represents a menu separator.
</t>
<t tx="ekr.20170825083426.1"># typedef names, one per line

# These fix #545:

    # _Bool
    # scr_enter_status_t
    # scr_exec_status_t
    # scr_exit_status_t
    # scr_node_api_t
    # scr_update_status_t
    # uint16_t
    # uint8_t
</t>
<t tx="ekr.20171121100639.1"></t>
<t tx="ekr.20171122044417.1"># RULE :([\w_@]+:)+\s*$
# REPLACE-HEAD
</t>
<t tx="ekr.20171122044441.1"># if the node name starts with 'peacock node DEMO', make a mess of it
RULE ^(peacock node DEMO)
REPLACE LOOK: \1
ICON Tango/16x16/emotes/face-grin.png
ICON Tango/16x16/emotes/face-wink.png
FG @solarized-magenta
BG white
FONT Times
PX 40
ITALIC 1
WEIGHT Bold
</t>
<t tx="ekr.20171122044441.2"># remove @clean etc. and use an icon
RULE ^@clean (.*)
REPLACE \1
ICON file_icons/file_clean.png

RULE ^@auto (.*)
REPLACE \1
ICON file_icons/file_auto.png

RULE ^@edit (.*)
REPLACE \1
ICON file_icons/file_edit.png

RULE ^@asis (.*)
REPLACE \1
ICON file_icons/file_asis.png

RULE ^@nosent (.*)
REPLACE \1
ICON file_icons/file_nosent.png

RULE ^@file (.*)
REPLACE \1
ICON file_icons/file_file.png
</t>
<t tx="ekr.20171122044441.3"># Add Icon to folders and remove /-/
RULE ^/(.*)/$
REPLACE \1 
ICON file_icons/folder.png

# Add icon to path folders and remove @path
RULE ^@path (.*)
REPLACE \1 
ICON file_icons/folder_path.png

# Add Icon to removed folders and remove */-/*
RULE ^\*/(.*)/\*$
REPLACE \1 
ICON file_icons/folder_removed.png

# Add Icon to removed files and remove *-* but not **-**
RULE ^\*([^\*/]*[^\*]*[^\*/]*)\*$
REPLACE \1 
ICON file_icons/removed.png
</t>
<t tx="ekr.20171122044906.1"># show the last part of long filenames
RULE ^.{1,1000}/(.{20})
REPLACE …/\1
</t>
<t tx="ekr.20171122113628.1"># **Decluttering** replaces controls custom formatting of headlines, including:

# - Hiding or changing headline text,
# - Adding icons to headlines,
# - Changing the styling of headlines.

# Decluttering is *inactive* when you are editing a headline.

# Decluttering is *completely optional*. To enable decluttering, use::

     # @bool tree-declutter = True
     
# Decluttering is controlled by **decluttering rulesets**.
# You specify decluttering rulesets in the body text of::
     
    # @data tree-declutter-patterns
    
# As usual with @data nodes:

# - Blank lines and lines starting with '#' are ignored.
# - You may organize the text of the @data node using child nodes.

# Each ruleset consists of a list of lines:

# - The first line is a **rule line**, containing a **find pattern**.
# - The second line is a **replacement line**.
# - The ruleset ends with zero or more **style lines**.

# Find patterns are `regular expressions &lt;https://docs.python.org/2/library/re.html&gt;`_.
# Decluttering affects only those headlines that match a rule pattern. 

# The following section shows some example rulesets. Later sections discuss decluttering commands, patterns and styles in more detail.
</t>
<t tx="ekr.20171122113628.3"># All rulesets start with a **rule line** of the form::

    # RULE &lt;regular expression&gt;
    
# The ruleset matches a headline if and only if the regular expression matches. Matches can start anywhere in the headline. Leo first attempts to a match using re.match. If that doesn't work, Leo tries re.search.

# A **replacement line** must follow the rule line. Here are the valid forms::

    # REPLACE &lt;substitution expression&gt;
    # REPLACE-HEAD
    # REPLACE-TAIL
    # REPLACE-REST
    
# - REPLACE replaces the headline by the value of the substitution expression.  For example::

    # REPLACE \1
    
  # matches replaces the headline by the first matched regex group.

# - REPLACE-HEAD replaces replace the headline by the text that precedes the matched text.

# - REPLACE-TAIL replaces the headline by the text that follows the matched text.

# - REPLACE-REST replaces the headline by everything except the matched text.
</t>
<t tx="ekr.20171122113628.4"># Leo applies style lines only if they appear in a ruleset that matches a headline.
# Style lines do the following...

# Add an icon to the headline::

    # ICON path/to/icon
    
# Set the background or foreground color to a color number or names::

    # BG #FF8800
    # FG @solarized-magenta

# Set the font to a given font name::

    # Font Times
    
# Set the font size in pixels (PX) or points (PT)::

    # PX 40
    # PT 16
    
# Enable or disable italics::

    # ITALIC 0
    # ITALIC 1

# Set the font weight to one of Light, Normal, DemiBold, Bold, Black::

    # WEIGHT DemoBold
</t>
<t tx="ekr.20180117074230.1"># True: Show user tips on startup.</t>
<t tx="ekr.20180124050114.1">For each @button node, Leo adds right-click menu items for:

- @rclick nodes directly *following* the @button.

- @rclick nodes that are *children* of the @button node, provided that the
  @button node has no ``@others`` directive.

**Standard rclick items**: Leo adds two standard right-click menu items for
each @button node: ``Remove Button`` and ``Goto Script``. Leo adds the
indicator text **only** to buttons that contain right-click menu items in
addition to these two standard right-click menu items.

The headline of the @rclick node gives the menu title. The body contains a
Leo script to execute when the user selects the menu item.

**Related Setting**:

@string mod_scripting_subtext = ▼

This setting specifies **indicator text** that indicates that an @button button has right-click menu items created by @rclick nodes.

Unicode chars like ▼ ▾ and … are typical choices for this text.
</t>
<t tx="ekr.20180301060510.1">The maximum number of lines to show in @data nodes.

0 causes all lines to be shown.
</t>
<t tx="ekr.20181018075747.1"></t>
<t tx="ekr.20181018075844.1"></t>
<t tx="ekr.20181018075857.1"></t>
<t tx="ekr.20181018075857.2"></t>
<t tx="ekr.20181018075857.3"></t>
<t tx="ekr.20181018103757.1">
</t>
<t tx="ekr.20181018103813.1">True: use verbose mode.</t>
<t tx="ekr.20181018105904.1"></t>
<t tx="ekr.20181018105945.1"></t>
<t tx="ekr.20181018110022.1"></t>
<t tx="ekr.20181018113812.1">
</t>
<t tx="ekr.20181018113813.1"></t>
<t tx="ekr.20190608085550.1">The maximum line length allowed by the find-long-lines command.</t>
<t tx="ekr.20200226102131.1">True: report unchanged files when saving a .leo file.</t>
<t tx="ekr.20200620060909.1">True: The cython importer will copy the first decorator preceding a
      function/method into the headline of the imported node.
      
**Note**: The importer will copy only the first line of a multiline decorator.</t>
<t tx="ekr.20200620064409.1">*Note*: Used only if @bool add-context-to-headlines is True.

If True, use headline "bar (foo.py)" for bar() defined at top level in foo.py. This is
useful if you've cloned the node so its origin is not obvious from context.

If False, does not do the above, useful if you don't use clones and don't
want the visual clutter of repeated class / file names.</t>
<t tx="ekr.20201010141557.1">The name of Leo's active theme, or None, which gives Leo's legacy (light) theme.

To enable a theme, put the following setting in myLeoSettings.leo:

@string theme-name = &lt;name of .leo file&gt;

The .leo suffix is optional. Leo looks for the named .leo file in this order:

~  (The user's home directory)
~/themes
~/.leo
~/.leo/themes
leo/themes

The .leo file in the leo/themes folder are:

BreezeDarkTheme.leo
BreezeDark2Theme.leo
DefaultTheme.leo
EKRDark.leo
EKRLight.leo
LeoBlackSolarized.leo
PaperLightTheme.leo
ZephyrDarkTheme.leo</t>
<t tx="ekr.20210327193418.1">This setting has effect only if `@bool rst3-call-docutils = True`.

True: Docutils will embed a the stylesheet in the output file.
False: Docutils will link to an external stylesheet file.</t>
<t tx="ekr.20210327193736.1"></t>
<t tx="ekr.20210327193806.1"></t>
<t tx="ekr.20210327193854.1"></t>
<t tx="ekr.20210327194119.1"></t>
<t tx="ekr.20210530064911.1"># This node contains the commands needed to execute a program in a particular language.

# Format: language-name: command

# Create a temporary file if c.p is not any kind of @&lt;file&gt; node.

# Compute the final command as follows:

# 1. If command contains &lt;FILE&gt;, replace &lt;FILE&gt; with the full path to the external file.
# 2. If command contains &lt;NO-FILE&gt;, just remove &lt;NO-FILE&gt;.
# 3. Otherwise, append the full path to the external file to the command.

go: go run . &lt;NO-FILE&gt;
python: python
rust: rustc
</t>
<t tx="ekr.20210530064922.1"># This node contains the regex pattern to determine the line number in error messages.
# Format: language-name: regex pattern
#
# Patterns must define two groups, in either order:
# One group, containing only digits, defines the line number.
# The other group defines the file name.

go: ^\s*(.*):([0-9]+):([0-9]+):.+$
python: ^\s*File "(.+)", line ([0-9]+), in .+$
rust: ^\s*--&gt; (.+):([0-9]+):([0-9]+)\s*$</t>
<t tx="ekr.20210901110017.1">True: search for definitions starting from the last node of the ouline.</t>
<t tx="ekr.20211014064402.1"># comma-separated pairs of strings: (argument-name, typescript-type)
c, Commands
ch, character
gnx, string
d, dictionary
i, number
j, number
k, number
n, number
p, Position
s, string
v, VNode</t>
<t tx="ekr.20211209060458.1">True: Add 'class' to the headlines of class nodes (python only).</t>
<t tx="ekr.20220105172501.1"># comma-separated pairs of strings: (argument-name, typescript-type)

# Note: add-mypy-annotations can automatically annotate kwargs initialized to 
#       bool, float, int or string constants.

# Define default annotations for arguments and return types.

DEFAULT, str
DEFAULT_RETURN, None

# Naming conventions used in Leo.

c, Cmdr
callback, Callable
ch, str
char, str
d, Dict[str, str]
event, Event
gnx, str
i, int
j, int
k, int
n, int
p, Pos
s, str
v, VNode
w, Wrapper
</t>
<t tx="felix.20220506230435.1">True: (Legacy) The goto-first-visible-node and goto-first-visible-node commands collapse all nodes that are not ancestors of the target node that is selected.

False: (Recommended) The commands act as simple navigation commands, and do not change the outline state.</t>
<t tx="jlunz.20151119171553.1"></t>
<t tx="jlunz.20151120072157.1">True: Wrap body text.

</t>
<t tx="nh910.20110621123823.3423"></t>
<t tx="tbnorth.20160414102131.1">Alt drag onto another node indicates dropped node should
be added as a child of the receiving node, set this to
False to not expand the receiving node, keeping a list of
recipient nodes conveniently compact for additional drops.</t>
<t tx="tbrown.20081003103821.1">True: if the same file (basename) occurs more than once in the recent files
list, i.e. on two different paths it will appear as a submenu with the basename
as its heading, and the two (or more) paths as its entries.  This is easier to
scan visually than multiple full paths.  If recent_files_omit_directories is
True this setting has no effect.

False: don't use submenus for multiple path entries, unless recent_files_group_always
is true (and recent_files_omit_directories is False)
</t>
<t tx="tbrown.20081003103821.2">True: same as recent_files_group, except that even files (basenames) which are unique
have their containing path listed in the submenu - so visual clutter is reduced
but you can still see where things come from before you load them.

False: don't use submenus for multiple path entries, unless recent_files_group
is true (and recent_files_omit_directories is False)
</t>
<t tx="tbrown.20110212091818.20118">Set to False, dragging nodes between different outlines
creates copies.  Set to True, the node is moved and no
longer exists in the source outline.</t>
<t tx="tbrown.20150807123339.1">Set to True to enable node appearance modifications
See tree-declutter-patterns
</t>
<t tx="tbrown.20150807123421.1"># **Decluttering** replaces controls custom formatting of headlines, including:

# - Hiding or changing headline text,
# - Adding icons to headlines,
# - Changing the styling of headlines.

# @bool tree-declutter must be True to enable decluttering.

# blank lines and lines starting with '#' are ignored.
# See the children of this node for details.
</t>
<t tx="tbrown.20151010094807.1">Should find commands show their result in the status line?
This setting must be explicitly set to `False` to suppress
the status line output, just deleting it to get a value of `None`
won't work - this preserves the default `True` action in the
absence of this setting.</t>
<t tx="tbrown.20180212145842.1"># pairs of lines in this text indicate search and replace targets for
# cleaning the recent files list.  Each pair of lines should start with
# "REPLACE:" (first line) and "WITH:" (second line).  For example:
#
#  REPLACE: .gnome-desktop
#     WITH: My Desktop
#  REPLACE: /mnt/usr1/
#     WITH: /

</t>
<t tx="tbrown.20180525163032.1">If True, uses headline "Foo.bar" for bar() defined in class Foo.

If False, does not do the above, useful if you don't use clones and don't
want the visual clutter of repeated class / file names.</t>
<t tx="vitalije.20170811125150.1"></t>
</tnodes>
</leo_file>
