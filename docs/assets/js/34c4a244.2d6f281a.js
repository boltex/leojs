"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[702],{4678:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=o(4848),s=o(8453);const i={sidebar_position:4},r="The Leonine way to refactor code",l={id:"advanced-topics/leonine-refactor",title:"The Leonine way to refactor code",description:"This paper explains how to use cff (clone-find-flattened) while",source:"@site/docs/advanced-topics/leonine-refactor.md",sourceDirName:"advanced-topics",slug:"/advanced-topics/leonine-refactor",permalink:"/leojs/docs/advanced-topics/leonine-refactor",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"advancedTopicsSidebar",previous:{title:"FAQ",permalink:"/leojs/docs/advanced-topics/faq"}},a={},c=[];function d(e){const n={h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"the-leonine-way-to-refactor-code",children:"The Leonine way to refactor code"})}),"\n",(0,t.jsx)(n.p,{children:"This paper explains how to use cff (clone-find-flattened) while\r\nrefactoring code. I could not have completed the refactoring of Leo's\r\natFile write code without using continuous, extensive use of cff."}),"\n",(0,t.jsx)(n.p,{children:"There are two key ideas:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The clones produced by cff are short-term or medium-term data,\r\neasily created and easily dispensed with."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Such clones are valuable, but not precious. They will eventually be discarded."}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Unlike tags (or any other kind of non-Leonine data), the clones\r\nproduced by cff can be reorganized."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This is the priceless, unique advantage of clones.  You don't understand clones if you don't get this."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"While refactoring, it is essential to see all actual uses of a\r\nsymbol (method, or ivar, whatever)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The starting point is to use cff to find all potential uses of the\r\nsymbol. If multiple files or classes use the symbol, you can use the\r\nsuboutline-only option to limit the matches created by cff."}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"After finding all potential uses of the symbol, you can reorganize\r\nthe resulting clones as follows:"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Delete nodes that are completely irrelevant."}),"\n",(0,t.jsx)(n.li,{children:"Squirrel away likely-irrelevant nodes in a new organizer node."}),"\n",(0,t.jsx)(n.li,{children:"Highlight the defining node, say by making it the preceding sibling of the cff node."}),"\n",(0,t.jsx)(n.li,{children:"Leave all actual uses of the symbol where they are."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"You have now focused your attention on the nodes that will likely\r\nchange."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can now rerun the search only on those cloned nodes to see all\r\ninstances of the symbol that might be changed. This is a crucial\r\ndouble check on proposed changes."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);