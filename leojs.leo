<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20201209145256.1"><vh>Startup</vh>
<v t="ekr.20201214084854.1"><vh>@file scripts.txt</vh></v>
</v>
<v t="felix.20201208214250.2"><vh>Documentation</vh>
<v t="felix.20201208214319.1"><vh>@clean README.md</vh></v>
<v t="felix.20201208214506.1"><vh>@clean CHANGELOG.md</vh></v>
<v t="felix.20201208224703.1"><vh>@clean CONTRIBUTING.md</vh></v>
</v>
<v t="ekr.20201209145358.1"><vh>VSCode extension</vh>
<v t="felix.20211007213344.1"><vh>@clean src/config.ts</vh>
<v t="felix.20211007213344.2"><vh>class Config</vh>
<v t="felix.20211007213344.3"><vh>getConfig</vh></v>
<v t="felix.20211007213344.4"><vh>getFontConfig</vh></v>
<v t="felix.20211007213344.5"><vh>setLeojsSettings</vh></v>
<v t="felix.20211007213344.6"><vh>setFontConfig</vh></v>
<v t="felix.20211007213344.7"><vh>setEnablePreview</vh></v>
<v t="felix.20211007213344.8"><vh>clearCloseEmptyGroups</vh></v>
<v t="felix.20211007213344.9"><vh>setCloseOnFileDelete</vh></v>
<v t="felix.20211007213344.10"><vh>checkEnablePreview</vh></v>
<v t="felix.20211007213344.11"><vh>checkCloseEmptyGroups</vh></v>
<v t="felix.20211007213344.12"><vh>checkCloseOnFileDelete</vh></v>
<v t="felix.20211007213344.13"><vh>buildFromSavedSettings</vh></v>
</v>
</v>
<v t="felix.20201214151326.1"><vh>@clean src/constants.ts</vh>
<v t="felix.20201214151326.2"><vh>class Constants</vh>
<v t="felix.20201214151326.3"><vh>general constants</vh></v>
<v t="felix.20201214151326.4"><vh>workbench interface panels</vh></v>
<v t="felix.20201214151326.5"><vh>user messages</vh></v>
<v t="felix.20211008004139.1"><vh>find panel ids</vh></v>
<v t="felix.20201214151326.6"><vh>at-buttons strings</vh></v>
<v t="felix.20211007214102.1"><vh>configuration keys</vh></v>
<v t="felix.20211007214110.1"><vh>config defaults</vh></v>
<v t="felix.20201214151326.7"><vh>ask/save buttons</vh></v>
<v t="felix.20201214151326.8"><vh>context flags</vh></v>
<v t="felix.20201214151326.9"><vh>vscode commands</vh></v>
<v t="felix.20201214151326.10"><vh>commands strings</vh></v>
<v t="felix.20201214151326.11"><vh>leo commands</vh></v>
<v t="felix.20220103222715.1"><vh>minibuffer overridden names</vh></v>
<v t="felix.20211208011642.1"><vh>minibuffer overridden commands</vh></v>
</v>
</v>
<v t="felix.20220124223019.1"><vh>@clean src/iconConstants.ts</vh>
<v t="felix.20220124223042.1"><vh>nodes</vh></v>
</v>
<v t="felix.20201208214322.1"><vh>@clean src/extension.ts</vh>
<v t="felix.20201214150149.1"><vh>activate</vh></v>
<v t="felix.20201208215619.1"><vh>deactivate</vh></v>
</v>
<v t="felix.20211010192923.1"><vh>@clean src/leoBody.ts</vh>
<v t="felix.20211010192923.2"><vh>class LeoBodyProvider</vh>
<v t="felix.20211010192923.3"><vh>setBodyTime</vh></v>
<v t="felix.20211010192923.4"><vh>fireRefreshFile</vh></v>
<v t="felix.20211010192923.5"><vh>refreshPossibleGnxList</vh></v>
<v t="felix.20211010192923.6"><vh>watch</vh></v>
<v t="felix.20211010192923.7"><vh>stat</vh></v>
<v t="felix.20211010192923.8"><vh>readFile</vh></v>
<v t="felix.20211010192923.9"><vh>readDirectory</vh></v>
<v t="felix.20211010192923.10"><vh>createDirectory</vh></v>
<v t="felix.20211010192923.11"><vh>writeFile</vh></v>
<v t="felix.20211010192923.12"><vh>rename</vh></v>
<v t="felix.20211010192923.13"><vh>delete</vh></v>
<v t="felix.20211010192923.14"><vh>copy</vh></v>
<v t="felix.20211010192923.15"><vh>_fireSoon</vh></v>
</v>
</v>
<v t="felix.20201208223553.1"><vh>@clean src/leoOutline.ts</vh>
<v t="felix.20201209011931.1"><vh>class LeoOutlineProvider</vh>
<v t="felix.20201209011931.2"><vh>constructor</vh></v>
<v t="felix.20201209011931.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20211003223641.1"><vh>buildId</vh></v>
<v t="felix.20211003233639.1"><vh>incTreeId</vh></v>
<v t="felix.20201209011931.4"><vh>getTreeItem</vh></v>
<v t="felix.20201209011931.5"><vh>getChildren</vh></v>
<v t="felix.20201209011931.6"><vh>getParent</vh></v>
<v t="felix.20220519232002.1"><vh>resolveTreeItem</vh></v>
</v>
<v t="felix.20211201001847.1"><vh>class LeoNode</vh></v>
</v>
<v t="felix.20201214194144.1"><vh>@clean src/leoUI.ts</vh>
<v t="felix.20201214195752.1"><vh>class LeoUI</vh>
<v t="felix.20201214194144.2"><vh>Constructor</vh></v>
<v t="felix.20220201235548.1"><vh>Finish Startup</vh></v>
<v t="felix.20220417215549.1"><vh>makeAllBindings</vh></v>
<v t="felix.20201214194144.3"><vh>Document States</vh>
<v t="felix.20220510214213.1"><vh>_triggerSave</vh></v>
<v t="felix.20201214202058.1"><vh>_triggerGetStates</vh></v>
<v t="felix.20201227230901.1"><vh>_setupNoOpenedLeoDocument</vh></v>
<v t="felix.20201227230912.1"><vh>_setupOpenedLeoDocument</vh></v>
</v>
<v t="felix.20201214194144.4"><vh>Refresh UI</vh>
<v t="felix.20201214202118.1"><vh>showOutline</vh></v>
<v t="felix.20211007232334.1"><vh>configTreeRefresh</vh></v>
<v t="felix.20201229025520.1"><vh>gotSelectedNode</vh></v>
<v t="felix.20201227155008.1"><vh>_setupRefresh</vh></v>
<v t="felix.20201227014627.1"><vh>_launchRefresh</vh></v>
<v t="felix.20201222013904.1"><vh>_refreshOutline</vh></v>
<v t="felix.20211024203649.1"><vh>_revealTreeViewNode</vh></v>
<v t="felix.20201214202123.1"><vh>_refreshDocumentsPane</vh></v>
<v t="felix.20201214202128.1"><vh>setDocumentSelection</vh></v>
<v t="felix.20211124223735.1"><vh>_refreshUndoPane</vh></v>
<v t="felix.20211129002604.1"><vh>setUndoSelection</vh></v>
</v>
<v t="felix.20201214194144.5"><vh>UI Change Events</vh>
<v t="felix.20200719025231.24"><vh>_onChangeConfiguration</vh></v>
<v t="felix.20201214202625.1"><vh>_onChangeCollapsedState</vh></v>
<v t="felix.20201214202627.1"><vh>_onTreeViewVisibilityChanged</vh></v>
<v t="felix.20201214202631.1"><vh>_onDocTreeViewVisibilityChanged</vh></v>
<v t="felix.20201214202634.1"><vh>_onButtonsTreeViewVisibilityChanged</vh></v>
<v t="felix.20211122230343.1"><vh>_onUndosTreeViewVisibilityChanged</vh></v>
</v>
<v t="felix.20211204144931.1"><vh>Body Editing</vh>
<v t="felix.20211204144931.2"><vh>triggerBodySave</vh></v>
<v t="felix.20211204144931.3"><vh>_bodySaveSelection</vh></v>
<v t="felix.20211204144931.4"><vh>_bodySaveDocument</vh></v>
<v t="felix.20211204144931.5"><vh>_bodySaveDeactivate</vh></v>
</v>
<v t="felix.20201214194144.6"><vh>Commands</vh>
<v t="felix.20201214202749.1"><vh>selectTreeNode</vh></v>
<v t="felix.20201214202755.1"><vh>command</vh></v>
<v t="felix.20201214202757.1"><vh>minibuffer</vh></v>
<v t="felix.20201214202759.1"><vh>editHeadline</vh></v>
<v t="felix.20201214202800.1"><vh>insertNode</vh></v>
<v t="felix.20211204181418.1"><vh>_insertAndSetHeadline</vh></v>
</v>
<v t="felix.20201214194144.7"><vh>At Buttons</vh>
<v t="felix.20201214211742.1"><vh>clickAtButton</vh></v>
<v t="felix.20220517212706.1"><vh>_handleRClicks</vh></v>
<v t="felix.20220517212718.1"><vh>gotoScript</vh></v>
<v t="felix.20201214211744.1"><vh>removeAtButton</vh></v>
</v>
<v t="felix.20211024012536.1"><vh>Clipboard</vh>
<v t="felix.20211212205241.1"><vh>replaceClipboardWith</vh></v>
<v t="felix.20220103203600.1"><vh>asyncGetTextFromClipboard</vh></v>
<v t="felix.20211024012523.1"><vh>getTextFromClipboard</vh></v>
</v>
<v t="felix.20220505215916.1"><vh>Nav</vh>
<v t="felix.20220505215916.2"><vh>findQuick</vh></v>
<v t="felix.20220505215916.3"><vh>findQuickSelected</vh></v>
<v t="felix.20220505215916.4"><vh>findQuickTimeline</vh></v>
<v t="felix.20220505215916.5"><vh>findQuickChanged</vh></v>
<v t="felix.20220505215916.6"><vh>findQuickHistory</vh></v>
<v t="felix.20220505215916.7"><vh>findQuick_marked</vh></v>
<v t="felix.20220505215916.8"><vh>findQuickGoAnywhere</vh></v>
<v t="felix.20220505215916.9"><vh>gotoNavEntry</vh></v>
</v>
<v t="felix.20220505215924.1"><vh>Search</vh>
<v t="felix.20220505222504.1"><vh>setFindPanel</vh></v>
<v t="felix.20220505215924.2"><vh>navEnter</vh></v>
<v t="felix.20220505215924.3"><vh>navTextChange</vh></v>
<v t="felix.20220505215924.4"><vh>startSearch</vh></v>
<v t="felix.20220505215924.5"><vh>newHeadline</vh></v>
<v t="felix.20220505215924.6"><vh>_inputFindPattern</vh></v>
<v t="felix.20220505215924.7"><vh>find</vh></v>
<v t="felix.20220505215924.8"><vh>findSymbol</vh></v>
<v t="felix.20220505215924.9"><vh>replace</vh></v>
<v t="felix.20220505215924.10"><vh>replaceAll</vh></v>
<v t="felix.20220505215924.11"><vh>cloneFind</vh></v>
<v t="felix.20220505215924.12"><vh>setSearchOption</vh></v>
<v t="felix.20220505215924.13"><vh>loadSearchSettings</vh></v>
<v t="felix.20220505215924.14"><vh>saveSearchSettings</vh></v>
<v t="felix.20220505215924.15"><vh>gotoGlobalLine</vh></v>
<v t="felix.20220505215924.16"><vh>tagChildren</vh></v>
<v t="felix.20220505215924.17"><vh>tag_node</vh></v>
<v t="felix.20220505215924.18"><vh>remove_tag</vh></v>
<v t="felix.20220505215924.19"><vh>remove_tags</vh></v>
<v t="felix.20220505215924.20"><vh>cloneFindTag</vh></v>
</v>
<v t="felix.20201214194144.8"><vh>Leo Documents</vh>
<v t="felix.20220517002104.1"><vh>newLeoFile</vh></v>
<v t="felix.20201214211830.1"><vh>closeLeoFile</vh></v>
<v t="felix.20201214211832.1"><vh>openLeoFile</vh></v>
<v t="felix.20201214211834.1"><vh>showRecentLeoFiles</vh></v>
<v t="felix.20201214211835.1"><vh>saveAsLeoFile</vh></v>
<v t="felix.20211012233514.1"><vh>saveAsLeoFile</vh></v>
<v t="felix.20201214211836.1"><vh>saveLeoFile</vh></v>
<v t="felix.20201214211837.1"><vh>switchLeoFile</vh></v>
<v t="felix.20201214211839.1"><vh>selectOpenedLeoDocument</vh></v>
</v>
<v t="felix.20201214194144.9"><vh>Body Pane</vh>
<v t="felix.20211024203725.1"><vh>_tryApplyNodeToBody</vh></v>
<v t="felix.20201214211645.1"><vh>showBody</vh></v>
<v t="felix.20201228164116.1"><vh>closeBody</vh></v>
</v>
<v t="felix.20201214194144.10"><vh>Log &amp; Terminal Panes</vh>
<v t="felix.20220419210727.1"><vh>addLogPaneEntry</vh></v>
<v t="felix.20201214211655.1"><vh>showLogPane</vh></v>
</v>
<v t="felix.20211030165058.1"><vh>Leo GUI Wrappers &amp; Helpers</vh>
<v t="felix.20220201230041.1"><vh>showLeoIDMessage</vh></v>
<v t="felix.20220201225503.1"><vh>LeoGui.ensure_commander_visible</vh></v>
<v t="felix.20220201194319.1"><vh>setLeoIDCommand</vh></v>
<v t="felix.20220131235418.1"><vh>getIdFromSetting</vh></v>
<v t="felix.20220131234257.1"><vh>setIdSetting</vh></v>
<v t="felix.20220108211750.1"><vh>runAskOkDialog</vh></v>
<v t="felix.20220109220155.1"><vh>runAskYesNoDialog</vh></v>
<v t="felix.20220516005841.1"><vh>runAskYesNoDialog</vh></v>
<v t="felix.20220107223824.1"><vh>runOpenFileDialog</vh></v>
<v t="felix.20220108211806.1"><vh>runSaveFileDialog</vh></v>
</v>
</v>
<v t="felix.20220204224240.1"><vh>class NullGui</vh></v>
</v>
<v t="felix.20201214151419.1"><vh>@clean src/leoButtons.ts</vh>
<v t="felix.20201214151419.2"><vh>class LeoButtonsProvider</vh>
<v t="felix.20201214151419.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20201214151419.4"><vh>getTreeItem</vh></v>
<v t="felix.20201214151419.5"><vh>getChildren</vh></v>
<v t="felix.20201214151419.6"><vh>getParent</vh></v>
</v>
<v t="felix.20201214151425.2"><vh>class LeoButtonNode</vh>
<v t="felix.20201214151425.3"><vh>iconPath</vh></v>
<v t="felix.20201214151425.4"><vh>id</vh></v>
<v t="felix.20201214151425.5"><vh>tooltip</vh></v>
<v t="felix.20201214151425.6"><vh>description</vh></v>
</v>
</v>
<v t="felix.20201214151429.1"><vh>@clean src/leoDocuments.ts</vh>
<v t="felix.20201214151429.2"><vh>class LeoDocumentsProvider</vh>
<v t="felix.20201214151429.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20201214151429.4"><vh>getTreeItem</vh></v>
<v t="felix.20201214151429.5"><vh>getChildren</vh></v>
<v t="felix.20201214151429.6"><vh>getParent</vh></v>
</v>
<v t="felix.20201214151434.2"><vh>class LeoDocumentNode</vh></v>
</v>
<v t="felix.20220505221929.1"><vh>@clean src/leoGoto.ts</vh>
<v t="felix.20220505222045.1"><vh>class LeoGotoProvider</vh></v>
<v t="felix.20220505222101.1"><vh>class LeoGotoNode</vh></v>
</v>
<v t="felix.20211122205011.1"><vh>@clean src/leoUndos.ts</vh>
<v t="felix.20211122205031.1"><vh>class LeoUndosProvider</vh>
<v t="felix.20211122213012.1"><vh>refreshTreeRoot</vh></v>
<v t="felix.20211122213023.1"><vh>getTreeItem</vh></v>
<v t="felix.20211122214230.1"><vh>getChildren</vh></v>
<v t="felix.20211122213037.1"><vh>getParent</vh></v>
</v>
<v t="felix.20211122212823.1"><vh>class LeoUndoNode</vh>
<v t="felix.20211122214009.1"><vh>id</vh></v>
<v t="felix.20211122214039.1"><vh>tooltip</vh></v>
</v>
</v>
<v t="felix.20201214151447.1"><vh>@clean src/leoStates.ts</vh>
<v t="felix.20201214151447.2"><vh>class LeoStates</vh>
<v t="felix.20201214151447.3"><vh>General State Flags</vh>
<v t="felix.20201214233119.1"><vh>leoReady &amp; helper</vh></v>
<v t="felix.20201214151447.4"><vh>fileOpenedReady &amp; helper</vh></v>
<v t="felix.20201214151447.5"><vh>leoOpenedFileName</vh></v>
<v t="felix.20201214151447.6"><vh>leoChanged &amp; helper</vh></v>
<v t="felix.20201214151447.7"><vh>leoCanUndo &amp; helper</vh></v>
<v t="felix.20201214151447.8"><vh>leoCanRedo &amp; helper</vh></v>
<v t="felix.20220508201944.1"><vh>leoCanGoBack &amp; helper</vh></v>
<v t="felix.20220508201944.2"><vh>leoCanGoNext &amp; helper</vh></v>
<v t="felix.20201214151447.9"><vh>leoCanDemote &amp; helper</vh></v>
<v t="felix.20201214151447.10"><vh>leoCanPromote &amp; helper</vh></v>
<v t="felix.20201214151447.11"><vh>leoCanDehoist &amp; helper</vh></v>
</v>
<v t="felix.20201214151447.12"><vh>Selected Node Flags</vh>
<v t="felix.20201214151447.13"><vh>leoMarked</vh></v>
<v t="felix.20201214151447.14"><vh>leoCloned</vh></v>
<v t="felix.20201214151447.15"><vh>leoDirty</vh></v>
<v t="felix.20201214151447.16"><vh>leoEmpty</vh></v>
<v t="felix.20201214151447.17"><vh>leoChild</vh></v>
<v t="felix.20201214151447.18"><vh>leoAtFile</vh></v>
<v t="felix.20201214151447.19"><vh>leoRoot</vh></v>
</v>
<v t="felix.20201214151447.20"><vh>constructor</vh></v>
<v t="felix.20201214151447.21"><vh>selectedNodeFlags</vh></v>
<v t="felix.20201214151447.22"><vh>leoStateFlags</vh></v>
</v>
</v>
<v t="felix.20201214151451.1"><vh>@clean src/leoStatusBar.ts</vh>
<v t="felix.20201214151451.2"><vh>class LeoStatusBar</vh>
<v t="felix.20201214151451.3"><vh>show</vh></v>
<v t="felix.20201214151451.4"><vh>hide</vh></v>
<v t="felix.20201214151451.5"><vh>setString</vh></v>
<v t="felix.20201214151451.6"><vh>update</vh></v>
<v t="felix.20201214151451.7"><vh>_updateLeoObjectIndicatorDebounced</vh></v>
<v t="felix.20201214151451.8"><vh>_updateLeoObjectIndicator</vh></v>
</v>
</v>
<v t="felix.20201214154816.1"><vh>@clean src/types.d.ts</vh>
<v t="felix.20211007213900.1"><vh>ConfigMembers</vh></v>
<v t="felix.20211007213909.1"><vh>ConfigSetting</vh></v>
<v t="felix.20211007213915.1"><vh>FontSettings</vh></v>
<v t="felix.20201214154816.3"><vh>RevealType</vh></v>
<v t="felix.20201214154816.4"><vh>RefreshType</vh></v>
<v t="felix.20201214154816.5"><vh>UserCommand</vh></v>
<v t="felix.20211010221959.1"><vh>BodyTimeInfo</vh></v>
<v t="felix.20201214154816.6"><vh>ShowBodyParam</vh></v>
<v t="felix.20201214154816.7"><vh>LeoPackageStates</vh></v>
<v t="felix.20201214154816.8"><vh>LeoDocument</vh></v>
<v t="felix.20201214154816.9"><vh>LeoButton</vh></v>
<v t="felix.20220505220527.1"><vh>TGotoTypes</vh></v>
<v t="felix.20220505220532.1"><vh>LeoGoto</vh></v>
<v t="felix.20220505220537.1"><vh>LeoSearchScope</vh></v>
<v t="felix.20220505220544.1"><vh>LeoSearchSettings</vh></v>
<v t="felix.20220505220550.1"><vh>LeoGuiFindTabManagerSettings</vh></v>
<v t="felix.20201214154816.10"><vh>Icon</vh></v>
<v t="felix.20220505220619.1"><vh>BodyTimeInfo</vh></v>
<v t="felix.20220505220626.1"><vh>BodyPosition</vh></v>
<v t="felix.20220505220630.1"><vh>BodySelectionInfo</vh></v>
<v t="felix.20201214154816.11"><vh>showSaveAsDialogParameters</vh></v>
<v t="felix.20201214154816.12"><vh>runAskYesNoDialogParameters</vh></v>
<v t="felix.20201214154816.13"><vh>runWarnMessageDialogParameters</vh></v>
<v t="felix.20201214154816.14"><vh>runInfoMessageDialogParameters</vh></v>
<v t="felix.20201214154816.15"><vh>AskMessageItem</vh></v>
<v t="felix.20201214154816.16"><vh>ChooseDocumentItem</vh></v>
<v t="felix.20220505220706.1"><vh>ChooseRClickItem</vh></v>
<v t="felix.20220505220722.1"><vh>RClick</vh></v>
<v t="felix.20201214154816.17"><vh>MinibufferCommand</vh></v>
</v>
<v t="felix.20210110210346.1"><vh>@clean src/declarations.d.ts</vh></v>
<v t="felix.20201208224407.1"><vh>@clean src/utils.ts</vh>
<v t="felix.20220505225030.1"><vh>uniqueId</vh></v>
<v t="felix.20220505225023.1"><vh>getUniqueId</vh></v>
<v t="felix.20201208224407.2"><vh>padNumber2</vh></v>
<v t="felix.20201208224407.4"><vh>addFileToGlobal</vh></v>
<v t="felix.20201208224407.5"><vh>removeFileFromGlobal</vh></v>
<v t="felix.20201208224407.6"><vh>buildNodeIconPaths</vh></v>
<v t="felix.20201208224407.7"><vh>buildDocumentIconPaths</vh></v>
<v t="felix.20201208224407.8"><vh>buildButtonsIconPaths</vh></v>
<v t="felix.20220505225236.1"><vh>buildGotoIconPaths</vh></v>
<v t="felix.20220109180351.1"><vh>convertLeoFiletypes</vh></v>
<v t="felix.20201208224407.10"><vh>getDurationMilliseconds</vh></v>
<v t="felix.20201208224407.11"><vh>getFileFromPath</vh></v>
<v t="felix.20220417151556.1"><vh>getIdFromDialog</vh></v>
<v t="felix.20220201195806.1"><vh>isAlphaNumeric</vh></v>
<v t="felix.20201208224407.12"><vh>isIconChangedByEdit</vh></v>
<v t="felix.20211007214455.1"><vh>isHexColor</vh></v>
<v t="felix.20201208224407.14"><vh>strToLeoUri</vh></v>
<v t="felix.20201208224407.15"><vh>leoUriToStr</vh></v>
<v t="felix.20201208224407.16"><vh>setContext</vh></v>
</v>
<v t="felix.20220417155704.1"><vh>@clean src/commandBindings.ts</vh>
<v t="felix.20220417155732.1"><vh>makeAllBindings</vh>
<v t="felix.20201214150149.2"><vh>&lt;&lt; Define entries for all commands &gt;&gt;</vh>
<v t="felix.20201214150149.3"><vh>Scripting &amp; @buttons</vh></v>
<v t="felix.20201214150149.4"><vh>Leo File Documents</vh></v>
<v t="felix.20201214150149.5"><vh>Headline Editing</vh></v>
<v t="felix.20201214150149.6"><vh>Node Editing</vh></v>
<v t="felix.20201214150149.7"><vh>Tree View Interaction</vh></v>
<v t="felix.20201214150149.8"><vh>Goto Nodes</vh></v>
<v t="felix.20201214150149.9"><vh>Hoisting</vh></v>
<v t="felix.20201214150149.10"><vh>Outline Editing</vh></v>
<v t="felix.20201214150149.11"><vh>Mark/Unmark</vh></v>
<v t="felix.20201214150149.12"><vh>Body Editing</vh></v>
<v t="felix.20201214150149.13"><vh>Move Nodes</vh></v>
<v t="felix.20201214150149.14"><vh>Undo</vh></v>
<v t="felix.20201214150149.15"><vh>Show UI panes</vh></v>
<v t="felix.20201214150149.16"><vh>Marked Nodes Commands</vh></v>
<v t="felix.20201214150149.17"><vh>Clone Find Commands</vh></v>
</v>
</v>
</v>
<v t="felix.20201214205159.1"><vh>@clean package.json</vh>
<v t="felix.20201214205159.2"><vh>&lt;&lt; contributes &gt;&gt;</vh>
<v t="felix.20211006225245.1"><vh>configuration</vh></v>
<v t="felix.20201214205159.3"><vh>viewsContainers</vh></v>
<v t="felix.20201214205159.4"><vh>views</vh></v>
<v t="felix.20201214205159.5"><vh>viewsWelcome</vh></v>
<v t="felix.20201214205159.6"><vh>commands</vh>
<v t="felix.20201214205159.8"><vh>Scripting &amp; @buttons</vh></v>
<v t="felix.20201214205159.9"><vh>Show UI Panes</vh></v>
<v t="felix.20201214205159.10"><vh>Leo File Documents</vh></v>
<v t="felix.20201214205159.11"><vh>Tree View Interaction</vh></v>
<v t="felix.20201214205159.12"><vh>Headline Editing</vh></v>
<v t="felix.20201214205159.13"><vh>Mark/Unmark</vh></v>
<v t="felix.20201214205159.14"><vh>Node Editing</vh></v>
<v t="felix.20201214205159.15"><vh>Body Editing</vh></v>
<v t="felix.20201214205159.16"><vh>Move Nodes</vh></v>
<v t="felix.20201214205159.17"><vh>Outline Editing</vh></v>
<v t="felix.20201214205159.18"><vh>Goto Nodes</vh></v>
<v t="felix.20201214205159.19"><vh>Hoisting</vh></v>
<v t="felix.20201214205159.20"><vh>Undo</vh></v>
<v t="felix.20201214205159.21"><vh>Clone Find Commands</vh></v>
<v t="felix.20201214205159.22"><vh>Marked Nodes Commands</vh></v>
</v>
<v t="felix.20201214205159.23"><vh>menus</vh>
<v t="felix.20201214205159.24"><vh>commandPalette</vh>
<v t="felix.20201214205159.25"><vh>Scripting &amp; @buttons</vh></v>
<v t="felix.20201214205159.26"><vh>Show UI Panes</vh></v>
<v t="felix.20201214205159.27"><vh>Leo File Documents</vh></v>
<v t="felix.20201214205159.28"><vh>Tree View</vh></v>
<v t="felix.20201214205159.29"><vh>Headline Editing</vh></v>
<v t="felix.20201214205159.30"><vh>Mark/Unmark</vh></v>
<v t="felix.20201214205159.31"><vh>Node Editing</vh></v>
<v t="felix.20201214205159.32"><vh>Body Editing</vh></v>
<v t="felix.20201214205159.33"><vh>Move Nodes</vh></v>
<v t="felix.20201214205159.34"><vh>Outline Editing</vh></v>
<v t="felix.20201214205159.35"><vh>Goto Nodes</vh></v>
<v t="felix.20201214205159.36"><vh>Hoisting</vh></v>
<v t="felix.20201214205159.37"><vh>Undo</vh></v>
<v t="felix.20201214205159.38"><vh>Clone Find Commands</vh></v>
<v t="felix.20201214205159.39"><vh>Marked Nodes Commands</vh></v>
<v t="felix.20201214205159.40"><vh>Hidden from Palette</vh>
<v t="felix.20220508225045.1"><vh>disabled icon commands</vh></v>
<v t="felix.20201214205159.42"><vh>Scripting &amp; @Buttons</vh></v>
<v t="felix.20201214205159.43"><vh>Show UI Panes</vh></v>
<v t="felix.20201214205159.44"><vh>Leo File Documents</vh></v>
<v t="felix.20201214205159.45"><vh>Tree View Interaction</vh></v>
<v t="felix.20201214205159.46"><vh>Headline Editing</vh></v>
<v t="felix.20201214205159.47"><vh>Mark/Unmark</vh></v>
<v t="felix.20201214205159.48"><vh>Node Editing</vh></v>
<v t="felix.20201214205159.49"><vh>Move Nodes</vh></v>
<v t="felix.20201214205159.50"><vh>Outline Editing</vh></v>
<v t="felix.20201214205159.51"><vh>Goto Nodes</vh></v>
<v t="felix.20201214205159.52"><vh>Hoisting</vh></v>
<v t="felix.20201214205159.53"><vh>Undo</vh></v>
</v>
</v>
<v t="felix.20201214205159.54"><vh>explorer/context</vh></v>
<v t="felix.20201214205159.55"><vh>view/title</vh></v>
<v t="felix.20201214205159.56"><vh>view/item/context</vh>
<v t="felix.20220517202245.1"><vh>leo documents commands</vh></v>
<v t="felix.20201214205159.57"><vh>Headline Editing Hover Icon</vh></v>
<v t="felix.20201214205159.58"><vh>Insert Node Hover Icon</vh></v>
<v t="felix.20201214205159.59"><vh>Move Nodes Hover Icon</vh></v>
<v t="felix.20201214205159.60"><vh>Outline Editing Hover Icon</vh></v>
<v t="felix.20201214205159.61"><vh>Mark/Unmark Hover Icon</vh></v>
<v t="felix.20201214205159.62"><vh>Tree View Interaction Context Menu</vh></v>
<v t="felix.20201214205159.63"><vh>Hoisting Context Menu</vh></v>
<v t="felix.20201214205159.64"><vh>Leo File Documents Context Menu</vh></v>
<v t="felix.20201214205159.65"><vh>Mark/Unmark Context Menu</vh></v>
<v t="felix.20201214205159.66"><vh>Outline Editing Context Menu</vh></v>
<v t="felix.20220517203332.1"><vh>at buttons</vh></v>
</v>
</v>
<v t="felix.20201214205159.67"><vh>keybindings</vh>
<v t="felix.20201214205159.68"><vh>Scripting &amp; @Buttons</vh></v>
<v t="felix.20201214205159.69"><vh>Show UI Panes</vh></v>
<v t="felix.20201214205159.70"><vh>Leo File Documents</vh></v>
<v t="felix.20201214205159.71"><vh>Tree View Interaction</vh></v>
<v t="felix.20201214205159.72"><vh>Headline Editing</vh></v>
<v t="felix.20201214205159.73"><vh>Mark/Unmark</vh></v>
<v t="felix.20201214205159.74"><vh>Body Editing</vh></v>
<v t="felix.20201214205159.75"><vh>Move Nodes</vh></v>
<v t="felix.20201214205159.76"><vh>Outline Editing</vh></v>
<v t="felix.20201214205159.77"><vh>Node Editing</vh></v>
<v t="felix.20211117232843.1"><vh>Undo/Redo</vh></v>
<v t="felix.20201214205159.78"><vh>Goto Nodes</vh></v>
</v>
<v t="felix.20211119001637.1"><vh>resourceLabelFormatters</vh></v>
</v>
<v t="felix.20201214205159.79"><vh>&lt;&lt; scripts &gt;&gt;</vh></v>
<v t="felix.20201214205159.80"><vh>&lt;&lt; devDependencies &gt;&gt;</vh></v>
<v t="felix.20201214205159.81"><vh>&lt;&lt; dependencies &gt;&gt;</vh></v>
</v>
</v>
<v t="felix.20210102000055.1"><vh>Leo</vh>
<v t="felix.20210102000100.1"><vh>Core classes</vh>
<v t="felix.20211018202009.1"><vh>@file src/core/decorators.ts</vh></v>
<v t="felix.20210102012334.1"><vh>@file src/core/leoApp.ts</vh></v>
<v t="felix.20211211234842.1"><vh>@file src/core/leoAtFile.ts</vh></v>
<v t="felix.20220429005433.1"><vh>@file src/core/leoChapters.ts</vh></v>
<v t="felix.20210110222544.1"><vh>@file src/core/leoCommands.ts</vh></v>
<v t="felix.20211031230132.1"><vh>@file src/core/leoConfig.ts</vh></v>
<v t="felix.20211212162008.1"><vh>@file src/core/leoExternalFiles.ts</vh></v>
<v t="felix.20210220181245.1"><vh>@file src/core/leoFileCommands.ts</vh></v>
<v t="felix.20211212000140.1"><vh>@file src/core/leoFind.ts</vh></v>
<v t="felix.20210102012410.1"><vh>@file src/core/leoGlobals.ts</vh></v>
<v t="felix.20211021231651.1"><vh>@file src/core/leoHistory.ts</vh></v>
<v t="felix.20220105221256.1"><vh>@file src/core/leoImport.ts</vh></v>
<v t="felix.20210102012632.1"><vh>@file src/core/leoNodes.ts</vh></v>
<v t="felix.20211212162359.1"><vh>@file src/core/leoShadow.ts</vh></v>
<v t="felix.20211026230613.1"><vh>@file src/core/leoUndo.ts</vh></v>
</v>
<v t="felix.20211002194716.1"><vh>Command classes</vh>
<v t="felix.20211017230407.1"><vh>@file src/commands/commanderFileCommands.ts</vh></v>
<v t="felix.20211002221425.1"><vh>@file src/commands/commanderOutlineCommands.ts</vh></v>
<v t="felix.20220414231314.1"><vh>@file src/commands/commanderEditCommands.ts</vh></v>
<v t="felix.20211212162627.1"><vh>@file src/commands/editFileCommands.ts</vh></v>
<v t="felix.20220503003653.1"><vh>@file src/commands/editCommands.ts</vh></v>
<v t="felix.20220503003725.1"><vh>@file src/commands/gotoCommands.ts</vh></v>
</v>
<v t="felix.20220512205007.1"><vh>Gui classes</vh>
<v t="felix.20220512205042.1"><vh>@file src/core/leoFrame.ts</vh></v>
</v>
<v t="felix.20220128232146.1"><vh>unittests</vh>
<v t="felix.20220130224933.1"><vh>@file src/test/leoTest2.ts</vh></v>
<v t="felix.20220129002501.1"><vh>@file src/test/extension.test.ts</vh></v>
<v t="felix.20220129200448.1"><vh>@file src/test/leoApp.test.ts</vh></v>
<v t="felix.20220129003133.1"><vh>@file src/test/leoAtFile.test.ts</vh></v>
<v t="felix.20220129002752.1"><vh>@file src/test/leoCommands.test.ts</vh></v>
<v t="felix.20220129003431.1"><vh>@file src/test/leoConfig.test.ts</vh></v>
<v t="felix.20220129003154.1"><vh>@file src/test/leoExternalFiles.test.ts</vh></v>
<v t="felix.20220129003044.1"><vh>@file src/test/leoFileCommands.test.ts</vh></v>
<v t="felix.20220129003458.1"><vh>@file src/test/leoFind.test.ts</vh></v>
<v t="felix.20220129002458.1"><vh>@file src/test/leoGlobals.test.ts</vh></v>
<v t="felix.20220129003526.1"><vh>@file src/test/leoImport.test.ts</vh></v>
<v t="felix.20220129002948.1"><vh>@file src/test/leoNodes.test.ts</vh></v>
<v t="felix.20220129003553.1"><vh>@file src/test/leoShadow.test.ts</vh></v>
<v t="felix.20220129003013.1"><vh>@file src/test/leoUndo.test.ts</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20201209145256.1"></t>
<t tx="ekr.20201209145358.1"></t>
<t tx="felix.20200719025231.24">/**
 * * Handles the change of vscode config: a onDidChangeConfiguration event triggered
 * @param p_event The configuration-change event passed by vscode
 */
private _onChangeConfiguration(p_event: vscode.ConfigurationChangeEvent): void {
    if (p_event.affectsConfiguration(Constants.CONFIG_NAME)) {
        this.config.buildFromSavedSettings(); // If the config setting started with 'leojs'
    }
    // also check if workbench.editor.enablePreview
    this._bodyEnablePreview = !!vscode.workspace
        .getConfiguration('workbench.editor')
        .get('enablePreview');
    // Check For "workbench.editor.enablePreview" to be true.
    this.config.checkEnablePreview();
    this.config.checkCloseEmptyGroups();
    this.config.checkCloseOnFileDelete();
}

</t>
<t tx="felix.20201208214250.2"></t>
<t tx="felix.20201208214319.1"># leojs

## ![LeoEditor](https://raw.githubusercontent.com/boltex/leojs/master/resources/leoapp.png) Literate Editor with Outline _in Typescript_ ![Typescript](https://raw.githubusercontent.com/boltex/leojs/master/resources/typescript.png)

### Literate Programming with _Directed Acyclic Graphs_ ([dag](https://en.wikipedia.org/wiki/Directed_acyclic_graph))

LeoJS is [LeoInteg](https://github.com/boltex/leointeg#-leo-editor-integration-with-visual-studio-code)'s younger sibling project : a vsCode extension, currently in early alpha.

Inspired by &lt;https://github.com/leo-editor/leo-editor/issues/1025&gt;.

See Leo, the Literate Editor with Outline, at [leoeditor.com](https://leoeditor.com/)
or on [github](https://github.com/leo-editor/leo-editor), and vscode at [code.visualstudio.com](https://code.visualstudio.com/).

![Screenshot](https://raw.githubusercontent.com/boltex/leojs/master/resources/animated-screenshot.gif)

## Development Version Installation

Make sure you have Node.js and Git installed, then clone the sources and run `npm install` in a terminal to install the remaining development dependencies.

![run extension](https://raw.githubusercontent.com/boltex/leojs/master/resources/run-extension.png)

You can then run the **Run Extension** target, as shown above, in the **Debug View**.

## Features done so far

- The commands and menus icons for outline editing 
- Undo and navigation history commands
- The minibuffer Palette
- Panels for Outline, Undo history, Leo documents and @buttons

## Keybindings

| Outline Commands           |     |                    |                  |
| :------------------------- | :-- | :----------------- | :--------------- |
| `Ctrl + Z`                 |     | `Ctrl + Shift + Z` | Undo / Redo      |
| `Ctrl + I`                 | or  | `Shift + Insert`   | Insert Node      |
| `Ctrl + Insert`            |     |                    | Insert Child     |
| `Ctrl + H`                 |     |                    | Edit Headline    |
| `Ctrl + M`                 |     |                    | Mark / Unmark    |
| `Ctrl + Shift + C`         |     |                    | Copy Node        |
| `Ctrl + Shift + X`         |     |                    | Cut Node         |
| `Ctrl + Shift + V`         |     |                    | Paste Node       | 
| `Ctrl + Shift + Backspace` | or  | `Delete`           | Delete Node      |
| `Ctrl + Backquote`         |     |                    | Clone Node       |
| `Ctrl + {`                 | and | `Ctrl + }`         | Promote / Demote |

| Moving Outline Nodes |     |                         |                    |
| :------------------- | :-- | :---------------------- | :----------------- |
| `Ctrl + U`           | or  | `Shift [+ Alt] + Up`    | Move Outline Up    |
| `Ctrl + D`           | or  | `Shift [+ Alt] + Down`  | Move Outline Down  |
| `Ctrl + L`           | or  | `Shift [+ Alt] + Left`  | Move Outline Left  |
| `Ctrl + R`           | or  | `Shift [+ Alt] + Right` | Move Outline Right |

_Move Outline commands need the 'Alt' key modifier only when focus is on body pane._

| Common Operations  |     |           |     |            |                     |
| :----------------- | :-- | :-------- | :-- | :--------- | :------------------ |
| `Ctrl + T`         |     |           |     |            | Toggle Outline/Body |
| `Tab` or `Enter`   | or  | `Alt + D` | or  | `Ctrl + G` | Focus on Body       |
| `Alt + T`          |     |           |     |            | Focus on Outline    |
| `Alt + -`          |     |           |     |            | Contract All        |
| `Ctrl + B`         |     |           |     |            | Execute Script      |
| `Ctrl + Shift + D` |     |           |     |            | Extract             |
| `Ctrl + Shift + N` |     |           |     |            | Extract Names       |
| `Alt + A`          |     |           |     |            | Sort Siblings       |
&lt;!--- | `Ctrl + F`         |     |           |     |            | Start Search        | --&gt;
&lt;!--- | `F3`               |     |           |     |            | Find Next           | --&gt;
&lt;!--- | `F2`               |     |           |     |            | Find Previous       | --&gt;
| `Alt + X`          |     |           |     |            | Minibuffer Palette  |

| Tree Navigation    |     |                 |                          |
| :----------------- | :-- | :-------------- | :----------------------- |
| `Alt + Home`       | or  | `Home` \*       | Go To First Visible Node |
| `Alt + End`        |     |                 | Go To Last Sibling       |
|                    |     | `End` \*        | Go To Last Visible Node  |
| `Alt + N`          |     |                 | Go To Next Clone         |
| `Alt + Arrow Keys` | or  | `Arrow Keys` \* | Browse Tree              |
&lt;!--- | `Alt + G`          |     |                 | Go To Global Line        | --&gt;

\* _With the **'Leo Tree Browsing'** setting enabled by default, all arrows and numeric keypad keys change the outline's selection directly_

| File Commands        |     |                         |                    |
| :------------------- | :-- | :---------------------- | :----------------- |
| `Ctrl + S`           |     |                         | Save Leo Document  |
| `Ctrl + N`           |     |                         | New Leo Document   |
| `Ctrl + O`           |     |                         | Open Leo Document  |
| `Ctrl + Shift + W`   |     |                         | Write File Nodes   |
| `Ctrl + Shift + Q`   |     |                         | Write Dirty Files  |

**Enjoy!**
</t>
<t tx="felix.20201208214322.1">import * as vscode from 'vscode';
import * as utils from "./utils";
import * as g from './core/leoGlobals';
import { LeoApp } from './core/leoApp';
import { LoadManager } from "./core/leoApp";
process.hrtime = require('browser-process-hrtime'); // Overwrite 'hrtime' of process

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201208214506.1"># Change Log

## 0.1.0 12.9.2020.

- Initial state

## 0.1.1 12.31.2021.

- Outline, undos and commands.

## 0.1.2 24.01.2022.

- Support web extension compilation for vscode.dev
</t>
<t tx="felix.20201208215619.1">// this method is called when your extension is deactivated
export function deactivate() { }

</t>
<t tx="felix.20201208223553.1">import * as vscode from 'vscode';
import { Constants } from "./constants";
import { Icon } from './types';
import { LeoUI } from './leoUI';
import * as g from './core/leoGlobals';
import { Position } from './core/leoNodes';

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201208224407.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { IconConstants } from "./iconConstants";
import { Icon } from "./types";
import { LeoOutlineNode } from "./leoOutline";

// String and other types/structures helper functions, along with common vscode API calls

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224407.10">/**
 * * Returns milliseconds between the p_start process.hrtime tuple and p_end (or current call to process.hrtime)
 * @param p_start starting process.hrtime to subtract from p_end or current immediate time
 * @param p_end optional end process.hrtime (or immediate time)
 * @returns number of milliseconds passed since the given start hrtime
 */
export function getDurationMs(p_start: [number, number], p_end?: [number, number]): number {
    if (!p_end) {
        p_end = process.hrtime(p_start);
    }
    const [w_secs, w_nanosecs] = p_end;
    return w_secs * 1000 + Math.floor(w_nanosecs / 1000000);
}

</t>
<t tx="felix.20201208224407.11">/**
 * * Extracts the file name from a full path, such as "foo.bar" from "/abc/def/foo.bar"
 * @param p_path Full path such as "/var/drop/foo/boo/moo.js" or "C:\Documents and Settings\img\recycled log.jpg"
 * @returns file name string such as "moo.js" or "recycled log.jpg""
 */
export function getFileFromPath(p_path: string): string {
    return p_path.replace(/^.*[\\\/]/, '');
}

</t>
<t tx="felix.20201208224407.12">/**
 * * Checks if a node would become dirty if it were to now have body content at all
 * @param p_node LeoNode from vscode's outline
 * @param p_newHasBody Flag to signify presence of body content, to be compared with its current state
 * @returns True if it would change the icon with actual body content, false otherwise
 */
export function isIconChangedByEdit(p_node: LeoOutlineNode, p_newHasBody: boolean): boolean {
    if (!p_node.dirty || (p_node.hasBody === !p_newHasBody)) {
        return true;
    }
    return false;
}

</t>
<t tx="felix.20201208224407.14">/**
* Builds a 'Leo Scheme' vscode.Uri from a gnx (or strings like 'LEO BODY' or empty strings to decorate breadcrumbs)
* @param p_str leo node gnx strings are used to build Uri
* @returns A vscode 'Uri' object
*/
export function strToLeoUri(p_str: string): vscode.Uri {
    return vscode.Uri.parse(Constants.URI_SCHEME_HEADER + p_str);
}

</t>
<t tx="felix.20201208224407.15">/**
 * * Gets the gnx, (or another string like 'LEO BODY' or other), from a vscode.Uri object
 * @param p_uri Source uri to extract from
 * @returns The string source that was used to build this Uri
 */
export function leoUriToStr(p_uri: vscode.Uri): string {
    // TODO : Use length of a constant or something other than 'fsPath'
    // For now, just remove the '/' (or backslash on Windows) before the path string
    return p_uri.fsPath.substr(1);
}

</t>
<t tx="felix.20201208224407.16">/**
 * * Sets a vscode context variable with 'vscode.commands.executeCommand' &amp; 'setContext'
 * @param p_key Key string name such as constants 'leoReady' or 'treeOpened', etc.
 * @param p_value Value to be assigned to the p_key 'key'
 * @returns A Thenable that is returned by the executeCommand call
 */
export function setContext(p_key: string, p_value: any): Thenable&lt;unknown&gt; {
    return vscode.commands.executeCommand(Constants.VSCODE_COMMANDS.SET_CONTEXT, p_key, p_value);
}

</t>
<t tx="felix.20201208224407.2">/**
 * * Build a string for representing a number that's 2 digits wide, padding with a zero if needed
 * @param p_number Between 0 and 99
 * @returns a 2 digit wide string representation of the number, left padded with zeros as needed.
 */
export function padNumber2(p_number: number): string {
    return ("0" + p_number).slice(-2);
}

</t>
<t tx="felix.20201208224407.4">/**
 * * Performs the actual addition into globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
 */
export function addFileToGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Just push that string into the context.globalState.&lt;something&gt; array
    const w_contextEntry: string[] = p_context.globalState.get(p_key) || [];
    if (w_contextEntry) {
        if (!w_contextEntry.includes(p_file)) {
            w_contextEntry.push(p_file);
            if (w_contextEntry.length &gt; 10) {
                w_contextEntry.shift();
            }
        }
        return p_context.globalState.update(p_key, w_contextEntry); // Added file
    } else {
        // First so create key entry with an array of single file
        return p_context.globalState.update(p_key, [p_file]);
    }
}

</t>
<t tx="felix.20201208224407.5">/**
 * * Removes file entry from globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
  */
export function removeFileFromGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Check if exist in context.globalState.&lt;something&gt; and remove if found
    const w_files: string[] = p_context.globalState.get(p_key) || [];
    if (w_files &amp;&amp; w_files.includes(p_file)) {
        w_files.splice(w_files.indexOf(p_file), 1); // Splice and update
        return p_context.globalState.update(p_key, w_files);
    }
    return Promise.resolve(); // not even in list so just resolve
}

</t>
<t tx="felix.20201208224407.6">/**
 * * Build all possible strings for node icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array of the 16 vscode node icons used in this vscode expansion
 */
export function buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {

    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.nodeIcons[p_index &lt; 8 ? p_index + 8 : p_index - 8]}${Constants.GUI.SVG_CLOSE}`
                // 'image/svg+xml;utf8,' + '&lt;svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"&gt;' +
                //  IconConstants.nodeIcons[p_index &lt; 8 ? p_index + 8 : p_index - 8] +
                //   '&lt;/svg&gt;'
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.nodeIcons[p_index]}${Constants.GUI.SVG_CLOSE}`
            })
        };
    });
}

</t>
<t tx="felix.20201208224407.7">/**
 * * Build all possible strings for documents icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildDocumentIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.leoDocuments[2]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.leoDocuments[0]}${Constants.GUI.SVG_CLOSE}`
            })
        },
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.leoDocuments[3]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.leoDocuments[1]}${Constants.GUI.SVG_CLOSE}`
            })
        }
    ];
}

</t>
<t tx="felix.20201208224407.8">/**
 * * Build all possible strings for buttons icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildButtonsIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.button[1]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.button[0]}${Constants.GUI.SVG_CLOSE}`
            })
        },
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.scriptButtons[1]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.scriptButtons[0]}${Constants.GUI.SVG_CLOSE}`
            })
        }
    ];
}

</t>
<t tx="felix.20201208224703.1">@language rest
@wrap

# How to install and run the development version

Thanks for trying out the development version of Leojs! :sunglasses: Contributions and pull requests are more than welcome!

## Introduction

If you're new to vscode and want to try out Leo with this vscode extension, you might want to look at this [Getting Started](https://code.visualstudio.com/docs#vscode-in-action) page to get an overview of vscode.

Furthermore, if you've never ran a vscode extension in an **Extension Development Host**, here is a [short overview about running and modifying a simple extension](https://code.visualstudio.com/api/get-started/your-first-extension).

If you're having problems, try [running this sample extension](https://github.com/Microsoft/vscode-extension-samples/tree/master/helloworld-sample#running-the-sample) first to catch underlying problems or missing dependencies.

</t>
<t tx="felix.20201209011931.1">export class LeoOutlineProvider implements vscode.TreeDataProvider&lt;Position&gt; {
    private _onDidChangeTreeData: vscode.EventEmitter&lt;Position | undefined&gt; = new vscode.EventEmitter&lt;Position | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;Position | undefined&gt; = this._onDidChangeTreeData.event;

    public treeId: number = 0; // Starting salt for generated tree node Ids

    @others
}

</t>
<t tx="felix.20201209011931.2">constructor(
    private _icons: Icon[],
    private _leoUI: LeoUI
) {
}

</t>
<t tx="felix.20201209011931.3">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201209011931.4">public getTreeItem(element: Position): Thenable&lt;LeoOutlineNode&gt; | LeoOutlineNode {

    let w_collapse: vscode.TreeItemCollapsibleState = vscode.TreeItemCollapsibleState.None;
    if (element.hasChildren()) {
        w_collapse = element.isExpanded() ? vscode.TreeItemCollapsibleState.Expanded : vscode.TreeItemCollapsibleState.Collapsed;
    }
    let w_contextValue = Constants.CONTEXT_FLAGS.NODE_UNMARKED;
    if (element.isMarked()) {
        w_contextValue = Constants.CONTEXT_FLAGS.NODE_MARKED;
    }
    // then append 'leoNodeAtFile' to existing if needed
    if (element.isAnyAtFileNode()) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ATFILE;
    }
    // then append 'leoNodeCloned' to existing if needed
    if (element.isCloned()) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_CLONED;
    }
    // and finally, check for 'root' too
    if (element._isRoot) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ROOT;
    } else {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_NOT_ROOT;
    }
    const w_icon: number =
        (+element.isDirty() &lt;&lt; 3) |
        (+element.isCloned() &lt;&lt; 2) |
        (+element.isMarked() &lt;&lt; 1) |
        +element.v.hasBody();
    const w_u = Object.keys(element.v.u).length ? element.v.u : false;

    const w_leoNode = new LeoOutlineNode(
        element.h,
        w_collapse,
        element, // Position
        w_u ? "\u{1F4CE} (" + Object.keys(w_u).length + ")" : "",
        this._icons[w_icon],
        this.buildId(element, w_collapse),
        w_contextValue
    );
    // Check if its the selected node and call signal it to the UI
    if (element.__eq__(g.app.windowList[this._leoUI.frameIndex].c.p)) {
        this._leoUI.gotSelectedNode(element);
    }
    // Build a LeoNode (a vscode tree node) from the Position
    return w_leoNode;
}

</t>
<t tx="felix.20201209011931.5">public getChildren(element?: Position): Position[] {
    if (element) {
        return [...element.children()];
    } else {
        if (g.app.windowList[this._leoUI.frameIndex]) {
            // Currently Selected Document's Commander
            const w_c = g.app.windowList[this._leoUI.frameIndex].c;
            if (w_c.hoistStack.length) {
                // HOISTED: Topmost hoisted node starts the outline as single root 'child'
                const w_rootPosition = w_c.hoistStack[w_c.hoistStack.length - 1].p;
                w_rootPosition._isRoot = true;
                return [w_rootPosition];
            } else {
                // NOT HOISTED: Normal list of root nodes
                const w_rootNodes = [...w_c.all_Root_Children()];
                if (w_rootNodes.length === 1) {
                    // Exactly one: prevent hoisting on SINGLE top node
                    w_rootNodes[0]._isRoot = true;
                }
                return w_rootNodes;
            }
        } else {
            return []; // Attempted to access unexistant frame
        }
    }
}

</t>
<t tx="felix.20201209011931.6">public getParent(element: Position): vscode.ProviderResult&lt;Position&gt; {
    if (element) {
        const p_parent = element.parent();
        if (p_parent.v) {
            return p_parent;
        } else {
            return undefined;
        }
    }
    return undefined;
}

</t>
<t tx="felix.20201214150149.1">/**
 * Entry point for Leo in Javascript.
 */
export function activate(p_context: vscode.ExtensionContext) {

    const w_start = process.hrtime(); // For calculating total startup time duration

    if (!g.app) {
        (g.app as LeoApp) = new LeoApp();
    } else {
        vscode.window.showWarningMessage("g.app leojs application instance already exists!");
    }

    // Initialize and run Leo
    console.assert(g.app);
    g.app.loadManager = new LoadManager(p_context);
    g.app.loadManager.load().then(() =&gt; {
        console.log(`leojs startup launched in ${utils.getDurationMs(w_start)} ms`);
    });

}

</t>
<t tx="felix.20201214150149.10">[CMD.INSERT, (p_node: Position) =&gt; p_leoUI.insertNode(p_node, true, false, false)],
[CMD.INSERT_SELECTION, () =&gt; p_leoUI.insertNode(U, false, false, false)],
[CMD.INSERT_SELECTION_FO, () =&gt; p_leoUI.insertNode(U, true, false, false)],
// Special command for when inserting rapidly more than one node without
// even specifying a headline label, e.g. spamming CTRL+I rapidly.
[CMD.INSERT_SELECTION_INTERRUPT, () =&gt; p_leoUI.insertNode(U, false, true, false)],

[CMD.INSERT_CHILD, (p_node: Position) =&gt; p_leoUI.insertNode(p_node, true, false, true)],
[CMD.INSERT_CHILD_SELECTION, () =&gt; p_leoUI.insertNode(U, false, false, true)],
[CMD.INSERT_CHILD_SELECTION_FO, () =&gt; p_leoUI.insertNode(U, true, false, true)],
// Special command for when inserting rapidly more than one node without
// even specifying a headline label, e.g. spamming CTRL+I rapidly.
[CMD.INSERT_CHILD_SELECTION_INTERRUPT, () =&gt; p_leoUI.insertNode(U, false, true, true)],

[CMD.CLONE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.CLONE_PNODE, p_node, REFRESH_TREE_BODY, true)],
[CMD.CLONE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.CLONE_PNODE, U, REFRESH_TREE, false)],
[CMD.CLONE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.CLONE_PNODE, U, REFRESH_TREE, true)],

[CMD.PROMOTE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.PROMOTE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.PROMOTE_DISABLED, () =&gt; { }],
[CMD.PROMOTE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.PROMOTE_PNODE, U, REFRESH_TREE, false)],
[CMD.PROMOTE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.PROMOTE_PNODE, U, REFRESH_TREE, true)],

[CMD.DEMOTE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.DEMOTE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.DEMOTE_DISABLED, () =&gt; { }],
[CMD.DEMOTE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.DEMOTE_PNODE, U, REFRESH_TREE, false)],
[CMD.DEMOTE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.DEMOTE_PNODE, U, REFRESH_TREE, true)],

[CMD.SORT_CHILDREN, () =&gt; p_leoUI.command(LEOCMD.SORT_CHILDREN, U, REFRESH_TREE, false, true)],
[CMD.SORT_SIBLING, () =&gt; p_leoUI.command(LEOCMD.SORT_SIBLINGS, U, REFRESH_TREE, false, true)],
[CMD.SORT_SIBLING_FO, () =&gt; p_leoUI.command(LEOCMD.SORT_SIBLINGS, U, REFRESH_TREE, true, true)],

</t>
<t tx="felix.20201214150149.11">[CMD.MARK, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, p_node, REFRESH_TREE, true, true)],
[CMD.MARK_SELECTION, () =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, U, REFRESH_TREE, false)],
[CMD.MARK_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, U, REFRESH_TREE, true)],
[CMD.UNMARK, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, p_node, REFRESH_TREE, true, true)],
[CMD.UNMARK_SELECTION, () =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, U, REFRESH_TREE, false)],
[CMD.UNMARK_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.TOGGLE_MARK, U, REFRESH_TREE, true)],
[CMD.UNMARK_ALL, () =&gt; p_leoUI.command(LEOCMD.UNMARK_ALL, U, REFRESH_TREE_BODY, true)],

</t>
<t tx="felix.20201214150149.12">[CMD.EXTRACT, () =&gt; p_leoUI.command(LEOCMD.EXTRACT, U, REFRESH_TREE_BODY, false)],
[CMD.EXTRACT_NAMES, () =&gt; p_leoUI.command(LEOCMD.EXTRACT_NAMES, U, REFRESH_TREE_BODY, false)],

</t>
<t tx="felix.20201214150149.13">[CMD.MOVE_DOWN, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_DOWN, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.MOVE_DOWN_SELECTION, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_DOWN, U, REFRESH_TREE, false)],
[CMD.MOVE_DOWN_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_DOWN, U, REFRESH_TREE, true)],

[CMD.MOVE_LEFT, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_LEFT, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.MOVE_LEFT_SELECTION, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_LEFT, U, REFRESH_TREE, false)],
[CMD.MOVE_LEFT_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_LEFT, U, REFRESH_TREE, true)],

[CMD.MOVE_RIGHT, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_RIGHT, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.MOVE_RIGHT_SELECTION, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_RIGHT, U, REFRESH_TREE, false)],
[CMD.MOVE_RIGHT_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_RIGHT, U, REFRESH_TREE, true)],

[CMD.MOVE_UP, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_UP, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.MOVE_UP_SELECTION, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_UP, U, REFRESH_TREE, false)],
[CMD.MOVE_UP_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.MOVE_PNODE_UP, U, REFRESH_TREE, true)],

</t>
<t tx="felix.20201214150149.14">[CMD.REDO, () =&gt; p_leoUI.command(LEOCMD.REDO, U, REFRESH_TREE_BODY, false)],
[CMD.REDO_FO, () =&gt; p_leoUI.command(LEOCMD.REDO, U, REFRESH_TREE_BODY, true)],
[CMD.REDO_DISABLED, () =&gt; { }],
[CMD.UNDO, () =&gt; p_leoUI.command(LEOCMD.UNDO, U, REFRESH_TREE_BODY, false)],
[CMD.UNDO_FO, () =&gt; p_leoUI.command(LEOCMD.UNDO, U, REFRESH_TREE_BODY, true)],
[CMD.UNDO_DISABLED, () =&gt; { }],

</t>
<t tx="felix.20201214150149.15">[CMD.SHOW_OUTLINE, () =&gt; p_leoUI.showOutline(true)], // Also focuses on outline
[CMD.SHOW_LOG, () =&gt; p_leoUI.showLogPane()],
[CMD.SHOW_BODY, () =&gt; p_leoUI.showBody(false)], // Also focuses on body

</t>
<t tx="felix.20201214150149.16">[CMD.COPY_MARKED, () =&gt; p_leoUI.command(LEOCMD.COPY_MARKED, U, REFRESH_TREE_BODY, true)],
[CMD.DIFF_MARKED_NODES, () =&gt; p_leoUI.command(LEOCMD.DIFF_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
[CMD.MARK_CHANGED_ITEMS, () =&gt; p_leoUI.command(LEOCMD.MARK_CHANGED_ITEMS, U, REFRESH_TREE_BODY, true)],
[CMD.MARK_SUBHEADS, () =&gt; p_leoUI.command(LEOCMD.MARK_SUBHEADS, U, REFRESH_TREE_BODY, true)],
[CMD.CLONE_MARKED_NODES, () =&gt; p_leoUI.command(LEOCMD.CLONE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
[CMD.DELETE_MARKED_NODES, () =&gt; p_leoUI.command(LEOCMD.DELETE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
[CMD.MOVE_MARKED_NODES, () =&gt; p_leoUI.command(LEOCMD.MOVE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],

[CMD.PREV_NODE, () =&gt; p_leoUI.command(LEOCMD.GOTO_PREV_HISTORY, U, REFRESH_TREE_BODY, false)],
[CMD.PREV_NODE_FO, () =&gt; p_leoUI.command(LEOCMD.GOTO_PREV_HISTORY, U, REFRESH_TREE_BODY, true)],
[CMD.PREV_NODE_DISABLED, () =&gt; { }],

[CMD.NEXT_NODE, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_HISTORY, U, REFRESH_TREE_BODY, false)],
[CMD.NEXT_NODE_FO, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_HISTORY, U, REFRESH_TREE_BODY, true)],
[CMD.NEXT_NODE_DISABLED, () =&gt; { }],

</t>
<t tx="felix.20201214150149.17">[CMD.CLONE_FIND_ALL, () =&gt; p_leoUI.command(LEOCMD.CLONE_FIND_ALL, U, REFRESH_TREE_BODY, true)],
[CMD.CLONE_FIND_ALL_FLATTENED, () =&gt; p_leoUI.command(LEOCMD.CLONE_FIND_ALL_FLATTENED, U, REFRESH_TREE_BODY, true)],
[CMD.CLONE_FIND_MARKED, () =&gt; p_leoUI.command(LEOCMD.CLONE_FIND_MARKED, U, REFRESH_TREE_BODY, true)],
[CMD.CLONE_FIND_FLATTENED_MARKED, () =&gt; p_leoUI.command(LEOCMD.CLONE_FIND_FLATTENED_MARKED, U, REFRESH_TREE_BODY, true)],

// [CMD.SET_FIND_EVERYWHERE_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.ENTIRE_OUTLINE)],
// [CMD.SET_FIND_NODE_ONLY_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.NODE_ONLY)],
// [CMD.SET_FIND_SUBOUTLINE_ONLY_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.SUBOUTLINE_ONLY)],
// [CMD.TOGGLE_FIND_IGNORE_CASE_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.IGNORE_CASE)],
// [CMD.TOGGLE_FIND_MARK_CHANGES_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.MARK_CHANGES)],
// [CMD.TOGGLE_FIND_MARK_FINDS_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.MARK_FINDS)],
// [CMD.TOGGLE_FIND_REGEXP_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.REG_EXP)],
// [CMD.TOGGLE_FIND_WORD_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.WHOLE_WORD)],
// [CMD.TOGGLE_FIND_SEARCH_BODY_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.SEARCH_BODY)],
// [CMD.TOGGLE_FIND_SEARCH_HEADLINE_OPTION, () =&gt; w_leoUI.setSearchSetting(Constants.FIND_INPUTS_IDS.SEARCH_HEADLINE)],

[CMD.SET_ENABLE_PREVIEW, () =&gt; p_leoUI.config.setEnablePreview()],
[CMD.CLEAR_CLOSE_EMPTY_GROUPS, () =&gt; p_leoUI.config.clearCloseEmptyGroups()],
[CMD.SET_CLOSE_ON_FILE_DELETE, () =&gt; p_leoUI.config.setCloseOnFileDelete()],

</t>
<t tx="felix.20201214150149.2">@others
</t>
<t tx="felix.20201214150149.3">[CMD.EXECUTE, () =&gt; p_leoUI.command(LEOCMD.EXECUTE_SCRIPT, U, REFRESH_ALL, false)],

[CMD.MINIBUFFER, () =&gt; p_leoUI.minibuffer()], // Is referenced in package.json
[CMD.SET_LEO_ID, () =&gt; p_leoUI.setLeoIDCommand()],

[CMD.CLICK_BUTTON, (p_node: LeoButtonNode) =&gt; p_leoUI.clickAtButton(p_node)], // Not referenced in package.json
[CMD.GOTO_SCRIPT, (p_node: LeoButtonNode) =&gt; p_leoUI.gotoScript(p_node)],
[CMD.REMOVE_BUTTON, (p_node: LeoButtonNode) =&gt; p_leoUI.removeAtButton(p_node)],

</t>
<t tx="felix.20201214150149.4">[CMD.CLOSE_FILE, () =&gt; p_leoUI.closeLeoFile()],
// [CMD.NEW_FILE, () =&gt; p_leoUI.command(LEOCMD.NEW, U, REFRESH_ALL, false)],
[CMD.NEW_FILE, () =&gt; p_leoUI.newLeoFile()],
[CMD.OPEN_FILE, (p_uri?: vscode.Uri) =&gt; p_leoUI.openLeoFile(p_uri)],
[CMD.SAVE_AS_FILE, () =&gt; p_leoUI.saveAsLeoFile()],
[CMD.SAVE_AS_LEOJS, () =&gt; p_leoUI.saveAsLeoJsFile()],
[CMD.SAVE_FILE, () =&gt; p_leoUI.saveLeoFile()],
[CMD.SAVE_FILE_FO, () =&gt; p_leoUI.saveLeoFile(true)],

[CMD.SWITCH_FILE, () =&gt; p_leoUI.switchLeoFile()],
[CMD.RECENT_FILES, () =&gt; p_leoUI.showRecentLeoFiles()],

[CMD.WRITE_AT_FILE_NODES, () =&gt; p_leoUI.command(LEOCMD.WRITE_AT_FILE_NODES, U, REFRESH_TREE, false, false)],
[CMD.WRITE_AT_FILE_NODES_FO, () =&gt; p_leoUI.command(LEOCMD.WRITE_AT_FILE_NODES, U, REFRESH_TREE, true, false)],
[CMD.WRITE_DIRTY_AT_FILE_NODES, () =&gt; p_leoUI.command(LEOCMD.WRITE_DIRTY_AT_FILE_NODES, U, REFRESH_TREE, false, false)],
[CMD.WRITE_DIRTY_AT_FILE_NODES_FO, () =&gt; p_leoUI.command(LEOCMD.WRITE_DIRTY_AT_FILE_NODES, U, REFRESH_TREE, true, false)],

[CMD.SET_OPENED_FILE, (p_index: number) =&gt; p_leoUI.selectOpenedLeoDocument(p_index, true)],

[CMD.REFRESH_FROM_DISK, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.REFRESH_FROM_DISK, p_node, REFRESH_TREE_BODY, false)],

[CMD.REFRESH_FROM_DISK_SELECTION, () =&gt; p_leoUI.command(LEOCMD.REFRESH_FROM_DISK, U, REFRESH_TREE_BODY, false)],

[CMD.REFRESH_FROM_DISK_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.REFRESH_FROM_DISK, U, REFRESH_TREE_BODY, true)],

[CMD.GIT_DIFF, () =&gt; p_leoUI.command(LEOCMD.GIT_DIFF, U, REFRESH_TREE_BODY, false)],

</t>
<t tx="felix.20201214150149.5">[CMD.HEADLINE, (p_node: Position) =&gt; p_leoUI.editHeadline(p_node, true)],
[CMD.HEADLINE_SELECTION, () =&gt; p_leoUI.editHeadline(U, false)],
[CMD.HEADLINE_SELECTION_FO, () =&gt; p_leoUI.editHeadline(U, true)],

</t>
<t tx="felix.20201214150149.6">// cut/copy/paste/delete given node.
[CMD.COPY, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.COPY_PNODE, p_node, NO_REFRESH, true, true)],
[CMD.CUT, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.CUT_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.DELETE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.DELETE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
[CMD.PASTE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.PASTE_PNODE, p_node, REFRESH_TREE_BODY, true, false)],
[CMD.PASTE_CLONE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.PASTE_CLONE_PNODE, p_node, REFRESH_TREE_BODY, true, false)],

// cut/copy/paste/delete current selection (self.commander.p)
[CMD.COPY_SELECTION, () =&gt; p_leoUI.command(LEOCMD.COPY_PNODE, U, NO_REFRESH, false)],
[CMD.CUT_SELECTION, () =&gt; p_leoUI.command(LEOCMD.CUT_PNODE, U, REFRESH_TREE_BODY, false)],
[CMD.CUT_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.CUT_PNODE, U, REFRESH_TREE_BODY, true)],
[CMD.DELETE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.DELETE_PNODE, U, REFRESH_TREE_BODY, false)],
[CMD.DELETE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.DELETE_PNODE, U, REFRESH_TREE_BODY, true)],
[CMD.PASTE_CLONE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.PASTE_CLONE_PNODE, U, REFRESH_TREE_BODY, false)],
[CMD.PASTE_CLONE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.PASTE_CLONE_PNODE, U, REFRESH_TREE_BODY, true)],
[CMD.PASTE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.PASTE_PNODE, U, REFRESH_TREE_BODY, false)],
[CMD.PASTE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.PASTE_PNODE, U, REFRESH_TREE_BODY, true)],

</t>
<t tx="felix.20201214150149.7">// Called by nodes in the tree when selected either by mouse, or with enter
//[CMD.SELECT_NODE, (p_node: Position) =&gt; w_leoUI.selectTreeNode(p_node.position, false)],
[CMD.SELECT_NODE, (p_outlineNode: LeoOutlineNode) =&gt; p_leoUI.selectTreeNode(p_outlineNode.position, false)], // Select is NOT a Position!
//[CMD.OPEN_ASIDE, (p_node: Position) =&gt; w_leoUI.selectTreeNode(p_node.position, true)],
[CMD.OPEN_ASIDE, (p_position: Position) =&gt; p_leoUI.selectTreeNode(p_position, true)],

[CMD.CONTRACT_ALL, () =&gt; p_leoUI.command(LEOCMD.CONTRACT_ALL, U, REFRESH_TREE_BODY, false)],
[CMD.CONTRACT_ALL_FO, () =&gt; p_leoUI.command(LEOCMD.CONTRACT_ALL, U, REFRESH_TREE_BODY, true)],

[CMD.CONTRACT_OR_GO_LEFT, () =&gt; p_leoUI.command(LEOCMD.CONTRACT_OR_GO_LEFT, U, REFRESH_TREE_BODY, true)],
[CMD.EXPAND_AND_GO_RIGHT, () =&gt; p_leoUI.command(LEOCMD.EXPAND_AND_GO_RIGHT, U, REFRESH_TREE_BODY, true)],

</t>
<t tx="felix.20201214150149.8">[CMD.GOTO_NEXT_CLONE, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_CLONE, p_node, REFRESH_NODE_BODY, true)],
[CMD.GOTO_NEXT_CLONE_SELECTION, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_CLONE, U, REFRESH_NODE_BODY, false)],
[CMD.GOTO_NEXT_CLONE_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_CLONE, U, REFRESH_NODE_BODY, true)],

[CMD.GOTO_NEXT_MARKED, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_MARKED, U, REFRESH_NODE_BODY, true)],
[CMD.GOTO_FIRST_VISIBLE, () =&gt; p_leoUI.command(LEOCMD.GOTO_FIRST_VISIBLE, U, REFRESH_NODE_BODY, true)],
[CMD.GOTO_LAST_SIBLING, () =&gt; p_leoUI.command(LEOCMD.GOTO_LAST_SIBLING, U, REFRESH_NODE_BODY, true)],
[CMD.GOTO_LAST_VISIBLE, () =&gt; p_leoUI.command(LEOCMD.GOTO_LAST_VISIBLE, U, REFRESH_NODE_BODY, true)],
[CMD.GOTO_NEXT_VISIBLE, () =&gt; p_leoUI.command(LEOCMD.GOTO_NEXT_VISIBLE, U, REFRESH_NODE_BODY, true)],
[CMD.GOTO_PREV_VISIBLE, () =&gt; p_leoUI.command(LEOCMD.GOTO_PREV_VISIBLE, U, REFRESH_NODE_BODY, true)],

[CMD.PAGE_UP, () =&gt; p_leoUI.command(LEOCMD.PAGE_UP, U, REFRESH_NODE_BODY, true)],
[CMD.PAGE_DOWN, () =&gt; p_leoUI.command(LEOCMD.PAGE_DOWN, U, REFRESH_NODE_BODY, true)],

</t>
<t tx="felix.20201214150149.9">[CMD.DEHOIST, () =&gt; p_leoUI.command(LEOCMD.DEHOIST, U, REFRESH_TREE_BODY, false)],
[CMD.DEHOIST_DISABLED, () =&gt; { }],
[CMD.DEHOIST_FO, () =&gt; p_leoUI.command(LEOCMD.DEHOIST, U, REFRESH_TREE_BODY, true)],
[CMD.HOIST, (p_node: Position) =&gt; p_leoUI.command(LEOCMD.HOIST_PNODE, p_node, REFRESH_TREE_BODY, true)],
[CMD.HOIST_DISABLED, () =&gt; { }],
[CMD.HOIST_SELECTION, () =&gt; p_leoUI.command(LEOCMD.HOIST_PNODE, U, REFRESH_TREE, false)],
[CMD.HOIST_SELECTION_FO, () =&gt; p_leoUI.command(LEOCMD.HOIST_PNODE, U, REFRESH_TREE, true)],

</t>
<t tx="felix.20201214151326.1">import * as vscode from "vscode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214151326.10">/**
 * All commands this expansion exposes to the user via GUI/keybindings in package.json
 */
public static COMMANDS = {
    // * Access to the Settings/Welcome Webview
    SHOW_WELCOME: Constants.NAME + ".showWelcomePage", // Always available: not in the commandPalette section of package.json
    SHOW_SETTINGS: Constants.NAME + ".showSettingsPage", // Always available: not in the commandPalette section of package.json
    STATUS_BAR: Constants.NAME + ".statusBar", // Status Bar Click Command
    // Leo Documents
    SET_OPENED_FILE: Constants.NAME + ".setOpenedFile",
    OPEN_FILE: Constants.NAME + ".openLeoFile", // sets focus on BODY
    CLEAR_RECENT_FILES: Constants.NAME + ".clearRecentFiles",
    IMPORT_ANY_FILE: Constants.NAME + ".importAnyFile",
    RECENT_FILES: Constants.NAME + ".recentLeoFiles", // shows recent Leo files, opens one on selection
    SWITCH_FILE: Constants.NAME + ".switchLeoFile",
    NEW_FILE: Constants.NAME + ".newLeoFile",
    SAVE_FILE: Constants.NAME + ".saveLeoFile",
    SAVE_FILE_FO: Constants.NAME + ".saveLeoFileFromOutline",
    SAVE_AS_FILE: Constants.NAME + ".saveAsLeoFile",
    SAVE_AS_LEOJS: Constants.NAME + ".saveAsLeoJsFile",
    CLOSE_FILE: Constants.NAME + ".closeLeoFile",
    MINIBUFFER: Constants.NAME + ".minibuffer",
    SET_LEO_ID: Constants.NAME + ".setLeoID",
    GIT_DIFF: Constants.NAME + ".gitDiff",
    WRITE_AT_FILE_NODES: Constants.NAME + ".writeAtFileNodes",
    WRITE_AT_FILE_NODES_FO: Constants.NAME + ".writeAtFileNodesFromOutline",
    WRITE_DIRTY_AT_FILE_NODES: Constants.NAME + ".writeDirtyAtFileNodes",
    WRITE_DIRTY_AT_FILE_NODES_FO: Constants.NAME + ".writeDirtyAtFileNodesFromOutline",
    // At-buttons
    CLICK_BUTTON: Constants.NAME + ".clickButton",
    REMOVE_BUTTON: Constants.NAME + ".removeButton",
    GOTO_SCRIPT: Constants.NAME + ".gotoScript",
    // Outline Node User Interaction
    SELECT_NODE: Constants.NAME + ".selectTreeNode",
    OPEN_ASIDE: Constants.NAME + ".openAside", // selects and opens body splitting the workspace
    // Goto operations that always finish with focus in outline
    PAGE_UP: Constants.NAME + ".pageUp",
    PAGE_DOWN: Constants.NAME + ".pageDown",
    GOTO_FIRST_VISIBLE: Constants.NAME + ".gotoFirstVisible",
    GOTO_LAST_VISIBLE: Constants.NAME + ".gotoLastVisible",
    GOTO_LAST_SIBLING: Constants.NAME + ".gotoLastSibling",
    GOTO_NEXT_VISIBLE: Constants.NAME + ".gotoNextVisible",
    GOTO_PREV_VISIBLE: Constants.NAME + ".gotoPrevVisible",
    GOTO_NEXT_MARKED: Constants.NAME + ".gotoNextMarked",
    GOTO_NEXT_CLONE: Constants.NAME + ".gotoNextClone",
    GOTO_NEXT_CLONE_SELECTION: Constants.NAME + ".gotoNextCloneSelection",
    GOTO_NEXT_CLONE_SELECTION_FO: Constants.NAME + ".gotoNextCloneSelectionFromOutline",
    CONTRACT_OR_GO_LEFT: Constants.NAME + ".contractOrGoLeft",
    EXPAND_AND_GO_RIGHT: Constants.NAME + ".expandAndGoRight",
    // Leo Operations
    UNDO: Constants.NAME + ".undo", // From command Palette
    UNDO_FO: Constants.NAME + ".undoFromOutline", // from button, return focus on OUTLINE
    UNDO_DISABLED: Constants.NAME + ".undoDisabled", // Disabled - nop
    REDO: Constants.NAME + ".redo", // From command Palette
    REDO_FO: Constants.NAME + ".redoFromOutline", // from button, return focus on OUTLINE
    REDO_DISABLED: Constants.NAME + ".redoDisabled", // Disabled - nop
    EXECUTE: Constants.NAME + ".executeScript",
    SHOW_BODY: Constants.NAME + ".showBody",
    SHOW_OUTLINE: Constants.NAME + ".showOutline",
    SHOW_LOG: Constants.NAME + ".showLogPane",
    SORT_CHILDREN: Constants.NAME + ".sortChildrenSelection",
    SORT_CHILDREN_FO: Constants.NAME + ".sortChildrenSelectionFromOutline",
    SORT_SIBLING: Constants.NAME + ".sortSiblingsSelection",
    SORT_SIBLING_FO: Constants.NAME + ".sortSiblingsSelectionFromOutline",
    CONTRACT_ALL: Constants.NAME + ".contractAll", // From command Palette
    CONTRACT_ALL_FO: Constants.NAME + ".contractAllFromOutline", // from button, return focus on OUTLINE
    PREV_NODE: Constants.NAME + ".prev",
    PREV_NODE_FO: Constants.NAME + ".prevFromOutline",
    PREV_NODE_DISABLED: Constants.NAME + ".prevDisabled",
    NEXT_NODE: Constants.NAME + ".next",
    NEXT_NODE_FO: Constants.NAME + ".nextFromOutline",
    NEXT_NODE_DISABLED: Constants.NAME + ".nextDisabled",
    // Commands from tree panel buttons or context: focus on OUTLINE
    MARK: Constants.NAME + ".mark",
    UNMARK: Constants.NAME + ".unmark",
    COPY: Constants.NAME + ".copyNode",
    CUT: Constants.NAME + ".cutNode",
    PASTE: Constants.NAME + ".pasteNode",
    PASTE_CLONE: Constants.NAME + ".pasteNodeAsClone",
    DELETE: Constants.NAME + ".delete",
    HEADLINE: Constants.NAME + ".editHeadline",
    MOVE_DOWN: Constants.NAME + ".moveOutlineDown",
    MOVE_LEFT: Constants.NAME + ".moveOutlineLeft",
    MOVE_RIGHT: Constants.NAME + ".moveOutlineRight",
    MOVE_UP: Constants.NAME + ".moveOutlineUp",
    INSERT: Constants.NAME + ".insertNode",
    INSERT_CHILD: Constants.NAME + ".insertChildNode",
    CLONE: Constants.NAME + ".cloneNode",
    PROMOTE: Constants.NAME + ".promote",
    PROMOTE_DISABLED: Constants.NAME + ".promoteDisabled",
    DEMOTE: Constants.NAME + ".demote",
    DEMOTE_DISABLED: Constants.NAME + ".demoteDisabled",
    REFRESH_FROM_DISK: Constants.NAME + ".refreshFromDisk",
    // Commands from keyboard, while focus on BODY (command-palette returns to BODY for now)
    MARK_SELECTION: Constants.NAME + ".markSelection",
    UNMARK_SELECTION: Constants.NAME + ".unmarkSelection",
    COPY_SELECTION: Constants.NAME + ".copyNodeSelection", // Nothing to refresh/focus so no "FO" version
    CUT_SELECTION: Constants.NAME + ".cutNodeSelection",
    PASTE_SELECTION: Constants.NAME + ".pasteNodeAtSelection",
    PASTE_CLONE_SELECTION: Constants.NAME + ".pasteNodeAsCloneAtSelection",
    DELETE_SELECTION: Constants.NAME + ".deleteSelection",
    HEADLINE_SELECTION: Constants.NAME + ".editSelectedHeadline",
    MOVE_DOWN_SELECTION: Constants.NAME + ".moveOutlineDownSelection",
    MOVE_LEFT_SELECTION: Constants.NAME + ".moveOutlineLeftSelection",
    MOVE_RIGHT_SELECTION: Constants.NAME + ".moveOutlineRightSelection",
    MOVE_UP_SELECTION: Constants.NAME + ".moveOutlineUpSelection",
    INSERT_SELECTION: Constants.NAME + ".insertNodeSelection", // Can be interrupted
    INSERT_SELECTION_INTERRUPT: Constants.NAME + ".insertNodeSelectionInterrupt", // Interrupted version
    INSERT_CHILD_SELECTION: Constants.NAME + ".insertChildNodeSelection", // Can be interrupted
    INSERT_CHILD_SELECTION_INTERRUPT: Constants.NAME + ".insertChildNodeSelectionInterrupt", // Can be interrupted
    CLONE_SELECTION: Constants.NAME + ".cloneNodeSelection",
    PROMOTE_SELECTION: Constants.NAME + ".promoteSelection",
    DEMOTE_SELECTION: Constants.NAME + ".demoteSelection",
    REFRESH_FROM_DISK_SELECTION: Constants.NAME + ".refreshFromDiskSelection",
    // Commands from keyboard, while focus on OUTLINE (no need for COPY_SELECTION)
    MARK_SELECTION_FO: Constants.NAME + ".markSelectionFromOutline",
    UNMARK_SELECTION_FO: Constants.NAME + ".unmarkSelectionFromOutline",
    CUT_SELECTION_FO: Constants.NAME + ".cutNodeSelectionFromOutline",
    PASTE_SELECTION_FO: Constants.NAME + ".pasteNodeAtSelectionFromOutline",
    PASTE_CLONE_SELECTION_FO: Constants.NAME + ".pasteNodeAsCloneAtSelectionFromOutline",
    DELETE_SELECTION_FO: Constants.NAME + ".deleteSelectionFromOutline",
    HEADLINE_SELECTION_FO: Constants.NAME + ".editSelectedHeadlineFromOutline",
    MOVE_DOWN_SELECTION_FO: Constants.NAME + ".moveOutlineDownSelectionFromOutline",
    MOVE_LEFT_SELECTION_FO: Constants.NAME + ".moveOutlineLeftSelectionFromOutline",
    MOVE_RIGHT_SELECTION_FO: Constants.NAME + ".moveOutlineRightSelectionFromOutline",
    MOVE_UP_SELECTION_FO: Constants.NAME + ".moveOutlineUpSelectionFromOutline",
    INSERT_SELECTION_FO: Constants.NAME + ".insertNodeSelectionFromOutline",
    INSERT_CHILD_SELECTION_FO: Constants.NAME + ".insertChildNodeSelectionFromOutline",
    CLONE_SELECTION_FO: Constants.NAME + ".cloneNodeSelectionFromOutline",
    PROMOTE_SELECTION_FO: Constants.NAME + ".promoteSelectionFromOutline",
    DEMOTE_SELECTION_FO: Constants.NAME + ".demoteSelectionFromOutline",
    REFRESH_FROM_DISK_SELECTION_FO: Constants.NAME + ".refreshFromDiskSelectionFromOutline",
    HOIST: Constants.NAME + ".hoistNode",
    HOIST_DISABLED: Constants.NAME + ".hoistDisabled",
    HOIST_SELECTION: Constants.NAME + ".hoistSelection",
    HOIST_SELECTION_FO: Constants.NAME + ".hoistSelectionFromOutline",
    DEHOIST: Constants.NAME + ".deHoist",
    DEHOIST_DISABLED: Constants.NAME + ".deHoistDisabled",
    DEHOIST_FO: Constants.NAME + ".deHoistFromOutline",
    EXTRACT: Constants.NAME + ".extract",
    EXTRACT_NAMES: Constants.NAME + ".extractNames",
    COPY_MARKED: Constants.NAME + ".copyMarked",
    DIFF_MARKED_NODES: Constants.NAME + ".diffMarkedNodes",
    MARK_CHANGED_ITEMS: Constants.NAME + ".markChangedItems",
    MARK_SUBHEADS: Constants.NAME + ".markSubheads",
    UNMARK_ALL: Constants.NAME + ".unmarkAll",
    CLONE_MARKED_NODES: Constants.NAME + ".cloneMarkedNodes",
    DELETE_MARKED_NODES: Constants.NAME + ".deleteMarkedNodes",
    MOVE_MARKED_NODES: Constants.NAME + ".moveMarkedNodes",

    FIND_QUICK: Constants.NAME + ".findQuick",
    FIND_QUICK_SELECTED: Constants.NAME + ".findQuickSelected",
    FIND_QUICK_TIMELINE: Constants.NAME + ".findQuickTimeline",
    FIND_QUICK_CHANGED: Constants.NAME + ".findQuickChanged",
    FIND_QUICK_HISTORY: Constants.NAME + ".history",
    FIND_QUICK_MARKED: Constants.NAME + ".markedList",
    FIND_QUICK_GO_ANYWHERE: Constants.NAME + ".goAnywhere",
    GOTO_NAV_ENTRY: Constants.NAME + ".gotoNav",

    START_SEARCH: Constants.NAME + ".startSearch",
    FIND_ALL: Constants.NAME + ".findAll",
    FIND_NEXT: Constants.NAME + ".findNext",
    FIND_NEXT_FO: Constants.NAME + ".findNextFromOutline",
    FIND_PREVIOUS: Constants.NAME + ".findPrevious",
    FIND_PREVIOUS_FO: Constants.NAME + ".findPreviousFromOutline",
    FIND_VAR: Constants.NAME + ".findVar",
    FIND_DEF: Constants.NAME + ".findDef",
    REPLACE: Constants.NAME + ".replace",
    REPLACE_FO: Constants.NAME + ".replaceFromOutline",
    REPLACE_THEN_FIND: Constants.NAME + ".replaceThenFind",
    REPLACE_THEN_FIND_FO: Constants.NAME + ".replaceThenFindFromOutline",
    REPLACE_ALL: Constants.NAME + ".replaceAll",

    CLONE_FIND_ALL: Constants.NAME + ".cloneFindAll",
    CLONE_FIND_ALL_FLATTENED: Constants.NAME + ".cloneFindAllFlattened",
    CLONE_FIND_TAG: Constants.NAME + ".cloneFindTag",
    CLONE_FIND_MARKED: Constants.NAME + ".cloneFindMarked",
    CLONE_FIND_FLATTENED_MARKED: Constants.NAME + ".cloneFindFlattenedMarked",
    // TODO
    GOTO_GLOBAL_LINE: Constants.NAME + ".gotoGlobalLine",
    TAG_CHILDREN: Constants.NAME + ".tagChildren",
    TAG_NODE: Constants.NAME + ".tagNode",
    REMOVE_TAG: Constants.NAME + ".removeTag",
    REMOVE_TAGS: Constants.NAME + ".removeTags",
    SET_FIND_EVERYWHERE_OPTION: Constants.NAME + ".setFindEverywhereOption",
    SET_FIND_NODE_ONLY_OPTION: Constants.NAME + ".setFindNodeOnlyOption",
    SET_FIND_SUBOUTLINE_ONLY_OPTION: Constants.NAME + ".setFindSuboutlineOnlyOption",
    TOGGLE_FIND_IGNORE_CASE_OPTION: Constants.NAME + ".toggleFindIgnoreCaseOption",
    TOGGLE_FIND_MARK_CHANGES_OPTION: Constants.NAME + ".toggleFindMarkChangesOption",
    TOGGLE_FIND_MARK_FINDS_OPTION: Constants.NAME + ".toggleFindMarkFindsOption",
    TOGGLE_FIND_REGEXP_OPTION: Constants.NAME + ".toggleFindRegexpOption",
    TOGGLE_FIND_WORD_OPTION: Constants.NAME + ".toggleFindWordOption",
    TOGGLE_FIND_SEARCH_BODY_OPTION: Constants.NAME + ".toggleFindSearchBodyOption",
    TOGGLE_FIND_SEARCH_HEADLINE_OPTION: Constants.NAME + ".toggleFindSearchHeadlineOption",
    SET_ENABLE_PREVIEW: Constants.NAME + ".setEnablePreview",
    CLEAR_CLOSE_EMPTY_GROUPS: Constants.NAME + ".clearCloseEmptyGroups",
    SET_CLOSE_ON_FILE_DELETE: Constants.NAME + ".setCloseOnFileDelete"
};

</t>
<t tx="felix.20201214151326.11">/**
 * Leo command names that are called from vscode's gui/menu/buttons/keybindings triggers
 */
public static LEO_COMMANDS = {

    // * File Commands
    NEW: 'new',
    OPEN_OUTLINE: 'open_outline',
    WRITE_AT_FILE_NODES: 'write-at-file-nodes',
    WRITE_DIRTY_AT_FILE_NODES: 'write-dirty-at-file-nodes',

    // * More Commands
    //  TODO
    // GOTO_GLOBAL_LINE: "!goto_global_line",
    // TAG_CHILDREN: "!tag_children",
    // START_SEARCH: "!start_search",
    // FIND_ALL: "!find_all",
    // FIND_NEXT: "!find_next",
    // FIND_PREVIOUS: "!find_previous",
    // FIND_VAR: "!find_var",
    // FIND_DEF: "!find_def",
    // REPLACE: "!replace",
    // REPLACE_THEN_FIND: "!replace_then_find",
    // REPLACE_ALL: "!replace_all",

    // * Undo Operations
    UNDO: "undo",
    REDO: "redo",
    // * Tree Building
    EXECUTE_SCRIPT: "TODO_EXECUTE_SCRIPT", // TODO
    REFRESH_FROM_DISK: "TODO_REFRESH_FROM_DISK", // TODO
    REFRESH_FROM_DISK_PNODE: "TODO_REFRESH_FROM_DISK_PNODE", // TODO
    GIT_DIFF: "TODO_GIT_DIFF", // TODO
    // * Outline from body text
    EXTRACT: "TODO_EXTRACT", // TODO
    EXTRACT_NAMES: "TODO_EXTRACT_NAMES", // TODO
    // * Hoist Operations
    HOIST_PNODE: "hoist",
    DEHOIST: "de-hoist",
    // * History Navigation
    GOTO_PREV_HISTORY: "goto-prev-history-node",
    GOTO_NEXT_HISTORY: "goto-next-history-node",
    // * Goto &amp; Folding
    PAGE_UP: "tree-page-up",
    PAGE_DOWN: "tree-page-down",
    GOTO_FIRST_VISIBLE: "goto-first-visible-node",
    GOTO_LAST_VISIBLE: "goto-last-visible-node",
    GOTO_LAST_SIBLING: "goto-last-sibling",
    GOTO_NEXT_VISIBLE: "goto-next-visible",
    GOTO_PREV_VISIBLE: "goto-prev-visible",
    GOTO_NEXT_MARKED: "goto-next-marked",
    GOTO_NEXT_CLONE: "goto-next-clone",
    CONTRACT_OR_GO_LEFT: "contract-or-go-left",
    EXPAND_AND_GO_RIGHT: "expand-and-go-right",
    CONTRACT_ALL: "contract-all",
    // * Mark Operations
    TOGGLE_MARK: "toggle-mark",
    COPY_MARKED: "copy-marked-nodes",
    DIFF_MARKED_NODES: "diff-marked-nodes", // TODO from leoCompare.py
    MARK_CHANGED_ITEMS: "mark-changed-items",
    MARK_SUBHEADS: "mark-subheads",
    UNMARK_ALL: "unmark-all",
    CLONE_MARKED_NODES: "clone-marked-nodes",
    DELETE_MARKED_NODES: "delete-marked-nodes",
    MOVE_MARKED_NODES: "move-marked-nodes",
    // * Clipboard Operations
    COPY_PNODE: "copy-node",
    CUT_PNODE: "cut-node",
    PASTE_PNODE: "async-paste-node",
    PASTE_CLONE_PNODE: "async-paste-retaining-clones",
    // * Outline Editing
    DELETE_PNODE: "delete-node",
    MOVE_PNODE_DOWN: "move-outline-down",
    MOVE_PNODE_LEFT: "move-outline-left",
    MOVE_PNODE_RIGHT: "move-outline-right",
    MOVE_PNODE_UP: "move-outline-up",
    INSERT_PNODE: "insert-node",
    INSERT_CHILD_PNODE: "insert-child",
    CLONE_PNODE: "clone-node",
    // * Marshalling Operations
    PROMOTE_PNODE: "promote",
    DEMOTE_PNODE: "demote",
    SORT_CHILDREN: "sort-children",
    SORT_SIBLINGS: "sort-siblings",
    // * Clone-find functionality
    CLONE_FIND_ALL: "TODO_CLONE_FIND_ALL", // TODO
    CLONE_FIND_ALL_FLATTENED: "TODO_CLONE_FIND_ALL_FLATTENED", // TODO
    CLONE_FIND_MARKED: "TODO_CLONE_FIND_MARKED", // TODO
    CLONE_FIND_FLATTENED_MARKED: "TODO_CLONE_FIND_FLATTENED_MARKED", // TODO
};

</t>
<t tx="felix.20201214151326.2">/**
 * Text and numeric constants used throughout leojs
 */
export class Constants {

    public static PUBLISHER: string = "boltex";
    @others
}
</t>
<t tx="felix.20201214151326.3">public static NAME: string = "leojs";

public static TREEVIEW_ID: string = "leojsOutline";
public static TREEVIEW_EXPLORER_ID: string = "leojsOutlineExplorer";

public static DOCUMENTS_ID: string = "leojsDocuments";
public static DOCUMENTS_EXPLORER_ID: string = "leojsDocumentsExplorer";

public static BUTTONS_ID: string = "leojsButtons";
public static BUTTONS_EXPLORER_ID: string = "leojsButtonsExplorer";

public static UNDOS_ID: string = "leojsUndos";
public static UNDOS_EXPLORER_ID: string = "leojsUndosExplorer";

public static FIND_ID: string = "leojsFindPanel";
public static FIND_EXPLORER_ID: string = "leojsindPanelExplorer";

public static GOTO_ID: string = "leojsGotoPanel";
public static GOTO_EXPLORER_ID: string = "leojsGotoPanelExplorer";

public static FILE_EXTENSION: string = "leojs";
public static URI_LEO_SCHEME: string = "leojs";
public static URI_FILE_SCHEME: string = "file";
public static URI_SCHEME_HEADER: string = "leojs:/";
public static FILE_OPEN_FILTER_MESSAGE: string = "Leojs Files";
public static UNTITLED_FILE_NAME: string = "untitled";
public static RECENT_FILES_KEY: string = "leojsRecentFiles";
public static LAST_FILES_KEY: string = "leojsLastFiles";

public static STATUSBAR_DEBOUNCE_DELAY: number = 70;
public static REFRESH_DEBOUNCE_DELAY: number = 50;
public static STATES_DEBOUNCE_DELAY: number = 60;
public static BUTTONS_DEBOUNCE_DELAY: number = 160;
public static DOCUMENTS_DEBOUNCE_DELAY: number = 80;
public static UNDOS_DEBOUNCE_DELAY: number = 140;
public static BODY_STATES_DEBOUNCE_DELAY: number = 120;

public static CONFIG_NAME: string = "leojs";
public static CONFIG_WORKBENCH_ENABLED_PREVIEW: string = "workbench.editor.enablePreview";
public static CONFIG_REFRESH_MATCH: string = "OnNodes"; // substring to distinguish 'on-hover' icon commands

</t>
<t tx="felix.20201214151326.4">/**
 * Strings used in the workbench interface panels (not for messages or dialogs)
 */
public static GUI = {
    ICON_LIGHT_DOCUMENT: "resources/light/document.svg",
    ICON_DARK_DOCUMENT: "resources/dark/document.svg",
    ICON_LIGHT_DOCUMENT_DIRTY: "resources/light/document-dirty.svg",
    ICON_DARK_DOCUMENT_DIRTY: "resources/dark/document-dirty.svg",
    ICON_LIGHT_BUTTON: "resources/light/button.svg",
    ICON_DARK_BUTTON: "resources/dark/button.svg",
    ICON_LIGHT_BUTTON_ADD: "resources/light/button-add.svg",
    ICON_DARK_BUTTON_ADD: "resources/dark/button-add.svg",
    ICON_LIGHT_PATH: "resources/light/box",
    ICON_DARK_PATH: "resources/dark/box",
    ICON_FILE_EXT: ".svg",
    SVG_SHEME: "data",
    SVG_OPEN: 'image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none"&gt;',
    SVG_CLOSE: "&lt;/svg&gt;",
    STATUSBAR_INDICATOR: "$(keyboard) ",
    STATUSBAR_COLOR: "fb7c47",
    QUICK_OPEN_LEO_COMMANDS: "&gt;leojs: ",
    EXPLORER_TREEVIEW_PREFIX: "LEOJS ",
    TREEVIEW_TITLE: "OUTLINE",
    BODY_TITLE: "LEOJS BODY",
    LOG_PANE_TITLE: "LeoJS Log Window",
    THEME_STATUSBAR: "statusBar.foreground"
};

</t>
<t tx="felix.20201214151326.5">/**
 * Basic user messages strings for messages and dialogs
 */
public static USER_MESSAGES = {
    SCRIPT_BUTTON: "Creates a button from selected node's script",
    SCRIPT_BUTTON_TOOLTIP:
        "The 'Script Button' button creates a new button.\n" +
        "Its name will be the headline of the presently selected node\n" +
        "Hitting this newly created button executes the button's script.\n" +
        "\n" +
        "For example, to run a script on any part of an outline:\n" +
        "\n" +
        "1.  Select the node containing a script. (Ex.: \"g.es(p.h)\")\n" +
        "2.  Press 'Script Button'. This will create a new button.\n" +
        "3.  Select a node on which you want to run the script.\n" +
        "4.  Press the *new* button.",
    SAVE_CHANGES: "Save changes to",
    SAVE_DIALOG_LABEL: "Save Leo File",
    BEFORE_CLOSING: "before closing?",
    CANCEL: "Cancel",
    OPEN_WITH_LEOJS: "Open this Leojs file?",
    OPEN_RECENT_FILE: "Open Recent Leojs File",
    RIGHT_CLICK_TO_OPEN: "Right-click to open with leojs",
    FILE_ALREADY_OPENED: "Leojs file already opened",
    CHOOSE_OPENED_FILE: "Select an opened Leojs File",
    FILE_NOT_OPENED: "No files opened.",
    PROMPT_EDIT_HEADLINE: "Edit Headline",
    PROMPT_INSERT_NODE: "Insert Node",
    DEFAULT_HEADLINE: "New Headline",
    CLOSE_ERROR: "Cannot close: No files opened.",
    YES: "Yes",
    NO: "No",
    YES_ALL: "Yes to all",
    NO_ALL: "No to all",
    MINIBUFFER_PROMPT: "Minibuffer Full Command",
    CHANGES_DETECTED: "Changes to external files were detected.",
    REFRESHED: " Nodes refreshed.", // with voluntary leading space
    IGNORED: " They were ignored.", // with voluntary leading space
    TOO_FAST: "Leo is busy! ", // with voluntary trailing space
    STATUSBAR_TOOLTIP_ON: "Leojs Key Bindings are in effect",
    STATUSBAR_TOOLTIP_OFF: "Leojs Key Bindings off",
    ZOOM_LEVEL_RANGE_LIMIT: "Value for zoom level should be between -12 and 12",
    FONT_SIZE_RANGE_LIMIT: "Value for font size should be between 6 and 30",
    FIX_IT: "Fix it",
    ENABLE_PREVIEW_SET: "'Enable Preview' setting was set",
    ENABLE_PREVIEW_RECOMMEND: "'Enable Preview' setting is recommended (currently disabled)",
    CLOSE_EMPTY_CLEARED: "'Close Empty Groups' setting was cleared",
    CLOSE_EMPTY_RECOMMEND: "'Close Empty Groups' setting is NOT recommended!",
    CLOSE_ON_DELETE_SET: "'Close on File Delete' setting was set",
    CLOSE_ON_DELETE_RECOMMEND: "'Close on File Delete' setting is recommended (currently disabled)",
    SET_LEO_ID_MESSAGE: "Leo ID not found. Please enter an id that identifies you uniquely.",
    GET_LEO_ID_PROMPT: "Please enter an id that identifies you uniquely.\n(Letters and numbers only, and at least 3 characters in length)",
    ENTER_LEO_ID: "Enter Leo id"
};

</t>
<t tx="felix.20201214151326.6">/**
 * * Strings used in 'at-button' panel display in LeoButtonNode
 */
public static BUTTON_STRINGS = {
    NULL_WIDGET: "nullButtonWidget",
    SCRIPT_BUTTON: "script-button",
    ADD_BUTTON: "leoButtonAdd",
    NORMAL_BUTTON: "leoButtonNode"
};

</t>
<t tx="felix.20201214151326.7">/**
 * Choices offered when about to lose current changes to a Leo Document
 */
public static ASK_SAVE_CHANGES_BUTTONS: vscode.MessageItem[] = [
    {
        title: Constants.USER_MESSAGES.YES,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.NO,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.CANCEL,
        isCloseAffordance: true
    }
];

</t>
<t tx="felix.20201214151326.8">/**
 * Used in 'when' clauses, set with vscode.commands.executeCommand("setContext",...)
 */
public static CONTEXT_FLAGS = {
    // Main flags for connection and opened file
    LEO_READY: "leojsReady", // Extension activated and classes created and ready
    TREE_OPENED: "leojsTreeOpened", // At least one Leo file opened
    TREE_TITLED: "leojsTreeTitled", // Tree is a Leo file and not a new untitled document
    SERVER_STARTED: "leojsServerStarted", // Auto-start or manually started
    // 'states' flags for currently opened tree view
    LEO_CHANGED: "leojsChanged",
    LEO_CAN_UNDO: "leojsCanUndo",
    LEO_CAN_REDO: "leojsCanRedo",
    LEO_CAN_BACK: "leojsCanGoBack",
    LEO_CAN_NEXT: "leojsCanGoNext",
    LEO_CAN_DEMOTE: "leojsCanDemote",
    LEO_CAN_PROMOTE: "leojsCanPromote",
    LEO_CAN_DEHOIST: "leojsCanDehoist",
    // 'states' flags about current selection, for visibility and commands availability
    SELECTED_MARKED: "leojsMarked", // no need for unmarked here, use !leojsMarked
    SELECTED_CLONE: "leojsCloned",
    SELECTED_DIRTY: "leojsDirty",
    SELECTED_EMPTY: "leojsEmpty",
    SELECTED_CHILD: "leojsChild", // Has children
    SELECTED_ATFILE: "LeojsAtFile", // Can be refreshed
    SELECTED_ROOT: "leojsRoot", // ! Computed by hand
    // Statusbar Flag 'keybindings in effect'
    LEO_SELECTED: "leojsObjectSelected", // keybindings "On": Outline or body has focus
    // Context Flags for 'when' clauses, used concatenated, for each outline node
    NODE_MARKED: "leojsNodeMarked",  // Selected node is marked
    NODE_UNMARKED: "leojsNodeUnmarked", // Selected node is unmarked (Needed for regexp)
    NODE_ATFILE: "leojsNodeAtFile", // Selected node is an @file or @clean, etc...
    NODE_CLONED: "leojsNodeCloned",
    NODE_ROOT: "leojsNodeRoot",
    NODE_NOT_ROOT: "leojsNodeNotRoot",
    // Flags for Leo documents tree view icons and hover node command buttons
    DOCUMENT_SELECTED_TITLED: "leojsDocumentSelectedTitled",
    DOCUMENT_TITLED: "leojsDocumentTitled",
    DOCUMENT_SELECTED_UNTITLED: "leojsDocumentSelectedUntitled",
    DOCUMENT_UNTITLED: "leojsDocumentUntitled",
    // Flags for focus context
    FOCUS_FIND: "leojsFindFocus",

    // Context flags that are mapped 'directly' onto leojs config settings
    // * PREFIXED WITH 'leojs' *
    LEO_TREE_BROWSE: Constants.NAME + Constants.CONFIG_NAMES.LEO_TREE_BROWSE[0].toUpperCase() + Constants.CONFIG_NAMES.LEO_TREE_BROWSE.slice(1), // Force ar'jan's suggestion of Leo's tree behavior override
    TREE_IN_EXPLORER: Constants.NAME + Constants.CONFIG_NAMES.TREE_IN_EXPLORER[0].toUpperCase() + Constants.CONFIG_NAMES.TREE_IN_EXPLORER.slice(1), // Leo outline also in the explorer view
    SHOW_OPEN_ASIDE: Constants.NAME + Constants.CONFIG_NAMES.SHOW_OPEN_ASIDE[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_OPEN_ASIDE.slice(1),   // Show 'open aside' in context menu
    SHOW_EDIT: Constants.NAME + Constants.CONFIG_NAMES.SHOW_EDIT[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_EDIT.slice(1),              // Hover Icons on outline nodes
    SHOW_ARROWS: Constants.NAME + Constants.CONFIG_NAMES.SHOW_ARROWS[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_ARROWS.slice(1),           // Hover Icons on outline nodes
    SHOW_ADD: Constants.NAME + Constants.CONFIG_NAMES.SHOW_ADD[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_ADD.slice(1),                 // Hover Icons on outline nodes
    SHOW_MARK: Constants.NAME + Constants.CONFIG_NAMES.SHOW_MARK[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_MARK.slice(1),               // Hover Icons on outline nodes
    SHOW_CLONE: Constants.NAME + Constants.CONFIG_NAMES.SHOW_CLONE[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_CLONE.slice(1),             // Hover Icons on outline nodes
    SHOW_COPY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_COPY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_COPY.slice(1),               // Hover Icons on outline nodes

    SHOW_EDITION_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_EDITION_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_EDITION_BODY.slice(1),
    SHOW_CLIPBOARD_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_CLIPBOARD_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_CLIPBOARD_BODY.slice(1),
    SHOW_PROMOTE_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_PROMOTE_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_PROMOTE_BODY.slice(1),
    SHOW_EXECUTE_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_EXECUTE_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_EXECUTE_BODY.slice(1),
    SHOW_EXTRACT_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_EXTRACT_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_EXTRACT_BODY.slice(1),
    SHOW_IMPORT_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_IMPORT_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_IMPORT_BODY.slice(1),
    SHOW_REFRESH_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_REFRESH_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_REFRESH_BODY.slice(1),
    SHOW_HOIST_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_HOIST_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_HOIST_BODY.slice(1),
    SHOW_MARK_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_MARK_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_MARK_BODY.slice(1),
    SHOW_SORT_BODY: Constants.NAME + Constants.CONFIG_NAMES.SHOW_SORT_BODY[0].toUpperCase() + Constants.CONFIG_NAMES.SHOW_SORT_BODY.slice(1)
};

</t>
<t tx="felix.20201214151326.9">/**
 * Command strings to be used with vscode.commands.executeCommand
 * See https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command
 */
public static VSCODE_COMMANDS = {
    SET_CONTEXT: "setContext",
    CLOSE_ACTIVE_EDITOR: "workbench.action.closeActiveEditor",
    QUICK_OPEN: "workbench.action.quickOpen"
};

</t>
<t tx="felix.20201214151419.1">import * as vscode from "vscode";
import { Icon, LeoButton } from "./types";
import { Constants } from "./constants";
import { LeoStates } from "./leoStates";

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201214151419.2">/**
 * * '@buttons' shown as a list with this TreeDataProvider implementation
 */
export class LeoButtonsProvider implements vscode.TreeDataProvider&lt;LeoButtonNode&gt; {

    private fakeAtButtons: LeoButton[] = [
        { name: 'script-button', index: 'nullButtonWidget' },
        { name: 'button name 2', index: 'key2' },
        { name: 'button name 3', index: 'key3' },
    ];

    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoButtonNode | undefined&gt; = new vscode.EventEmitter&lt;LeoButtonNode | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;LeoButtonNode | undefined&gt; = this._onDidChangeTreeData.event;

    constructor(
        private _leoStates: LeoStates,
        private _icons: Icon[],
    ) { }

    @others
}

</t>
<t tx="felix.20201214151419.3">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201214151419.4">public getTreeItem(element: LeoButtonNode): Thenable&lt;LeoButtonNode&gt; | LeoButtonNode {
    return element;
}

</t>
<t tx="felix.20201214151419.5">public getChildren(element?: LeoButtonNode): Thenable&lt;LeoButtonNode[]&gt; {
    const w_children: LeoButtonNode[] = [];
    // if called with element, or not ready, give back empty array as there won't be any children
    if (this._leoStates.fileOpenedReady &amp;&amp; !element) {
        this.fakeAtButtons.forEach(p_button =&gt; {
            w_children.push(new LeoButtonNode(p_button, this._icons));
        });
    }
    return Promise.resolve(w_children); // Defaults to an empty list of children
}

</t>
<t tx="felix.20201214151419.6">public getParent(element: LeoButtonNode): vscode.ProviderResult&lt;LeoButtonNode&gt; | null {
    // Buttons are just a list, as such, entries are always child of root so return null
    return null;
}

</t>
<t tx="felix.20201214151425.2">/**
 * * Leo @buttons tree view node item implementation, for usage in a TreeDataProvider.
 */
export class LeoButtonNode extends vscode.TreeItem {

    // Context string that is checked in package.json with 'when' clauses
    public contextValue: string;

    // is the special 'add' button used to create button from a given node's script
    private _isAdd: boolean;

    constructor(
        public button: LeoButton,
        private _buttonIcons: Icon[], // pointer to global array of node icons
    ) {
        super(button.name);
        // Setup this instance (just differentiate 'script-button' for now)
        this.command = {
            command: Constants.COMMANDS.CLICK_BUTTON,
            title: '',
            arguments: [this]
        };
        this._isAdd = (this.button.index.startsWith(Constants.BUTTON_STRINGS.NULL_WIDGET) &amp;&amp;
            this.button.name === Constants.BUTTON_STRINGS.SCRIPT_BUTTON);
        this.contextValue = this._isAdd ? Constants.BUTTON_STRINGS.ADD_BUTTON : Constants.BUTTON_STRINGS.NORMAL_BUTTON;
    }

    @others
}

</t>
<t tx="felix.20201214151425.3">// @ts-ignore
public get iconPath(): Icon {
    return this._buttonIcons[this._isAdd ? 1 : 0];
}

</t>
<t tx="felix.20201214151425.4">// @ts-ignore
public get id(): string {
    // Add prefix and suffix salt to index to prevent accidental duplicates
    return "p" + this.button.index + "s" + this.button.name;
}

</t>
<t tx="felix.20201214151425.5">// @ts-ignore
public get tooltip(): string {
    if (this._isAdd) {
        return Constants.USER_MESSAGES.SCRIPT_BUTTON_TOOLTIP;
    } else {
        return this.button.name;
    }
}

</t>
<t tx="felix.20201214151425.6">// @ts-ignore
public get description(): string | boolean {
    if (this._isAdd) {
        return Constants.USER_MESSAGES.SCRIPT_BUTTON;
    } else {
        return false;
    }
}

</t>
<t tx="felix.20201214151429.1">import * as vscode from "vscode";
import { LeoUI } from './leoUI';
import { LeoStates } from "./leoStates";
import { Constants } from "./constants";
import * as utils from "./utils";
import * as g from './core/leoGlobals';
import { Commands } from "./core/leoCommands";
import { LeoFrame } from "./core/leoFrame";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214151429.2">/**
 * Opened Leo documents shown as a list with this TreeDataProvider implementation
 */
export class LeoDocumentsProvider implements vscode.TreeDataProvider&lt;LeoFrame&gt; {

    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoFrame | undefined&gt; = new vscode.EventEmitter&lt;LeoFrame | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;LeoFrame | undefined&gt; = this._onDidChangeTreeData.event;

    constructor(
        private _leoStates: LeoStates,
        private _leoUI: LeoUI,
    ) { }

    @others
}

</t>
<t tx="felix.20201214151429.3">/**
 * Refresh the whole Leo Document panel
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201214151429.4">public getTreeItem(element: LeoFrame): Thenable&lt;LeoDocumentNode&gt; | LeoDocumentNode {
    return new LeoDocumentNode(element, this._leoUI,);
}

</t>
<t tx="felix.20201214151429.5">public getChildren(element?: LeoFrame): LeoFrame[] {
    // if called with element, or not ready, give back empty array as there won't be any children
    if (this._leoStates.fileOpenedReady &amp;&amp; !element) {
        return g.app.windowList;
    } else {
        return []; // Should not happen!
    }
}

</t>
<t tx="felix.20201214151429.6">public getParent(element: LeoFrame): vscode.ProviderResult&lt;LeoFrame&gt; {
    // Leo documents are just a list, as such, entries are always child of root, so return null
    return undefined;
}

</t>
<t tx="felix.20201214151434.2">/**
 * * Opened Leo documents tree view node item implementation for usage in a TreeDataProvider
 */
export class LeoDocumentNode extends vscode.TreeItem {

    constructor(
        public frame: LeoFrame,
        private _leoUI: LeoUI,
    ) {
        super(frame.c.fileName() ? utils.getFileFromPath(frame.c.fileName()) : frame.title);

        const c: Commands = frame.c;
        const isNamed: boolean = !!c.fileName();
        this.label = isNamed ? utils.getFileFromPath(c.fileName()) : frame.title;
        this.tooltip = isNamed ? c.fileName() : frame.title;
        this.command = {
            command: Constants.COMMANDS.SET_OPENED_FILE,
            title: '',
            arguments: [g.app.windowList.indexOf(frame)]
        };

        if (frame === g.app.windowList[this._leoUI.frameIndex]) {
            // If this was created as a selected node, make sure it's selected
            this._leoUI.setDocumentSelection(frame);
            this.contextValue = isNamed ? Constants.CONTEXT_FLAGS.DOCUMENT_SELECTED_TITLED : Constants.CONTEXT_FLAGS.DOCUMENT_SELECTED_UNTITLED;
        } else {
            this.contextValue = isNamed ? Constants.CONTEXT_FLAGS.DOCUMENT_TITLED : Constants.CONTEXT_FLAGS.DOCUMENT_UNTITLED;
        }

        this.id = `d${g.app.windowList.indexOf(frame)}f${c.fileName()}c${c.changed.toString()}`;
        this.iconPath = this._leoUI.documentIcons[c.changed ? 1 : 0];
    }

}
</t>
<t tx="felix.20201214151447.1">import * as vscode from "vscode";
import * as utils from "./utils";
import { LeoUI } from "./leoUI";
import { Constants } from "./constants";
import { LeoPackageStates } from "./types";
import { Position } from "./core/leoNodes";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214151447.10">/**
 * Current selection allows promote command
 */
private _leoCanPromote: boolean = false;
get leoCanPromote(): boolean {
    return this._leoCanPromote;
}
set leoCanPromote(p_value: boolean) {
    this._leoCanPromote = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_PROMOTE, p_value);
}

</t>
<t tx="felix.20201214151447.11">/**
 * Currently selected can de-hoist state
 */
private _leoCanDehoist: boolean = false;
get leoCanDehoist(): boolean {
    return this._leoCanDehoist;
}
set leoCanDehoist(p_value: boolean) {
    this._leoCanDehoist = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_DEHOIST, p_value);
}

</t>
<t tx="felix.20201214151447.12"></t>
<t tx="felix.20201214151447.13">// * 'states' flags about current selection, for visibility and commands availability
private _leoMarked: boolean = false;
get leoMarked(): boolean {
    return this._leoMarked;
}
set leoMarked(p_value: boolean) {
    this._leoMarked = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_MARKED, p_value);
}

</t>
<t tx="felix.20201214151447.14">private _leoCloned: boolean = false;
get leoCloned(): boolean {
    return this._leoCloned;
}
set leoCloned(p_value: boolean) {
    this._leoCloned = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_CLONE, p_value);
}

</t>
<t tx="felix.20201214151447.15">private _leoDirty: boolean = false;
get leoDirty(): boolean {
    return this._leoDirty;
}
set leoDirty(p_value: boolean) {
    this._leoDirty = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_DIRTY, p_value);
}

</t>
<t tx="felix.20201214151447.16">private _leoEmpty: boolean = false;
get leoEmpty(): boolean {
    return this._leoEmpty;
}
set leoEmpty(p_value: boolean) {
    this._leoEmpty = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_EMPTY, p_value);
}

</t>
<t tx="felix.20201214151447.17">private _leoChild: boolean = false;
get leoChild(): boolean {
    return this._leoChild;
}
set leoChild(p_value: boolean) {
    this._leoChild = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_CHILD, p_value);
}

</t>
<t tx="felix.20201214151447.18">private _leoAtFile: boolean = false;
get leoAtFile(): boolean {
    return this._leoAtFile;
}
set leoAtFile(p_value: boolean) {
    this._leoAtFile = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_ATFILE, p_value);
}

</t>
<t tx="felix.20201214151447.19">// * Special is-root 'state' flag about current selection, for visibility and commands availability
private _leoRoot: boolean = false;
get leoRoot(): boolean {
    return this._leoRoot;
}
set leoRoot(p_value: boolean) {
    this._leoRoot = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.SELECTED_ROOT, p_value);
}

</t>
<t tx="felix.20201214151447.2">/**
 * * Global states service
 * Holds state flags used to restrict command availability and icon visibility
 * Changes UI by changing vscode's context variables
 */
export class LeoStates {

    public qLastContextChange: Thenable&lt;unknown&gt;; // Promise that the last state change is applied

    @others
}
</t>
<t tx="felix.20201214151447.20">constructor(
    private _context: vscode.ExtensionContext,
    private _leoJs: LeoUI
) {
    this.qLastContextChange = Promise.resolve(); // Temporary.
}

</t>
<t tx="felix.20201214151447.21">public setSelectedNodeFlags(p_node: Position): void {
    this.leoMarked = p_node.isMarked();
    this.leoCloned = p_node.isCloned();
    this.leoDirty = p_node.isDirty();
    this.leoEmpty = !p_node.v.hasBody();
    this.leoChild = p_node.hasChildren();
    this.leoAtFile = p_node.isAtFileNode();
    this.leoRoot = p_node._isRoot;
}

</t>
<t tx="felix.20201214151447.22">public setLeoStateFlags(p_states: LeoPackageStates): void {
    this.leoChanged = p_states.changed;
    this.leoCanUndo = p_states.canUndo;
    this.leoCanRedo = p_states.canRedo;
    this.leoCanGoBack = p_states.canGoBack;
    this.leoCanGoNext = p_states.canGoNext;
    this.leoCanDemote = p_states.canDemote;
    this.leoCanPromote = p_states.canPromote;
    this.leoCanDehoist = p_states.canDehoist;
    this.leoRoot = !p_states.canHoist;
}
</t>
<t tx="felix.20201214151447.3"></t>
<t tx="felix.20201214151447.4">/**
 * A Leo file is opened
 */
private _fileOpenedReady: boolean = false; // Sets context flag along with treeview title
get fileOpenedReady(): boolean {
    return this._fileOpenedReady;
}
set fileOpenedReady(p_value: boolean) {
    this._fileOpenedReady = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.TREE_OPENED, p_value);
}

</t>
<t tx="felix.20201214151447.5">
/**
 * Currently opened Leo file path and name, empty string if new unsaved file.
 */
private _leoOpenedFileName: string = "";
get leoOpenedFileName(): string {
    return this._leoOpenedFileName;
}
set leoOpenedFileName(p_name: string) {
    if (p_name &amp;&amp; p_name.length) {
        this._leoOpenedFileName = p_name;
        this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.TREE_TITLED, true);
    } else {
        this._leoOpenedFileName = "";
        this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.TREE_TITLED, false);
    }
}

</t>
<t tx="felix.20201214151447.6">
/**
 * Currently opened commander is dirty
 */
private _leoChanged: boolean = false;
get leoChanged(): boolean {
    return this._leoChanged;
}
set leoChanged(p_value: boolean) {
    if (this._leoChanged !== p_value) {
        // Refresh Documents Panel
        // ? Needed?
        this._leoJs.refreshDocumentsPane();
    }
    this._leoChanged = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CHANGED, p_value);
}

</t>
<t tx="felix.20201214151447.7">/**
 * Undo operation available state
 */
private _leoCanUndo: boolean = false;
get leoCanUndo(): boolean {
    return this._leoCanUndo;
}
set leoCanUndo(p_value: boolean) {
    this._leoCanUndo = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_UNDO, p_value);
}

</t>
<t tx="felix.20201214151447.8">/**
 * Redo operation available state
 */
private _leoCanRedo: boolean = false;
get leoCanRedo(): boolean {
    return this._leoCanRedo;
}
set leoCanRedo(p_value: boolean) {
    this._leoCanRedo = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_REDO, p_value);
}

</t>
<t tx="felix.20201214151447.9">/**
 * Current selection allows demote command
 */
private _leoCanDemote: boolean = false;
get leoCanDemote(): boolean {
    return this._leoCanDemote;
}
set leoCanDemote(p_value: boolean) {
    this._leoCanDemote = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_DEMOTE, p_value);
}

</t>
<t tx="felix.20201214151451.1">import * as vscode from "vscode";
import * as utils from "./utils";
import { Constants } from "./constants";
import { LeoUI } from "./leoUI";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214151451.2">/**
 * * Statusbar indicator controller service
 */
export class LeoStatusBar {

    private _leoStatusBarItem: vscode.StatusBarItem;
    private _statusbarNormalColor = new vscode.ThemeColor(Constants.GUI.THEME_STATUSBAR);  // "statusBar.foreground"
    private _updateStatusBarTimeout: NodeJS.Timeout | undefined;
    private _string: string = ""; // Use this string with indicator, using this will replace the default from config

    // * Represents having focus on a leo tree, body or document panel to enable leo keybindings
    private _statusBarFlag: boolean = false;
    set statusBarFlag(p_value: boolean) {
        this._statusBarFlag = p_value;
    }
    get statusBarFlag(): boolean {
        return this._statusBarFlag;
    }

    constructor(
        private _context: vscode.ExtensionContext,
        private _leoJs: LeoUI
    ) {
        this._leoStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 0);
        this._leoStatusBarItem.color = Constants.GUI.STATUSBAR_COLOR;

        this._leoStatusBarItem.command = Constants.COMMANDS.SWITCH_FILE;
        // this._leoStatusBarItem.command = "leojs.test"; // just call test function for now to help debugging
        this._leoStatusBarItem.text = Constants.GUI.STATUSBAR_INDICATOR;
        this._leoStatusBarItem.tooltip = Constants.USER_MESSAGES.STATUSBAR_TOOLTIP_ON;
        _context.subscriptions.push(this._leoStatusBarItem);
        this._leoStatusBarItem.hide();
    }

    @others
}
</t>
<t tx="felix.20201214151451.3">/**
 * * Makes the statusbar indicator visible
 */
public show(): void {
    this._leoStatusBarItem.show();
}

</t>
<t tx="felix.20201214151451.4">/**
 * * Hides the statusbar indicator
 */
public hide(): void {
    this._leoStatusBarItem.hide();
}

</t>
<t tx="felix.20201214151451.5">/**
 * * Sets string to replace default from config &amp; refresh it
 */
public setString(p_string: string): void {
    this._string = p_string;
    this._updateLeoObjectIndicator();
}

</t>
<t tx="felix.20201214151451.6">/**
 * * Updates the status bar visual indicator visual indicator with optional debouncing delay
 * @param p_state True/False flag for On or Off status
 * @param p_debounceDelay Optional, in milliseconds
 */
public update(p_state: boolean, p_debounceDelay?: number, p_forced?: boolean): void {
    if (p_forced || (p_state !== this.statusBarFlag)) {
        this.statusBarFlag = p_state;
        if (p_debounceDelay) {
            this._updateLeoObjectIndicatorDebounced(p_debounceDelay);
        } else {
            this._updateLeoObjectIndicator();
        }
    }
}

</t>
<t tx="felix.20201214151451.7">/**
 * * Updates the status bar visual indicator flag in a debounced manner
 * @param p_delay number of milliseconds
 */
private _updateLeoObjectIndicatorDebounced(p_delay: number): void {
    if (this._updateStatusBarTimeout) {
        clearTimeout(this._updateStatusBarTimeout);
    }
    this._updateStatusBarTimeout = setTimeout(() =&gt; {
        this._updateLeoObjectIndicator();
    }, p_delay);
}

</t>
<t tx="felix.20201214151451.8">/**
 * * Updates the status bar visual indicator flag directly
 */
private _updateLeoObjectIndicator(): void {
    // Can be called directly, so clear timer if any
    if (this._updateStatusBarTimeout) {
        clearTimeout(this._updateStatusBarTimeout);
    }

    utils.setContext(Constants.CONTEXT_FLAGS.LEO_SELECTED, !!this.statusBarFlag);

    this._leoStatusBarItem.text = Constants.GUI.STATUSBAR_INDICATOR +
        (this._string ? this._string : '') + " " +
        (this._leoJs.leoStates.leoOpenedFileName ? utils.getFileFromPath(this._leoJs.leoStates.leoOpenedFileName) : Constants.UNTITLED_FILE_NAME);

    // Also check in constructor for statusBar properties (the createStatusBarItem call itself)
    if (this.statusBarFlag &amp;&amp; this._leoJs.leoStates.fileOpenedReady) {
        this._leoStatusBarItem.color = "#" + Constants.GUI.STATUSBAR_COLOR;
        this._leoStatusBarItem.tooltip = Constants.USER_MESSAGES.STATUSBAR_TOOLTIP_ON;
    } else {
        this._leoStatusBarItem.color = this._statusbarNormalColor;
        this._leoStatusBarItem.tooltip = Constants.USER_MESSAGES.STATUSBAR_TOOLTIP_OFF;
    }
}

</t>
<t tx="felix.20201214154816.1">import * as vscode from "vscode";
import { LeoOutlineNode } from "./leoOutline";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214154816.10">/**
 * * Icon path names used in leoNodes for rendering in treeview
 */
export interface Icon {
    light: string | vscode.Uri;
    dark: string | vscode.Uri;
}

</t>
<t tx="felix.20201214154816.11">/**
 * * Parameter structure used in the 'runSaveFileDialog' equivalent when asking user input
 */
export interface showSaveAsDialogParameters {
    "initialFile": string;
    "title": string;
    "message": string;
    "filetypes": string[];
    "defaultExtension": string;
}

</t>
<t tx="felix.20201214154816.12">/**
 * * Parameter structure used in the 'runAskYesNoDialog' equivalent when asking user input
 */
export interface runAskYesNoDialogParameters {
    "ask": string;
    "message": string;
    "yes_all": boolean;
    "no_all": boolean;
}

</t>
<t tx="felix.20201214154816.13">/**
 * * Parameter structure used in the 'runAskOkDialog' equivalent when showing a warning
 */
export interface runWarnMessageDialogParameters {
    "warn": string;
    "message": string;
}

</t>
<t tx="felix.20201214154816.14">/**
 * * Parameter structure for non-blocking info message about detected file changes
 */
export interface runInfoMessageDialogParameters {
    "message": string;
}

</t>
<t tx="felix.20201214154816.15">/**
 * * Used in showAskModalDialog to get answer from user interaction
 */
export interface AskMessageItem extends vscode.MessageItem {
    value: string;
}

</t>
<t tx="felix.20201214154816.16">/**
 * * Used in switch Leo document to get answer from user interaction
 */
export interface ChooseDocumentItem extends vscode.QuickPickItem {
    value: number;
}

</t>
<t tx="felix.20201214154816.17">/**
 * * Used by the minibuffer command pallette
 * Acquired from the getCommands method in leobridgeserver.py
 */
export interface MinibufferCommand extends vscode.QuickPickItem {
    func: string;
}
</t>
<t tx="felix.20201214154816.3">/**
 * * When refreshing the outline and getting to Leo's selected node
 */
export const enum RevealType {
    NoReveal = 0,   // In apToLeoNode conversion. True:
    // Re-use the old if the global revealType is "NoReveal" and it's the selected node.
    Reveal,
    RevealSelect,
    RevealSelectFocus
}

</t>
<t tx="felix.20201214154816.4">/**
 * * Required Refresh Dictionary of "elements to refresh" flags
 */
export interface ReqRefresh {
    node?: boolean; // Reveal received selected node (Navigation only, no tree change)
    tree?: boolean; // Tree needs refresh
    body?: boolean; // Body needs refresh
    states?: boolean; // States needs refresh:
    // (changed, canUndo, canRedo, canDemote, canPromote, canDehoist)
    buttons?: boolean; // Buttons needs refresh
    documents?: boolean; // Documents needs refresh
}

</t>
<t tx="felix.20201214154816.5">/**
 * * Stackable front end commands
 */
export interface UserCommand {
    action: string;
    node?: LeoOutlineNode | undefined; // We can START a stack with a targeted command
    text?: string | undefined; // If a string is required, for headline, etc.
    refreshType: ReqRefresh; // Minimal refresh level required by this command
    fromOutline: boolean; // Focus back on outline instead of body
    keepSelection?: boolean; // Should bring back selection on node prior to command
    resolveFn?: (result: any) =&gt; void; // call that with an answer from python's (or other) side
    rejectFn?: (reason: any) =&gt; void; // call if problem is encountered
}

</t>
<t tx="felix.20201214154816.6">/**
 * * Object container for parameters of leoJs "apply-selected-node-to-body" method
 */
export interface ShowBodyParam {
    node: LeoOutlineNode,
    aside: boolean,
    showBodyKeepFocus: boolean,
    force_open?: boolean
}

</t>
<t tx="felix.20201214154816.7">/**
 * * Object sent back from leoInteg's 'getStates' command
 */
export interface LeoPackageStates {
    changed: boolean; // Leo document has changed (is dirty)
    canUndo: boolean; // Leo document can undo the last operation done
    canRedo: boolean; // Leo document can redo the last operation 'undone'
    canGoBack: boolean; // Has history
    canGoNext: boolean; // Has used goBack at least once
    canDemote: boolean; // Currently selected node can have its siblings demoted
    canPromote: boolean; // Currently selected node can have its children promoted
    canDehoist: boolean; // Leo Document is currently hoisted and can be de-hoisted
    canHoist: boolean; // Selected node is not the first top node already root
}

</t>
<t tx="felix.20201214154816.8">/**
 * * Leo document structure used in the 'Opened Leo Documents' tree view provider sent back by the server
 */
export interface LeoDocument {
    name: string;
    index: number;
    changed: boolean;
    selected: boolean;
}

</t>
<t tx="felix.20201214154816.9">/**
 * * Leo '@button' structure used in the '@buttons' tree view provider
 */
export interface LeoButton {
    name: string;
    index: string; // STRING KEY
}

</t>
<t tx="felix.20201214194144.1">import * as vscode from "vscode";
import { debounce } from "lodash";

import * as utils from "./utils";
import * as commandBindings from "./commandBindings";
import { Constants } from "./constants";
import { RevealType, Icon, ReqRefresh, LeoPackageStates, ConfigSetting, LeoSearchSettings } from "./types";

import { Config } from "./config";
import { LeoOutlineProvider } from './leoOutline';
import { LeoButtonNode, LeoButtonsProvider } from "./leoButtons";
import { LeoDocumentsProvider } from "./leoDocuments";
import { LeoStates } from "./leoStates";
import { LeoBodyProvider } from "./leoBody";
import { LeoUndoNode, LeoUndosProvider } from "./leoUndos";

import * as g from './core/leoGlobals';
import { Commands } from "./core/leoCommands";
import { Position } from "./core/leoNodes";
import { LeoGotoNode } from "./leoGoto";
import { LeoFrame } from "./core/leoFrame";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201214194144.10"></t>
<t tx="felix.20201214194144.2">constructor(private _context: vscode.ExtensionContext) {

    // * Setup States
    this.leoStates = new LeoStates(_context, this);

    // * Get configuration settings
    this.config = new Config(_context, this);
    // * also check workbench.editor.enablePreview
    this.config.buildFromSavedSettings();
    this._bodyEnablePreview = !!vscode.workspace
        .getConfiguration('workbench.editor')
        .get('enablePreview');

    // * Build Icon filename paths
    this.nodeIcons = utils.buildNodeIconPaths(_context);
    this.documentIcons = utils.buildDocumentIconPaths(_context);
    this.buttonIcons = utils.buildButtonsIconPaths(_context);
    this.gotoIcons = utils.buildGotoIconPaths(_context);

    this.showLogPane();
}

</t>
<t tx="felix.20201214194144.3"></t>
<t tx="felix.20201214194144.4"></t>
<t tx="felix.20201214194144.5"></t>
<t tx="felix.20201214194144.6"></t>
<t tx="felix.20201214194144.7"></t>
<t tx="felix.20201214194144.8"></t>
<t tx="felix.20201214194144.9"></t>
<t tx="felix.20201214195752.1">/**
 * Creates and manages instances of the UI elements along with their events
 */
export class LeoUI {
    // * State flags
    public leoStates: LeoStates;
    public verbose: boolean = true;
    public trace: boolean = true;
    public frameIndex: number = 0;
    public clipboardContent: string = "";

    // * Timers
    public refreshTimer: [number, number] | undefined; // until the selected node is found - even if already started refresh
    public lastRefreshTimer: [number, number] | undefined; // until the selected node is found - refreshed even if not found
    public commandRefreshTimer: [number, number] | undefined; // until the selected node is found -  keep if starting a new command already pending
    public lastCommandRefreshTimer: [number, number] | undefined; // until the selected node is found - refreshed if starting a new command
    public commandTimer: [number, number] | undefined; // until the command done - keep if starting a new one already pending
    public lastCommandTimer: [number, number] | undefined; // until the command done - refreshed if starting a new one
    public preventRefresh: boolean = false;

    // * Configuration Settings Service
    public config: Config; // Public configuration service singleton, used in leoSettingsWebview, leoBridge, and leoNode for inverted contrast

    // * Icon Paths (Singleton static arrays)
    public nodeIcons: Icon[] = [];
    public documentIcons: Icon[] = [];
    public buttonIcons: Icon[] = [];
    public gotoIcons: Icon[] = [];

    // * Refresh Cycle
    private _refreshType: ReqRefresh = {}; // Flags for commands to require parts of UI to refresh
    private _revealType: RevealType = RevealType.NoReveal; // Type of reveal for the selected node (when refreshing outline)
    private _preventShowBody = false; // Used when refreshing treeview from config: It requires not to open the body pane when refreshing.
    private _fromOutline: boolean = false; // flag to leave focus on outline instead of body when finished refreshing
    private _focusInterrupt: boolean = false; // Flag for preventing setting focus when interrupting (canceling) an 'insert node' text input dialog with another one

    // * Outline Pane
    private _leoTreeProvider!: LeoOutlineProvider; // TreeDataProvider single instance
    private _leoTreeView!: vscode.TreeView&lt;Position&gt;; // Outline tree view added to the Tree View Container with an Activity Bar icon
    private _leoTreeExView!: vscode.TreeView&lt;Position&gt;; // Outline tree view added to the Explorer Sidebar
    private _lastTreeView!: vscode.TreeView&lt;Position&gt;; // Last visible treeview

    // * Body pane
    private _bodyFileSystemStarted: boolean = false;
    private _bodyEnablePreview: boolean = true;
    private _leoFileSystem!: LeoBodyProvider; // as per https://code.visualstudio.com/api/extension-guides/virtual-documents#file-system-api
    private _bodyTextDocument: vscode.TextDocument | undefined; // Set when selected in tree by user, or opening a Leo file in showBody. and by _locateOpenedBody.
    private _bodyMainSelectionColumn: vscode.ViewColumn | undefined; // Column of last body 'textEditor' found, set to 1

    private _bodyUri: vscode.Uri = utils.strToLeoUri("");
    get bodyUri(): vscode.Uri {
        return this._bodyUri;
    }
    set bodyUri(p_uri: vscode.Uri) {
        this._leoFileSystem.setBodyTime(p_uri);
        this._bodyUri = p_uri;
    }

    // * Find panel
    private _findPanelWebviewView: vscode.WebviewView | undefined;
    private _findPanelWebviewExplorerView: vscode.WebviewView | undefined;
    private _lastSettingsUsed: LeoSearchSettings | undefined; // Last settings loaded / saved for current document


    // * Documents Pane
    private _leoDocumentsProvider!: LeoDocumentsProvider;
    private _leoDocuments!: vscode.TreeView&lt;LeoFrame&gt;;
    private _leoDocumentsExplorer!: vscode.TreeView&lt;LeoFrame&gt;;
    private _lastLeoDocuments: vscode.TreeView&lt;LeoFrame&gt; | undefined;

    private _currentDocumentChanged: boolean = false; // if clean and an edit is done: refresh opened documents view

    // * '@button' pane
    private _leoButtonsProvider!: LeoButtonsProvider;
    private _leoButtons!: vscode.TreeView&lt;LeoButtonNode&gt;;
    private _leoButtonsExplorer!: vscode.TreeView&lt;LeoButtonNode&gt;;
    private _lastLeoButtons: vscode.TreeView&lt;LeoButtonNode&gt; | undefined;

    // * Undos pane
    private _leoUndosProvider!: LeoUndosProvider;
    private _leoUndos!: vscode.TreeView&lt;LeoUndoNode&gt;;
    private _leoUndosExplorer!: vscode.TreeView&lt;LeoUndoNode&gt;;
    private _lastLeoUndos: vscode.TreeView&lt;LeoUndoNode&gt; | undefined;

    // * Log and terminal Panes
    private _leoLogPane: vscode.OutputChannel = vscode.window.createOutputChannel(Constants.GUI.LOG_PANE_TITLE);
    private _leoTerminalPane: vscode.OutputChannel | undefined;

    // * Edit/Insert Headline Input Box options instance, setup so clicking outside cancels the headline change
    private _headlineInputOptions: vscode.InputBoxOptions = {
        ignoreFocusOut: false,
        value: '',
        valueSelection: undefined,
        prompt: '',
    };

    // * Debounced method
    public launchRefresh!: ((p_node?: Position) =&gt; void);

    // * Debounced method used to get states for UI display flags (commands such as undo, redo, save, ...)
    public getStates!: (() =&gt; void);

    // * Debounced method
    public refreshDocumentsPane!: (() =&gt; void);

    // * Debounced method
    public refreshUndoPane!: (() =&gt; void);

    @others
}

</t>
<t tx="felix.20201214202058.1">/**
 * * 'getStates' action for use in debounced method call
 */
private _triggerGetStates(): void {
    if (this._refreshType.states) {
        this._refreshType.states = false;
        const c = g.app.windowList[this.frameIndex].c;
        const p = c.p;
        let w_canHoist = true;
        if (c.hoistStack.length) {
            const w_ph = c.hoistStack[c.hoistStack.length - 1].p;
            if (p.__eq__(w_ph)) {
                // p is already the hoisted node
                w_canHoist = false;
            }
        } else {
            // not hoisted, was it the single top child of the real root?
            if (c.rootPosition()!.__eq__(p) &amp;&amp; c.hiddenRootNode.children.length === 1) {
                w_canHoist = false;
            }
        }
        const w_states: LeoPackageStates = {
            changed: c.changed, // Document has changed (is dirty)
            canUndo: c.canUndo(), // Document can undo the last operation done
            canRedo: c.canRedo(), // Document can redo the last operation 'undone'
            canGoBack: c.nodeHistory.beadPointer &gt; 0,
            canGoNext: c.nodeHistory.beadPointer + 1 &lt; c.nodeHistory.beadList.length,
            canDemote: c.canDemote(), // Selected node can have its siblings demoted
            canPromote: c.canPromote(), // Selected node can have its children promoted
            canDehoist: c.canDehoist(), // Document is currently hoisted and can be de-hoisted
            canHoist: w_canHoist
        };
        this.leoStates.setLeoStateFlags(w_states);
    }
    if (this._refreshType.documents) {
        this._refreshType.documents = false;
        this.refreshDocumentsPane();
    }
    if (this._refreshType.buttons) {
        this._refreshType.buttons = false;
        this._leoButtonsProvider.refreshTreeRoot();
    }
}

</t>
<t tx="felix.20201214202118.1">/**
 * * Show the outline, with Leo's selected node also selected, and optionally focussed
 * @param p_focusOutline Flag for focus to be placed in outline
 */
public showOutline(p_focusOutline?: boolean): void {
    const c = g.app.windowList[this.frameIndex].c;
    this._lastTreeView.reveal(c.p, {
        select: true,
        focus: !!p_focusOutline
    }).then(
        () =&gt; { }, // Ok
        (p_error) =&gt; {
            console.log('showOutline could not reveal');
        }
    );
}

</t>
<t tx="felix.20201214202123.1">/**
 * * Public method exposed as 'refreshDocumentsPane' setter/getter to refresh the documents pane
 * Document Panel May be refreshed by other services (states service, ...)
 */
private _refreshDocumentsPane(): void {
    this._leoDocumentsProvider.refreshTreeRoot();
}

</t>
<t tx="felix.20201214202128.1">/**
 * * Places selection on the required node with a 'timeout'. Used after refreshing the opened Leo documents view.
 * @param p_frame Document node instance in the Leo document view to be the 'selected' one.
 */
public setDocumentSelection(p_frame: LeoFrame): void {
    this._currentDocumentChanged = p_frame.c.changed;
    this.leoStates.leoOpenedFileName = p_frame.c.fileName();
    setTimeout(() =&gt; {
        if (this._lastLeoDocuments &amp;&amp; this._lastLeoDocuments.selection.length &amp;&amp; this._lastLeoDocuments.selection[0] === p_frame) {
            // console.log('setDocumentSelection: already selected!');
        } else if (this._lastLeoDocuments &amp;&amp; this._lastLeoDocuments.visible) {
            this._lastLeoDocuments.reveal(p_frame, { select: true, focus: false }).then(
                () =&gt; { }, // Ok
                (p_error) =&gt; {
                    console.log('setDocumentSelection could not reveal');
                }
            );
        }
    }, 0);
}

</t>
<t tx="felix.20201214202625.1">/**
 * * Handles the node expanding and collapsing interactions by the user in the treeview
 * @param p_event The event passed by vscode
 * @param p_expand True if it was an expand, false if it was a collapse event
 * @param p_treeView Pointer to the treeview itself, either the standalone treeview or the one under the explorer
 */
private _onChangeCollapsedState(p_event: vscode.TreeViewExpansionEvent&lt;Position&gt;, p_expand: boolean, p_treeView: vscode.TreeView&lt;Position&gt;): void {

    // * Expanding or collapsing via the treeview interface selects the node to mimic Leo.

    // this.triggerBodySave(true); // Get any modifications from the editor into the Leo's body model

    if (p_treeView.selection.length &amp;&amp; p_treeView.selection[0] &amp;&amp; p_treeView.selection[0].__eq__(p_event.element)) {
        // * This happens if the tree selection is the same as the expanded/collapsed node: Just have Leo do the same
        // pass
    } else {
        // * This part only happens if the user clicked on the arrow without trying to select the node
        this._lastTreeView.reveal(p_event.element).then(
            () =&gt; { }, // Ok
            (p_error) =&gt; {
                console.log('_onChangeCollapsedState could not reveal');
            }
        );
        this.selectTreeNode(p_event.element, true);
    }

    // *  vscode will update its tree by itself, but we need to change Leo's model of its outline
    if (p_expand) {
        p_event.element.expand();
    } else {
        p_event.element.contract();
    }
}

</t>
<t tx="felix.20201214202627.1">/**
 * * Handle the change of visibility of either outline treeview and refresh it if its visible
 * @param p_event The treeview-visibility-changed event passed by vscode
 * @param p_explorerView Flag to signify that the treeview who triggered this event is the one in the explorer view
 */
private _onTreeViewVisibilityChanged(p_event: vscode.TreeViewVisibilityChangeEvent, p_explorerView: boolean): void {
    if (p_event.visible) {
        this._lastTreeView = p_explorerView ? this._leoTreeExView : this._leoTreeView;
        this._refreshOutline(true, RevealType.RevealSelect);

        // * This gies error Data tree node not found
        // const c = g.app.windowList[this.frameIndex].c;
        // let q_reveal: Thenable&lt;void&gt; | undefined;
        // q_reveal = this._lastTreeView.reveal(c.p).then(
        //     () =&gt; { }, // Ok
        //     (p_error) =&gt; {
        //         console.log('_onTreeViewVisibilityChanged could not reveal');
        //     }
        // );
    }
}

</t>
<t tx="felix.20201214202631.1">/**
 * * Handle the change of visibility of either outline treeview and refresh it if its visible
 * @param p_event The treeview-visibility-changed event passed by vscode
 * @param p_explorerView Flags that the treeview who triggered this event is the one in the explorer view
 */
private _onDocTreeViewVisibilityChanged(p_event: vscode.TreeViewVisibilityChangeEvent, p_explorerView: boolean): void {
    if (p_explorerView) { } // (Facultative/unused) Do something different if explorer view is used
    if (p_event.visible) {
        this._lastLeoDocuments = p_explorerView ? this._leoDocumentsExplorer : this._leoDocuments;
        // TODO: Check if needed
        // this.refreshDocumentsPane(); // List may not have changed, but it's selection may have
    }
}

</t>
<t tx="felix.20201214202634.1">/**
 * * Handle the change of visibility of either outline treeview and refresh it if its visible
 * @param p_event The treeview-visibility-changed event passed by vscode
 * @param p_explorerView Flags that the treeview who triggered this event is the one in the explorer view
 */
private _onButtonsTreeViewVisibilityChanged(p_event: vscode.TreeViewVisibilityChangeEvent, p_explorerView: boolean): void {
    if (p_explorerView) { } // (Facultative/unused) Do something different if explorer view is used
    if (p_event.visible) {
        this._lastLeoButtons = p_explorerView ? this._leoButtonsExplorer : this._leoButtons;
        // TODO: Check if needed
        // this._leoButtonsProvider.refreshTreeRoot(); // May not need to set selection...?
    }
}

</t>
<t tx="felix.20201214202749.1">/**
 * * Called by UI when the user selects in the tree (click or 'open aside' through context menu)
 * @param p_node is the position node selected in the tree
 * @param p_aside flag meaning it's body should be shown in a new editor column
 * @returns thenable for reveal to finish or select position to finish
 */
public selectTreeNode(p_node: Position, p_aside?: boolean): Thenable&lt;unknown&gt; {
    const c = g.app.windowList[this.frameIndex].c;
    // Note: set context flags for current selection when capturing and revealing the selected node
    // when the tree refreshes and the selected node is processed by getTreeItem &amp; gotSelectedNode
    let q_reveal: Thenable&lt;void&gt; | undefined;

    if (c.positionExists(p_node)) {

        if (p_aside) {
            q_reveal = this._lastTreeView.reveal(p_node).then(
                () =&gt; { }, // Ok
                (p_error) =&gt; {
                    console.log('selectTreeNode could not reveal');
                }
            );
        }
        c.selectPosition(p_node);
        // Set flags here - not only when 'got selection' is reached.
        this.leoStates.setSelectedNodeFlags(p_node);
        this._refreshType.states = true;
        this.getStates(); //  setLeoStateFlags gets called too

    } else {
        console.error('Selected a non-existent position', p_node.h);
    }

    // this.lastSelectedNode = p_node;

    return q_reveal ? q_reveal : Promise.resolve(true);
}

</t>
<t tx="felix.20201214202755.1">/**
 * Leo Command
 * @param p_cmd Command name string
 * @param p_node facultative, precise node onto which the command is run (also see p_keepSelection)
 * @param p_refreshType Object containing flags for sections needing to refresh after command ran
 * @param p_fromOutline flag to bring back focus on outline afterward
 * @param p_keepSelection flags to bring back selection on the original node before command ran
 */
public async command(
    p_cmd: string,
    p_node: Position | undefined,
    p_refreshType: ReqRefresh,
    p_fromOutline: boolean,
    p_keepSelection?: boolean
): Promise&lt;unknown&gt; {
    this.lastCommandTimer = process.hrtime();
    if (this.commandTimer === undefined) {
        this.commandTimer = this.lastCommandTimer;
    }
    this.lastCommandRefreshTimer = this.lastCommandTimer;
    if (this.commandRefreshTimer === undefined) {
        this.commandRefreshTimer = this.lastCommandTimer;
    }

    await this._triggerSave();

    const c = g.app.windowList[this.frameIndex].c;
    this._setupRefresh(p_fromOutline, p_refreshType);

    let value: any = undefined;
    const p = p_node ? p_node : c.p;

    if (p.__eq__(c.p)) {
        value = c.doCommandByName(p_cmd); // no need for re-selection
    } else {
        const old_p = c.p;
        c.selectPosition(p);
        value = c.doCommandByName(p_cmd);
        if (p_keepSelection &amp;&amp; c.positionExists(old_p)) {
            // Only if 'keep' old position was set, and old_p still exists
            c.selectPosition(old_p);
        }
    }
    if (this.trace) {
        if (this.lastCommandTimer) {
            console.log('lastCommandTimer', utils.getDurationMs(this.lastCommandTimer));
        }
    }
    this.lastCommandTimer = undefined;

    if (!this.preventRefresh) {
        this.launchRefresh();
    } else {
        this.preventRefresh = false;
    }

    return Promise.resolve(value);
}

</t>
<t tx="felix.20201214202757.1">/**
 * Opens quickPick minibuffer pallette to choose from all commands in this file's Thenable
 * @returns Thenable from the command resolving - or resolve with undefined if cancelled
 */
public minibuffer(): Thenable&lt;unknown&gt; {
    this._setupRefresh(false, { tree: true, body: true, documents: true, buttons: true, states: true });

    return this.triggerBodySave(false)
        .then((p_saveResults) =&gt; {
            const c = g.app.windowList[this.frameIndex].c;
            const commands: vscode.QuickPickItem[] = [];
            for (let key in c.commandsDict) {
                const command = c.commandsDict[key];
                // Going to get replaced
                if (!(command as any).__name__.startsWith('async-')) {
                    commands.push({
                        label: key,
                        detail: (command as any).__doc__
                    });
                }
            }
            commands.sort((a, b) =&gt; {
                return a.label === b.label ? 0 : (a.label &gt; b.label ? 1 : -1);
            });
            const w_options: vscode.QuickPickOptions = {
                placeHolder: Constants.USER_MESSAGES.MINIBUFFER_PROMPT,
                matchOnDetail: true,
            };
            return vscode.window.showQuickPick(commands, w_options);
        }).then((p_picked) =&gt; {
            if (
                p_picked &amp;&amp;
                p_picked.label &amp;&amp;
                Constants.MINIBUFFER_OVERRIDDEN_COMMANDS[p_picked.label]
            ) {
                return vscode.commands.executeCommand(
                    Constants.MINIBUFFER_OVERRIDDEN_COMMANDS[p_picked.label]
                );
            }
            if (p_picked &amp;&amp;
                p_picked.label &amp;&amp;
                Constants.MINIBUFFER_OVERRIDDEN_NAMES[p_picked.label]) {
                p_picked.label = Constants.MINIBUFFER_OVERRIDDEN_NAMES[p_picked.label];
            }
            if (p_picked &amp;&amp; p_picked.label) {
                const c = g.app.windowList[this.frameIndex].c;
                const w_commandResult = c.doCommandByName(p_picked.label);

                if (!this.preventRefresh) {
                    this.launchRefresh();
                } else {
                    this.preventRefresh = false;
                }

                return Promise.resolve(w_commandResult);
            } else {
                // Canceled
                return Promise.resolve(undefined);
            }
        });
}

</t>
<t tx="felix.20201214202759.1">/**
 * * Asks for a new headline label, and replaces the current label with this new one one the specified, or currently selected node
 * @param p_node Specifies which node to rename, or leave undefined to rename the currently selected node
 * @param p_fromOutline Signifies that the focus was, and should be brought back to, the outline
 * @returns Thenable that resolves when done
 */
public editHeadline(p_node?: Position, p_fromOutline?: boolean): Thenable&lt;unknown&gt; {
    this._setupRefresh(!!p_fromOutline, { tree: true, states: true });

    const c = g.app.windowList[this.frameIndex].c;
    const u = c.undoer;
    if (!p_node) {
        p_node = c.p; // Current selection
    }
    this._headlineInputOptions.prompt =
        Constants.USER_MESSAGES.PROMPT_EDIT_HEADLINE;
    this._headlineInputOptions.value = p_node.h; // preset input pop up
    return vscode.window.showInputBox(this._headlineInputOptions).then((p_newHeadline) =&gt; {
        if (p_newHeadline &amp;&amp; p_newHeadline !== "\n") {
            let w_truncated = false;
            if (p_newHeadline.indexOf("\n") &gt;= 0) {
                p_newHeadline = p_newHeadline.split("\n")[0];
                w_truncated = true;
            }
            if (p_newHeadline.length &gt; 1000) {
                p_newHeadline = p_newHeadline.substring(0, 1000);
                w_truncated = true;
            }

            if (p_newHeadline &amp;&amp; p_node &amp;&amp; p_node.h !== p_newHeadline) {
                if (w_truncated) {
                    vscode.window.showInformationMessage("Truncating headline");
                }

                const undoData = u.beforeChangeHeadline(p_node);
                c.setHeadString(p_node, p_newHeadline);  // Set v.h *after* calling the undoer's before method.
                if (!c.changed) {
                    c.setChanged();
                }
                u.afterChangeHeadline(p_node, 'Edit Headline', undoData);
                this.launchRefresh();
                // if edited and accepted
                return Promise.resolve(true);
            }

        } else {
            if (p_fromOutline) {
                this.showOutline(true);
            }
            return Promise.resolve(undefined); // if cancelled or unchanged
        }
    });
}

</t>
<t tx="felix.20201214202800.1">/**
 * * Asks for a headline label to be entered and creates (inserts) a new node under the current, or specified, node
 * @param p_node specified under which node to insert, or leave undefined to use whichever is currently selected
 * @param p_fromOutline Signifies that the focus was, and should be brought back to, the outline
 * @param p_interrupt Signifies the insert action is actually interrupting itself (e.g. rapid CTRL+I actions by the user)
 * @returns Thenable that resolves when done
 */
public insertNode(p_node: Position | undefined, p_fromOutline: boolean, p_interrupt: boolean, p_asChild: boolean): Thenable&lt;unknown&gt; {
    let w_fromOutline: boolean = !!p_fromOutline; // Use w_fromOutline for where we intend to leave focus when done with the insert

    if (p_interrupt) {
        this._focusInterrupt = true;
        w_fromOutline = this._fromOutline; // Going to use last state
    }
    this.triggerBodySave(true); // Don't wait for saving to resolve because we're waiting for user input anyways
    this._headlineInputOptions.prompt = Constants.USER_MESSAGES.PROMPT_INSERT_NODE;
    this._headlineInputOptions.value = Constants.USER_MESSAGES.DEFAULT_HEADLINE;


    return vscode.window.showInputBox(this._headlineInputOptions).then((p_newHeadline) =&gt; {
        // * if node has child and is expanded: turn p_asChild to true!

        this.lastCommandTimer = process.hrtime();
        if (this.commandTimer === undefined) {
            this.commandTimer = this.lastCommandTimer;
        }
        this.lastCommandRefreshTimer = this.lastCommandTimer;
        if (this.commandRefreshTimer === undefined) {
            this.commandRefreshTimer = this.lastCommandTimer;
        }

        const c = g.app.windowList[this.frameIndex].c;

        let value: any = undefined;
        const p = p_node ? p_node : c.p;

        if (p.__eq__(c.p)) {
            this._setupRefresh(w_fromOutline, { tree: true, body: true, documents: true, buttons: true, states: true });
            this._insertAndSetHeadline(p_newHeadline, p_asChild); // no need for re-selection
        } else {
            const old_p = c.p;  // c.p is old already selected
            c.selectPosition(p); // p is now the new one to be operated on
            this._insertAndSetHeadline(p_newHeadline, p_asChild);
            // Only if 'keep' old position was needed (specified with a p_node parameter), and old_p still exists
            if (!!p_node &amp;&amp; c.positionExists(old_p)) {
                // no need to refresh body
                this._setupRefresh(w_fromOutline, { tree: true, documents: true, buttons: true, states: true });
                c.selectPosition(old_p);
            } else {
                this._setupRefresh(w_fromOutline, { tree: true, body: true, documents: true, buttons: true, states: true });
            }
        }
        if (this.trace) {
            if (this.lastCommandTimer) {
                console.log('lastCommandTimer', utils.getDurationMs(this.lastCommandTimer));
            }
        }
        this.lastCommandTimer = undefined;
        this.launchRefresh();
        return Promise.resolve(value);
    });
}

</t>
<t tx="felix.20201214205159.1">@language json
@tabwidth -2
{
  "name": "leojs",
  "displayName": "Leo Editor for Visual Studio Code",
  "description": "Leo, the literate editor with outline extension for Visual Studio Code.",
  "version": "0.1.2",
  "publisher": "boltex",
  "author": {
    "name": "Félix"
  },
  "license": "SEE LICENSE IN LICENSE",
  "repository": {
    "type": "git",
    "url": "https://github.com/boltex/leojs"
  },
  "engines": {
    "vscode": "^1.67.0"
  },
  "keywords": [
    "leo",
    "literate",
    "tree",
    "outline",
    "programming"
  ],
  "categories": [
    "Other"
  ],
  "icon": "resources/leoapp128px.png",
  "galleryBanner": {
    "color": "#f1af88",
    "theme": "light"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "qna": false,
  "main": "./dist/extension-node",
  "browser": "./dist/extension-web",
  "contributes": {
    &lt;&lt; contributes &gt;&gt;
  },
  "scripts": {
    &lt;&lt; scripts &gt;&gt;
  },
  "devDependencies": {
    &lt;&lt; devDependencies &gt;&gt;
  },
  "dependencies": {
    "bowser": "^2.11.0",
    &lt;&lt; dependencies &gt;&gt;
  }
}
</t>
<t tx="felix.20201214205159.10">{
  "command": "leojs.openLeoFile",
  "title": "Open Leo File",
  "category": "Leojs",
  "icon": {
    "light": "resources/light/folder.svg",
    "dark": "resources/dark/folder.svg"
  }
},
{
  "command": "leojs.recentLeoFiles",
  "category": "Leojs",
  "title": "Recent Files"
},
{
  "command": "leojs.switchLeoFile",
  "title": "Switch Leo File",
  "category": "Leojs",
  "icon": {
    "light": "resources/light/switch.svg",
    "dark": "resources/dark/switch.svg"
  }
},
{
  "command": "leojs.newLeoFile",
  "title": "New Leo File",
  "category": "Leojs",
  "icon": {
    "light": "resources/light/new-file.svg",
    "dark": "resources/dark/new-file.svg"
  }
},
{
  "command": "leojs.closeLeoFile",
  "title": "Close Leo File",
  "category": "Leojs",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
{
  "command": "leojs.saveLeoFile",
  "category": "Leojs",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
{
  "command": "leojs.saveLeoFileFromOutline",
  "category": "Leojs",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
{
  "command": "leojs.saveAsLeoFile",
  "category": "Leojs",
  "title": "Save Leo File as...",
  "icon": {
    "light": "resources/light/save-as.svg",
    "dark": "resources/dark/save-as.svg"
  }
},
{
  "command": "leojs.saveAsLeoJsFile",
  "category": "Leojs",
  "title": "Save as leojs JSON File...",
  "icon": {
    "light": "resources/light/save-as-leojs.svg",
    "dark": "resources/dark/save-as-leojs.svg"
  }
},
{
  "command": "leojs.refreshFromDisk",
  "category": "Leojs",
  "title": "Refresh from Disk",
  "icon": {
    "light": "resources/light/refresh.svg",
    "dark": "resources/dark/refresh.svg"
  }
},
{
  "command": "leojs.refreshFromDiskSelection",
  "category": "Leojs",
  "title": "Refresh from Disk",
  "icon": {
    "light": "resources/light/refresh.svg",
    "dark": "resources/dark/refresh.svg"
  }
},
{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "category": "Leojs",
  "title": "Refresh from Disk",
  "icon": {
    "light": "resources/light/refresh.svg",
    "dark": "resources/dark/refresh.svg"
  }
},
{
  "command": "leojs.writeAtFileNodes",
  "category": "Leojs",
  "title": "Write @&lt;file&gt; Nodes"
},
{
  "command": "leojs.writeAtFileNodesFromOutline",
  "category": "Leojs",
  "title": "Write @&lt;file&gt; Nodes"
},
{
  "command": "leojs.writeDirtyAtFileNodes",
  "category": "Leojs",
  "title": "Write Dirty @&lt;file&gt; Nodes"
},
{
  "command": "leojs.writeDirtyAtFileNodesFromOutline",
  "category": "Leojs",
  "title": "Write Dirty @&lt;file&gt; Nodes"
},
{
  "command": "leojs.gitDiff",
  "category": "Leojs",
  "title": "Git Diff"
},
</t>
<t tx="felix.20201214205159.11">{
  "command": "leojs.openAside",
  "category": "Leojs",
  "title": "Open to the Side"
},
{
  "command": "leojs.contractAll",
  "category": "Leojs",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
{
  "command": "leojs.contractAllFromOutline",
  "category": "Leojs",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
{
  "command": "leojs.prev",
  "category": "Leojs",
  "title": "Prev",
  "icon": {
    "light": "resources/light/prev.svg",
    "dark": "resources/dark/prev.svg"
  }
},
{
  "command": "leojs.prevDisabled",
  "category": "Leojs",
  "title": "Can't go back",
  "icon": {
    "light": "resources/light/prev-disabled.svg",
    "dark": "resources/dark/prev-disabled.svg"
  }
},
{
  "command": "leojs.prevFromOutline",
  "category": "Leojs",
  "title": "Prev",
  "icon": {
    "light": "resources/light/prev.svg",
    "dark": "resources/dark/prev.svg"
  }
},
{
  "command": "leojs.next",
  "category": "Leojs",
  "title": "Next",
  "icon": {
    "light": "resources/light/next.svg",
    "dark": "resources/dark/next.svg"
  }
},
{
  "command": "leojs.nextDisabled",
  "category": "Leojs",
  "title": "Can't go forward",
  "icon": {
    "light": "resources/light/next-disabled.svg",
    "dark": "resources/dark/next-disabled.svg"
  }
},
{
  "command": "leojs.nextFromOutline",
  "category": "Leojs",
  "title": "Next",
  "icon": {
    "light": "resources/light/next.svg",
    "dark": "resources/dark/next.svg"
  }
},
</t>
<t tx="felix.20201214205159.12">{
  "command": "leojs.editHeadline",
  "category": "Leojs",
  "title": "Edit Headline",
  "icon": {
    "light": "resources/light/edit.svg",
    "dark": "resources/dark/edit.svg"
  }
},
{
  "command": "leojs.editSelectedHeadline",
  "category": "Leojs",
  "title": "Edit Headline"
},
{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "category": "Leojs",
  "title": "Edit Headline"
},
</t>
<t tx="felix.20201214205159.13">{
  "command": "leojs.mark",
  "category": "Leojs",
  "title": "Mark",
  "icon": {
    "light": "resources/light/mark.svg",
    "dark": "resources/dark/mark.svg"
  }
},
{
  "command": "leojs.markSelection",
  "category": "Leojs",
  "title": "Mark",
  "icon": {
    "light": "resources/light/mark.svg",
    "dark": "resources/dark/mark.svg"
  }
},
{
  "command": "leojs.markSelectionFromOutline",
  "category": "Leojs",
  "title": "Mark"
},
{
  "command": "leojs.unmark",
  "category": "Leojs",
  "title": "Unmark",
  "icon": {
    "light": "resources/light/unmark.svg",
    "dark": "resources/dark/unmark.svg"
  }
},
{
  "command": "leojs.unmarkSelection",
  "category": "Leojs",
  "title": "Unmark",
  "icon": {
    "light": "resources/light/unmark.svg",
    "dark": "resources/dark/unmark.svg"
  }
},
{
  "command": "leojs.unmarkSelectionFromOutline",
  "category": "Leojs",
  "title": "Unmark"
},
{
  "command": "leojs.unmarkAll",
  "category": "Leojs",
  "title": "Unmark All"
},
</t>
<t tx="felix.20201214205159.14">{
  "command": "leojs.copyNode",
  "category": "Leojs",
  "title": "Copy Node",
  "icon": {
    "light": "resources/light/clipboard.svg",
    "dark": "resources/dark/clipboard.svg"
  }
},
{
  "command": "leojs.copyNodeSelection",
  "category": "Leojs",
  "title": "Copy Node",
  "icon": {
    "light": "resources/light/clipboard.svg",
    "dark": "resources/dark/clipboard.svg"
  }
},
{
  "command": "leojs.cutNode",
  "category": "Leojs",
  "title": "Cut Node"
},
{
  "command": "leojs.cutNodeSelection",
  "category": "Leojs",
  "title": "Cut Node",
  "icon": {
    "light": "resources/light/cut.svg",
    "dark": "resources/dark/cut.svg"
  }
},
{
  "command": "leojs.cutNodeSelectionFromOutline",
  "category": "Leojs",
  "title": "Cut Node"
},
{
  "command": "leojs.pasteNode",
  "category": "Leojs",
  "title": "Paste Node"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "category": "Leojs",
  "title": "Paste Node",
  "icon": {
    "light": "resources/light/paste.svg",
    "dark": "resources/dark/paste.svg"
  }
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "category": "Leojs",
  "title": "Paste Node"
},
{
  "command": "leojs.pasteNodeAsClone",
  "category": "Leojs",
  "title": "Paste Node as Clone"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "category": "Leojs",
  "title": "Paste Node as Clone",
  "icon": {
    "light": "resources/light/paste-clone.svg",
    "dark": "resources/dark/paste-clone.svg"
  }
},
{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "category": "Leojs",
  "title": "Paste Node as Clone"
},
{
  "command": "leojs.delete",
  "category": "Leojs",
  "title": "Delete",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
{
  "command": "leojs.deleteSelection",
  "category": "Leojs",
  "title": "Delete Node",
  "icon": {
    "light": "resources/light/delete.svg",
    "dark": "resources/dark/delete.svg"
  }
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "category": "Leojs",
  "title": "Delete Node"
},
{
</t>
<t tx="felix.20201214205159.15">  "command": "leojs.extract",
  "category": "Leojs",
  "title": "Extract",
  "icon": {
    "light": "resources/light/extract.svg",
    "dark": "resources/dark/extract.svg"
  }
},
{
  "command": "leojs.extractNames",
  "category": "Leojs",
  "title": "Extract Names",
  "icon": {
    "light": "resources/light/extract-name.svg",
    "dark": "resources/dark/extract-name.svg"
  }
},
</t>
<t tx="felix.20201214205159.16">{
  "command": "leojs.moveOutlineDown",
  "category": "Leojs",
  "title": "Move Outline Down",
  "icon": {
    "light": "resources/light/arrow-down.svg",
    "dark": "resources/dark/arrow-down.svg"
  }
},
{
  "command": "leojs.moveOutlineDownSelection",
  "category": "Leojs",
  "title": "Move Outline Down"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "category": "Leojs",
  "title": "Move Outline Down"
},
{
  "command": "leojs.moveOutlineLeft",
  "category": "Leojs",
  "title": "Move Outline Left",
  "icon": {
    "light": "resources/light/arrow-left.svg",
    "dark": "resources/dark/arrow-left.svg"
  }
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "category": "Leojs",
  "title": "Move Outline Left"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "category": "Leojs",
  "title": "Move Outline Left"
},
{
  "command": "leojs.moveOutlineRight",
  "category": "Leojs",
  "title": "Move Outline Right",
  "icon": {
    "light": "resources/light/arrow-right.svg",
    "dark": "resources/dark/arrow-right.svg"
  }
},
{
  "command": "leojs.moveOutlineRightSelection",
  "category": "Leojs",
  "title": "Move Outline Right"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "category": "Leojs",
  "title": "Move Outline Right"
},
{
  "command": "leojs.moveOutlineUp",
  "category": "Leojs",
  "title": "Move Outline Up",
  "icon": {
    "light": "resources/light/arrow-up.svg",
    "dark": "resources/dark/arrow-up.svg"
  }
},
{
  "command": "leojs.moveOutlineUpSelection",
  "category": "Leojs",
  "title": "Move Outline Up"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "category": "Leojs",
  "title": "Move Outline Up"
},
</t>
<t tx="felix.20201214205159.17">{
  "command": "leojs.insertNode",
  "category": "Leojs",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertChildNode",
  "category": "Leojs",
  "title": "Insert Child",
  "icon": {
    "light": "resources/light/insert-child.svg",
    "dark": "resources/dark/insert-child.svg"
  }
},
{
  "command": "leojs.insertNodeSelection",
  "category": "Leojs",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertChildNodeSelection",
  "category": "Leojs",
  "title": "Insert Child",
  "icon": {
    "light": "resources/light/insert-child.svg",
    "dark": "resources/dark/insert-child.svg"
  }
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "category": "Leojs",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertChildNodeSelectionFromOutline",
  "category": "Leojs",
  "title": "Insert Child",
  "icon": {
    "light": "resources/light/insert-child.svg",
    "dark": "resources/dark/insert-child.svg"
  }
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "category": "Leojs",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertChildNodeSelectionInterrupt",
  "category": "Leojs",
  "title": "Insert Child",
  "icon": {
    "light": "resources/light/insert-child.svg",
    "dark": "resources/dark/insert-child.svg"
  }
},
{
  "command": "leojs.cloneNode",
  "category": "Leojs",
  "title": "Clone Node",
  "icon": {
    "light": "resources/light/link.svg",
    "dark": "resources/dark/link.svg"
  }
},
{
  "command": "leojs.cloneNodeSelection",
  "category": "Leojs",
  "title": "Clone Node",
  "icon": {
    "light": "resources/light/link.svg",
    "dark": "resources/dark/link.svg"
  }
},
{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "category": "Leojs",
  "title": "Clone Node",
  "icon": {
    "light": "resources/light/link.svg",
    "dark": "resources/dark/link.svg"
  }
},
{
  "command": "leojs.promote",
  "category": "Leojs",
  "title": "Promote Children",
  "icon": {
    "light": "resources/light/promote.svg",
    "dark": "resources/dark/promote.svg"
  }
},
{
  "command": "leojs.promoteDisabled",
  "category": "Leojs",
  "title": "Can't Promote",
  "icon": {
    "light": "resources/light/promote-disabled.svg",
    "dark": "resources/dark/promote-disabled.svg"
  }
},
{
  "command": "leojs.promoteSelection",
  "category": "Leojs",
  "title": "Promote Children",
  "icon": {
    "light": "resources/light/promote.svg",
    "dark": "resources/dark/promote.svg"
  }
},
{
  "command": "leojs.promoteSelectionFromOutline",
  "category": "Leojs",
  "title": "Promote Children",
  "icon": {
    "light": "resources/light/promote.svg",
    "dark": "resources/dark/promote.svg"
  }
},
{
  "command": "leojs.demote",
  "category": "Leojs",
  "title": "Demote Siblings",
  "icon": {
    "light": "resources/light/demote.svg",
    "dark": "resources/dark/demote.svg"
  }
},
{
  "command": "leojs.demoteDisabled",
  "category": "Leojs",
  "title": "Can't Demote",
  "icon": {
    "light": "resources/light/demote-disabled.svg",
    "dark": "resources/dark/demote-disabled.svg"
  }
},
{
  "command": "leojs.demoteSelection",
  "category": "Leojs",
  "title": "Demote Siblings",
  "icon": {
    "light": "resources/light/demote.svg",
    "dark": "resources/dark/demote.svg"
  }
},
{
  "command": "leojs.demoteSelectionFromOutline",
  "category": "Leojs",
  "title": "Demote Siblings",
  "icon": {
    "light": "resources/light/demote.svg",
    "dark": "resources/dark/demote.svg"
  }
},
{
  "command": "leojs.sortChildrenSelection",
  "category": "Leojs",
  "title": "Sort Children"
},
{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "category": "Leojs",
  "title": "Sort Children"
},
{
  "command": "leojs.sortSiblingsSelection",
  "category": "Leojs",
  "title": "Sort Siblings",
  "icon": {
    "light": "resources/light/sort.svg",
    "dark": "resources/dark/sort.svg"
  }
},
{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "category": "Leojs",
  "title": "Sort Siblings",
  "icon": {
    "light": "resources/light/sort.svg",
    "dark": "resources/dark/sort.svg"
  }
},
</t>
<t tx="felix.20201214205159.18">{
  "command": "leojs.gotoFirstVisible",
  "category": "Leojs",
  "title": "Goto First Visible"
},
{
  "command": "leojs.gotoLastVisible",
  "category": "Leojs",
  "title": "Goto Last Visible"
},
{
  "command": "leojs.pageUp",
  "category": "Leojs",
  "title": "Page Up"
},
{
  "command": "leojs.pageDown",
  "category": "Leojs",
  "title": "Page Down"
},
{
  "command": "leojs.gotoLastSibling",
  "category": "Leojs",
  "title": "Goto Last Sibling"
},
{
  "command": "leojs.gotoNextVisible",
  "category": "Leojs",
  "title": "Goto Next Visible"
},
{
  "command": "leojs.gotoPrevVisible",
  "category": "Leojs",
  "title": "Goto Prev Visible"
},
{
  "command": "leojs.contractOrGoLeft",
  "category": "Leojs",
  "title": "Contract Or Go Left"
},
{
  "command": "leojs.expandAndGoRight",
  "category": "Leojs",
  "title": "Expand And Go Right"
},
{
  "command": "leojs.gotoNextMarked",
  "category": "Leojs",
  "title": "Goto Next Marked"
},
{
  "command": "leojs.gotoNextClone",
  "category": "Leojs",
  "title": "Goto Next Clone"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "category": "Leojs",
  "title": "Goto Next Clone"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "category": "Leojs",
  "title": "Goto Next Clone"
},
</t>
<t tx="felix.20201214205159.19">{
  "command": "leojs.hoistNode",
  "category": "Leojs",
  "title": "Hoist",
  "icon": {
    "light": "resources/light/hoist.svg",
    "dark": "resources/dark/hoist.svg"
  }
},
{
  "command": "leojs.hoistSelection",
  "category": "Leojs",
  "title": "Hoist",
  "icon": {
    "light": "resources/light/hoist.svg",
    "dark": "resources/dark/hoist.svg"
  }
},
{
  "command": "leojs.hoistDisabled",
  "category": "Leojs",
  "title": "Can't Hoist",
  "icon": {
    "light": "resources/light/hoist-disabled.svg",
    "dark": "resources/dark/hoist-disabled.svg"
  }
},
{
  "command": "leojs.hoistSelectionFromOutline",
  "category": "Leojs",
  "title": "Hoist",
  "icon": {
    "light": "resources/light/hoist.svg",
    "dark": "resources/dark/hoist.svg"
  }
},
{
  "command": "leojs.deHoist",
  "category": "Leojs",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
{
  "command": "leojs.deHoistDisabled",
  "category": "Leojs",
  "title": "Can't De-Hoist",
  "icon": {
    "light": "resources/light/dehoist-disabled.svg",
    "dark": "resources/dark/dehoist-disabled.svg"
  }
},
{
  "command": "leojs.deHoistFromOutline",
  "category": "Leojs",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
</t>
<t tx="felix.20201214205159.2">@others
</t>
<t tx="felix.20201214205159.20">{
  "command": "leojs.undo",
  "category": "Leojs",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
{
  "command": "leojs.undoDisabled",
  "category": "Leojs",
  "title": "Can't Undo",
  "icon": {
    "light": "resources/light/undo-disabled.svg",
    "dark": "resources/dark/undo-disabled.svg"
  }
},
{
  "command": "leojs.undoFromOutline",
  "category": "Leojs",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
{
  "command": "leojs.redo",
  "category": "Leojs",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
{
  "command": "leojs.redoDisabled",
  "category": "Leojs",
  "title": "Can't Redo",
  "icon": {
    "light": "resources/light/redo-disabled.svg",
    "dark": "resources/dark/redo-disabled.svg"
  }
},
{
  "command": "leojs.redoFromOutline",
  "category": "Leojs",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
</t>
<t tx="felix.20201214205159.21">{
  "command": "leojs.cloneFindAll",
  "category": "Leojs",
  "title": "Clone Find All"
},
{
  "command": "leojs.cloneFindAllFlattened",
  "category": "Leojs",
  "title": "Clone Find All Flattened"
},
{
  "command": "leojs.cloneFindMarked",
  "category": "Leojs",
  "shortTitle": "cfam",
  "title": "cfam - Clone Find All Marked Nodes"
},
{
  "command": "leojs.cloneFindFlattenedMarked",
  "category": "Leojs",
  "shortTitle": "cffm",
  "title": "cffm - Clone Find Flattened Marked"
},
</t>
<t tx="felix.20201214205159.22">{
  "command": "leojs.copyMarked",
  "category": "Leojs",
  "title": "Copy Marked"
},
{
  "command": "leojs.diffMarkedNodes",
  "category": "Leojs",
  "title": "Diff Marked Nodes"
},
{
  "command": "leojs.markChangedItems",
  "category": "Leojs",
  "title": "Mark Changed Items"
},
{
  "command": "leojs.markSubheads",
  "category": "Leojs",
  "title": "Mark Subheads"
},
{
  "command": "leojs.cloneMarkedNodes",
  "category": "Leojs",
  "title": "Clone Marked Nodes"
},
{
  "command": "leojs.deleteMarkedNodes",
  "category": "Leojs",
  "title": "Delete Marked Nodes"
},
{
  "command": "leojs.moveMarkedNodes",
  "category": "Leojs",
  "title": "Move Marked Nodes"
}
</t>
<t tx="felix.20201214205159.23">"menus": {
  @others
},
</t>
<t tx="felix.20201214205159.24">"commandPalette": [
  @others
],
</t>
<t tx="felix.20201214205159.25">{
  "command": "leojs.executeScript",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.minibuffer",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.setLeoID",
  "when": "!leojsReady"
},
</t>
<t tx="felix.20201214205159.26">{
  "command": "leojs.showLogPane",
  "when": "leojsReady"
},
</t>
<t tx="felix.20201214205159.27">{
  "command": "leojs.openLeoFile",
  "when": "leojsReady"
},
{
  "command": "leojs.recentLeoFiles",
  "when": "leojsReady"
},
{
  "command": "leojs.switchLeoFile",
  "when": "leojsReady &amp;&amp; leojsTreeOpened"
},
{
  "command": "leojs.newLeoFile",
  "when": "leojsReady"
},
{
  "command": "leojs.closeLeoFile",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.saveLeoFile",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.saveAsLeoFile",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.refreshFromDiskSelection",
  "when": "leojsTreeOpened &amp;&amp; LeojsAtFile"
},
{
  "command": "leojs.writeAtFileNodes",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.writeDirtyAtFileNodes",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.gitDiff",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.28">{
  "command": "leojs.contractAll",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.29">{
  "command": "leojs.editSelectedHeadline",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.3">"viewsContainers": {
  "activitybar": [
    {
      "id": "leojsView",
      "title": "Leojs",
      "icon": "resources/icon.svg"
    }
  ]
},
</t>
<t tx="felix.20201214205159.30">{
  "command": "leojs.markSelection",
  "when": "leojsTreeOpened &amp;&amp; !leojsMarked"
},
{
  "command": "leojs.unmarkSelection",
  "when": "leojsTreeOpened &amp;&amp; leojsMarked"
},
{
  "command": "leojs.unmarkAll",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.31">{
  "command": "leojs.copyNodeSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cutNodeSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.deleteSelection",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.32">{
  "command": "leojs.extract",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.extractNames",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.33">{
  "command": "leojs.moveOutlineDownSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.moveOutlineRightSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.moveOutlineUpSelection",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.34">{
  "command": "leojs.insertNodeSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.insertChildNodeSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cloneNodeSelection",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.promoteSelection",
  "when": "leojsTreeOpened &amp;&amp; leojsCanPromote"
},
{
  "command": "leojs.demoteSelection",
  "when": "leojsTreeOpened &amp;&amp; leojsCanDemote"
},
{
  "command": "leojs.sortChildrenSelection",
  "when": "leojsTreeOpened &amp;&amp; leojsChild"
},
{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "when": "leojsTreeOpened &amp;&amp; leojsChild"
},
{
  "command": "leojs.sortSiblingsSelection",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.35">{
  "command": "leojs.gotoNextMarked",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "when": "leojsTreeOpened &amp;&amp; leojsCloned"
},
</t>
<t tx="felix.20201214205159.36">{
  "command": "leojs.hoistSelection",
  "when": "leojsTreeOpened &amp;&amp; !leojsRoot"
},
{
  "command": "leojs.deHoist",
  "when": "leojsTreeOpened &amp;&amp; leojsCanDehoist"
},
</t>
<t tx="felix.20201214205159.37">{
  "command": "leojs.undo",
  "when": "leojsTreeOpened &amp;&amp; leojsCanUndo"
},
{
  "command": "leojs.redo",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.38">{
  "command": "leojs.cloneFindAll",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cloneFindAllFlattened",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cloneFindMarked",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cloneFindFlattenedMarked",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.39">{
  "command": "leojs.copyMarked",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.diffMarkedNodes",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.markChangedItems",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.markSubheads",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.cloneMarkedNodes",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.deleteMarkedNodes",
  "when": "leojsTreeOpened"
},
{
  "command": "leojs.moveMarkedNodes",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.4">"views": {
  "explorer": [
    {
      "id": "leojsOutlineExplorer",
      "name": "Leojs Outline",
      "contextualTitle": "Leojs",
      "when": "leojsTreeInExplorer",
      "visibility": "visible"
    },
    {
      "id": "leojsDocumentsExplorer",
      "name": "Leojs Documents",
      "contextualTitle": "Leojs",
      "when": "leojsTreeInExplorer &amp;&amp; leojsTreeOpened",
      "visibility": "collapsed"
    },
    {
      "id": "leojsButtonsExplorer",
      "name": "Leojs Buttons",
      "contextualTitle": "Leojs",
      "when": "leojsTreeInExplorer &amp;&amp; leojsTreeOpened",
      "visibility": "collapsed"
    },
    {
      "id": "leojsUndosExplorer",
      "name": "Leojs Undo History",
      "contextualTitle": "Leojs",
      "when": "leojsTreeInExplorer &amp;&amp; leojsTreeOpened",
      "visibility": "collapsed"
    }
  ],
  "leojsView": [
    {
      "id": "leojsOutline",
      "contextualTitle": "Leojs",
      "name": "Outline",
      "visibility": "visible"
    },
    {
      "id": "leojsDocuments",
      "contextualTitle": "Leojs",
      "name": "Documents",
      "when": "leojsTreeOpened",
      "visibility": "collapsed"
    },
    {
      "id": "leojsButtons",
      "contextualTitle": "Leojs",
      "name": "Buttons",
      "when": "leojsTreeOpened",
      "visibility": "collapsed"
    },
    {
      "id": "leojsUndos",
      "contextualTitle": "Leojs",
      "name": "Undo History",
      "when": "leojsTreeOpened",
      "visibility": "collapsed"
    }
  ]
},
</t>
<t tx="felix.20201214205159.40">@others
</t>
<t tx="felix.20201214205159.42">{
  "command": "leojs.removeButton",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.43">{
  "command": "leojs.showBody",
  "when": "false"
},
{
  "command": "leojs.showOutline",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.44">{
  "command": "leojs.saveLeoFileFromOutline",
  "when": "false"
},
{
  "command": "leojs.refreshFromDisk",
  "when": "false"
},
{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.writeAtFileNodesFromOutline",
  "when": "false"
},
{
  "command": "leojs.writeDirtyAtFileNodesFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.45">{
  "command": "leojs.openAside",
  "when": "false"
},
{
  "command": "leojs.contractAllFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.46">{
  "command": "leojs.editHeadline",
  "when": "false"
},
{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.47">{
  "command": "leojs.mark",
  "when": "false"
},
{
  "command": "leojs.markSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.unmark",
  "when": "false"
},
{
  "command": "leojs.unmarkSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.48">{
  "command": "leojs.copyNode",
  "when": "false"
},
{
  "command": "leojs.cutNode",
  "when": "false"
},
{
  "command": "leojs.cutNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.pasteNode",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAsClone",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.delete",
  "when": "false"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.49">{
  "command": "leojs.moveOutlineDown",
  "when": "false"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineLeft",
  "when": "false"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineRight",
  "when": "false"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineUp",
  "when": "false"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.5">"viewsWelcome": [
  {
    "view": "leojsOutline",
    "contents": "Leo ID not found\n[Set Leo ID](command:leojs.setLeoID)\nPlease enter an id that identifies you uniquely",
    "when": "!leojsReady"
  },
  {
    "view": "leojsOutlineExplorer",
    "contents": "Leo ID not found\n[Set Leo ID](command:leojs.setLeoID)\nPlease enter an id that identifies you uniquely",
    "when": "!leojsReady"
  },
  {
    "view": "leojsOutline",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsOutlineExplorer",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsDocuments",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsDocumentsExplorer",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsButtons",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsButtonsExplorer",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsButtons",
    "contents": "There are no @buttons in this outline",
    "when": "leojsReady &amp;&amp; leojsTreeOpened"
  },
  {
    "view": "leojsButtonsExplorer",
    "contents": "There are no @buttons in this outline",
    "when": "leojsReady &amp;&amp; leojsTreeOpened"
  },
  {
    "view": "leojsUndos",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsUndosExplorer",
    "contents": "There are no Leo files currently opened",
    "when": "leojsReady &amp;&amp; !leojsTreeOpened"
  },
  {
    "view": "leojsUndos",
    "contents": "Can't undo",
    "when": "leojsReady &amp;&amp; leojsTreeOpened"
  },
  {
    "view": "leojsUndosExplorer",
    "contents": "Can't undo",
    "when": "leojsReady &amp;&amp; leojsTreeOpened"
  }
],
</t>
<t tx="felix.20201214205159.50">{
  "command": "leojs.insertNode",
  "when": "false"
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "when": "false"
},
{
  "command": "leojs.insertChildNode",
  "when": "false"
},
{
  "command": "leojs.insertChildNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.insertChildNodeSelectionInterrupt",
  "when": "false"
},
{
  "command": "leojs.cloneNode",
  "when": "false"
},
{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.promote",
  "when": "false"
},
{
  "command": "leojs.promoteSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.demote",
  "when": "false"
},
{
  "command": "leojs.demoteSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.51">{
  "command": "leojs.gotoNextClone",
  "when": "false"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.gotoFirstVisible",
  "when": "false"
},
{
  "command": "leojs.gotoLastVisible",
  "when": "false"
},
{
  "command": "leojs.gotoLastSibling",
  "when": "false"
},
{
  "command": "leojs.gotoNextVisible",
  "when": "false"
},
{
  "command": "leojs.gotoPrevVisible",
  "when": "false"
},
{
  "command": "leojs.contractOrGoLeft",
  "when": "false"
},
{
  "command": "leojs.expandAndGoRight",
  "when": "false"
},
{
  "command": "leojs.pageUp",
  "when": "false"
},
{
  "command": "leojs.pageDown",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.52">{
  "command": "leojs.hoistNode",
  "when": "false"
},
{
  "command": "leojs.hoistSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.deHoistFromOutline",
  "when": "false"
},
</t>
<t tx="felix.20201214205159.53">{
  "command": "leojs.undoFromOutline",
  "when": "false"
},
{
  "command": "leojs.redoFromOutline",
  "when": "false"
}
</t>
<t tx="felix.20201214205159.54">"explorer/context": [
  {
    "command": "leojs.openLeoFile",
    "when": "resourceScheme == file &amp;&amp; resourceExtname == .leo",
    "group": "navigation@1"
  }
],
</t>
<t tx="felix.20201214205159.55">"view/title": [
  {
    "command": "leojs.openLeoFile",
    "when": "view =~ /^leojsOutline|^leojsDocuments/ &amp;&amp; leojsReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.newLeoFile",
    "when": "view =~ /^leojsOutline|^leojsDocuments/ &amp;&amp; leojsReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "when": "view =~ /^leojsOutline|^leojsDocuments/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsTreeTitled",
    "group": "navigation@2"
  },
  {
    "command": "leojs.saveAsLeoFile",
    "when": "view =~ /^leojsOutline|^leojsDocuments/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsTreeTitled",
    "group": "navigation@2"
  },
  {
    "command": "leojs.prevFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanGoBack",
    "group": "navigation@3"
  },
  {
    "command": "leojs.prevDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanGoBack",
    "group": "navigation@3"
  },
  {
    "command": "leojs.nextFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanGoNext",
    "group": "navigation@4"
  },
  {
    "command": "leojs.nextDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanGoNext",
    "group": "navigation@4"
  },
  {
    "command": "leojs.undoFromOutline",
    "when": "view =~ /^leojsOutline|^leojsUndo/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanUndo",
    "group": "navigation@5"
  },
  {
    "command": "leojs.undoDisabled",
    "when": "view =~ /^leojsOutline|^leojsUndo/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanUndo",
    "group": "navigation@5"
  },
  {
    "command": "leojs.redoFromOutline",
    "when": "view =~ /^leojsOutline|^leojsUndo/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanRedo",
    "group": "navigation@6"
  },
  {
    "command": "leojs.redoDisabled",
    "when": "view =~ /^leojsOutline|^leojsUndo/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanRedo",
    "group": "navigation@6"
  },
  {
    "command": "leojs.deHoistFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanDehoist",
    "group": "navigation@7"
  },
  {
    "command": "leojs.deHoistDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanDehoist",
    "group": "navigation@7"
  },
  {
    "command": "leojs.hoistSelectionFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsRoot",
    "group": "navigation@8"
  },
  {
    "command": "leojs.hoistDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsRoot",
    "group": "navigation@8"
  },
  {
    "command": "leojs.promoteSelectionFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanPromote",
    "group": "navigation@9"
  },
  {
    "command": "leojs.promoteDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanPromote",
    "group": "navigation@9"
  },
  {
    "command": "leojs.demoteSelectionFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; leojsCanDemote",
    "group": "navigation@10"
  },
  {
    "command": "leojs.demoteDisabled",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened &amp;&amp; !leojsCanDemote",
    "group": "navigation@10"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "when": "view =~ /^leojsOutline/ &amp;&amp; leojsTreeOpened",
    "group": "navigation@11"
  }
],
</t>
<t tx="felix.20201214205159.56">"view/item/context": [
  @others
]
</t>
<t tx="felix.20201214205159.57">{
  "command": "leojs.editHeadline",
  "when": "leojsShowEditOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@1"
},
</t>
<t tx="felix.20201214205159.58">{
  "command": "leojs.insertNode",
  "when": "leojsShowAddOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@2"
},
</t>
<t tx="felix.20201214205159.59">{
  "command": "leojs.moveOutlineDown",
  "when": "leojsShowArrowsOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@3"
},
{
  "command": "leojs.moveOutlineLeft",
  "when": "leojsShowArrowsOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@3"
},
{
  "command": "leojs.moveOutlineRight",
  "when": "leojsShowArrowsOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@3"
},
{
  "command": "leojs.moveOutlineUp",
  "when": "leojsShowArrowsOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@3"
},
</t>
<t tx="felix.20201214205159.6">"commands": [
  @others
],
</t>
<t tx="felix.20201214205159.60">{
  "command": "leojs.copyNode",
  "when": "leojsShowCopyOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@4"
},
{
  "command": "leojs.cloneNode",
  "when": "leojsShowCloneOnNodes &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "inline@4"
},
</t>
<t tx="felix.20201214205159.61">{
  "command": "leojs.mark",
  "when": "leojsShowMarkOnNodes &amp;&amp; viewItem =~ /^leojsNodeUnmarked/",
  "group": "inline@5"
},
{
  "command": "leojs.unmark",
  "when": "leojsShowMarkOnNodes &amp;&amp; viewItem =~ /^leojsNodeMarked/",
  "group": "inline@5"
},
</t>
<t tx="felix.20201214205159.62">{
  "command": "leojs.openAside",
  "when": "leojsShowOpenAside &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext1@1"
},
</t>
<t tx="felix.20201214205159.63">{
  "command": "leojs.hoistNode",
  "when": "viewItem =~ /leojsNodeNotRoot/",
  "group": "leojsNodeContext1@2"
},
{
  "command": "leojs.deHoist",
  "when": "leojsCanDehoist &amp;&amp; viewItem =~ /leojsNodeRoot/",
  "group": "leojsNodeContext1@2"
},
</t>
<t tx="felix.20201214205159.64">{
  "command": "leojs.refreshFromDisk",
  "when": "viewItem =~ /leojsNodeAtFile/",
  "group": "leojsNodeContext1@3"
},
</t>
<t tx="felix.20201214205159.65">{
  "command": "leojs.mark",
  "when": "viewItem =~ /^leojsNodeUnmarked/",
  "group": "leojsNodeContext2@1"
},
{
  "command": "leojs.unmark",
  "when": "viewItem =~ /^leojsNodeMarked/",
  "group": "leojsNodeContext2@2"
},
</t>
<t tx="felix.20201214205159.66">{
  "command": "leojs.copyNode",
  "when": "viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext2@3"
},
{
  "command": "leojs.cutNode",
  "when": "viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext2@4"
},
{
  "command": "leojs.pasteNode",
  "when": "viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext2@5"
},
{
  "command": "leojs.pasteNodeAsClone",
  "when": "viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext2@6"
},
{
  "command": "leojs.delete",
  "when": "viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext2@7"
},
{
  "command": "leojs.insertNode",
  "when": "leojsTreeOpened &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext3@1"
},
{
  "command": "leojs.cloneNode",
  "when": "leojsTreeOpened &amp;&amp; viewItem =~ /^leojsNode/",
  "group": "leojsNodeContext3@2"
},
{
  "command": "leojs.gotoNextClone",
  "when": "leojsTreeOpened &amp;&amp; viewItem =~ /leojsNodeCloned/",
  "group": "leojsNodeContext3@3"
},
</t>
<t tx="felix.20201214205159.67">"keybindings": [
  @others
],
</t>
<t tx="felix.20201214205159.68">{
  "command": "leojs.executeScript",
  "key": "ctrl+b",
  "mac": "cmd+b",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs || leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.minibuffer",
  "key": "alt+x",
  "when": "leojsTreeOpened"
},
</t>
<t tx="felix.20201214205159.69">{
  "command": "leojs.showOutline",
  "key": "alt+t",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.showOutline",
  "key": "ctrl+t",
  "mac": "cmd+t",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.showBody",
  "key": "ctrl+t",
  "mac": "cmd+t",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.showBody",
  "key": "alt+d",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.showBody",
  "key": "ctrl+g",
  "mac": "cmd+g",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.showBody",
  "key": "tab",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.showBody",
  "key": "enter",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
</t>
<t tx="felix.20201214205159.70">{
  "command": "leojs.saveLeoFileFromOutline",
  "key": "ctrl+s",
  "mac": "cmd+s",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.saveLeoFile",
  "key": "ctrl+s",
  "mac": "cmd+s",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.newLeoFile",
  "key": "ctrl+n",
  "mac": "cmd+n",
  "when": "leojsReady &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.openLeoFile",
  "key": "ctrl+o",
  "mac": "cmd+o",
  "when": "leojsReady &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.writeAtFileNodes",
  "key": "ctrl+shift+w",
  "mac": "cmd+shift+w",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.writeAtFileNodesFromOutline",
  "key": "ctrl+shift+w",
  "mac": "cmd+shift+w",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.writeDirtyAtFileNodes",
  "key": "ctrl+shift+q",
  "mac": "cmd+shift+q",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.writeDirtyAtFileNodesFromOutline",
  "key": "ctrl+shift+q",
  "mac": "cmd+shift+q",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
</t>
<t tx="felix.20201214205159.71">{
  "command": "leojs.contractAll",
  "key": "alt+-",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.contractAllFromOutline",
  "key": "alt+-",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
</t>
<t tx="felix.20201214205159.72">{
  "command": "leojs.editSelectedHeadline",
  "key": "ctrl+h",
  "mac": "cmd+h",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "key": "ctrl+h",
  "mac": "cmd+h",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
</t>
<t tx="felix.20201214205159.73">{
  "command": "leojs.markSelection",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leojsTreeOpened &amp;&amp; !leojsMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.markSelectionFromOutline",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leojsTreeOpened &amp;&amp; !leojsMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
{
  "command": "leojs.unmarkSelection",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leojsTreeOpened &amp;&amp; leojsMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.unmarkSelectionFromOutline",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leojsTreeOpened &amp;&amp; leojsMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsButtons|^leojsUndos/"
},
</t>
<t tx="felix.20201214205159.74">{
  "command": "leojs.extract",
  "key": "ctrl+shift+d",
  "mac": "cmd+shift+d",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/ || leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.extractNames",
  "key": "ctrl+shift+n",
  "mac": "cmd+shift+n",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/ || leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leojs"
},
</t>
<t tx="felix.20201214205159.75">{
  "command": "leojs.moveOutlineDownSelection",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineDownSelection",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+down",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+left",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineRightSelection",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineRightSelection",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+right",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineUpSelection",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineUpSelection",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+up",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
</t>
<t tx="felix.20201214205159.76">{
  "command": "leojs.sortSiblingsSelection",
  "key": "alt+a",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "key": "alt+a",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.promoteSelection",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.promoteSelectionFromOutline",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.demoteSelection",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.demoteSelectionFromOutline",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.insertNodeSelection",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "!terminalFocus &amp;&amp; !panelFocus &amp;&amp; leojsTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
},
{
  "command": "leojs.insertNodeSelection",
  "key": "shift+insert",
  "mac": "shift+insert",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "key": "shift+insert",
  "mac": "shift+insert",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "key": "insert",
  "mac": "insert",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "key": "shift+insert",
  "mac": "shift+insert",
  "when": "!terminalFocus &amp;&amp; !panelFocus &amp;&amp; leojsTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
},
{
  "command": "leojs.insertChildNodeSelection",
  "key": "ctrl+insert",
  "mac": "cmd+insert",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.insertChildNodeSelectionFromOutline",
  "key": "ctrl+insert",
  "mac": "cmd+insert",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.insertChildNodeSelectionInterrupt",
  "key": "ctrl+insert",
  "mac": "cmd+insert",
  "when": "!terminalFocus &amp;&amp; !panelFocus &amp;&amp; leojsTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
},
{
  "command": "leojs.cloneNodeSelection",
  "key": "ctrl+`",
  "win": "ctrl+oem_3",
  "linux": "ctrl+`",
  "mac": "cmd+`",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "key": "ctrl+`",
  "win": "ctrl+oem_3",
  "linux": "ctrl+`",
  "mac": "cmd+`",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
</t>
<t tx="felix.20201214205159.77">{
  "command": "leojs.cutNodeSelection",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.cutNodeSelectionFromOutline",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.copyNodeSelection",
  "key": "ctrl+shift+c",
  "mac": "cmd+shift+c",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/ || leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.deleteSelection",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "key": "delete",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
</t>
<t tx="felix.20201214205159.78">{
  "command": "leojs.gotoFirstVisible",
  "key": "alt+home",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoLastSibling",
  "key": "alt+end",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoFirstVisible",
  "key": "home",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoLastVisible",
  "key": "end",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.pageUp",
  "key": "pageup",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.pageDown",
  "key": "pagedown",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "key": "alt+n",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "key": "alt+n",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "down",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "up",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "left",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "right",
  "when": "leojsLeoTreeBrowse &amp;&amp; leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline/"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments/"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leojsTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs"
}
</t>
<t tx="felix.20201214205159.79">"cleanup": "node ./cleanup.js",
"vscode:prepublish": "npm run package",
"compile": "webpack",
"compile-web": "webpack",
"open-in-browser": "node ./prepare.js &amp;&amp; vscode-test-web --browserType=chromium --extensionDevelopmentPath=. &amp;&amp; node ./cleanup.js",
"watch": "webpack --watch",
"watch-web": "webpack --watch",
"package": "webpack --mode production --devtool hidden-source-map",
"package-web": "webpack --mode production --devtool hidden-source-map",
"compile-tests": "tsc -p . --outDir out",
"watch-tests": "tsc -p . -w --outDir out",
"pretest": "npm run compile-tests &amp;&amp; npm run compile &amp;&amp; npm run lint",
"lint": "eslint src --ext ts",
"test": "node ./out/test/runTest.js",
"test-web": "node ./prepare.js &amp;&amp; vscode-test-web --extensionDevelopmentPath=. --extensionTestsPath=dist/test/suite/index-web.js &amp;&amp; node ./cleanup.js"
</t>
<t tx="felix.20201214205159.8">{
  "command": "leojs.executeScript",
  "category": "Leojs",
  "title": "Execute Script",
  "icon": {
    "light": "resources/light/execute.svg",
    "dark": "resources/dark/execute.svg"
  }
},
{
  "command": "leojs.minibuffer",
  "category": "Leojs",
  "title": "Minibuffer"
},
{
  "command": "leojs.gotoScript",
  "category": "Leo",
  "title": "Goto Script"
},
{
  "command": "leojs.removeButton",
  "category": "Leojs",
  "title": "Remove Button"
},
</t>
<t tx="felix.20201214205159.80">"@types/debounce": "^1.2.0",
"@types/elementtree": "^0.1.1",
"@types/glob": "^7.2.0",
"@types/lodash": "^4.14.177",
"@types/md5": "^2.3.1",
"@types/mocha": "^9.1.0",
"@types/node": "14.x",
"@types/vscode": "^1.67.0",
"@types/webpack-env": "^1.16.3",
"@typescript-eslint/eslint-plugin": "^5.16.0",
"@typescript-eslint/parser": "^5.16.0",
"@vscode/test-electron": "^2.0.3",
"@vscode/test-web": "^0.0.24",
"assert": "^2.0.0",
"eslint": "^8.11.0",
"glob": "^7.2.0",
"mocha": "^9.1.3",
"process": "^0.11.10",
"terser-webpack-plugin": "^5.3.1",
"ts-loader": "^9.2.6",
"typescript": "^4.5.5",
"webpack": "^5.70.0",
"webpack-cli": "^4.9.2",
"webpack-shell-plugin-next": "^2.2.2"
</t>
<t tx="felix.20201214205159.81">"browser-process-hrtime": "^1.0.0",
"console-browserify": "^1.2.0",
"crypto-browserify": "^3.12.0",
"date-format-lite": "^17.7.0",
"difflib": "^0.2.4",
"elementtree": "^0.1.7",
"lodash": "^4.17.21",
"md5": "^2.3.0",
"os-browserify": "^0.3.0",
"path-browserify": "^1.0.1",
"stream": "^0.0.2"
</t>
<t tx="felix.20201214205159.9">{
  "command": "leojs.setLeoID",
  "category": "Leojs",
  "title": "Set Leo ID"
},
{
  "command": "leojs.showBody",
  "category": "Leojs",
  "title": "Focus to Body"
},
{
  "command": "leojs.showOutline",
  "category": "Leojs",
  "title": "Focus to Tree"
},
{
  "command": "leojs.showLogPane",
  "category": "Leojs",
  "title": "Show Log Pane",
  "icon": {
    "light": "resources/light/show-log.svg",
    "dark": "resources/dark/show-log.svg"
  }
},
</t>
<t tx="felix.20201214211645.1">/**
* * Opens an an editor for the currently selected node: "this.bodyUri". If already opened, this just 'reveals' it
* @param p_aside Flag for opening the editor beside any currently opened and focused editor
* @param p_preserveFocus flag that when true will stop the editor from taking focus once opened
*/
public showBody(p_aside: boolean, p_preserveFocus?: boolean): Thenable&lt;vscode.TextEditor | undefined&gt; {
    const w_showOptions: vscode.TextDocumentShowOptions = p_aside ?
        {
            viewColumn: vscode.ViewColumn.Beside,
            preserveFocus: p_preserveFocus, // an optional flag that when true will stop the editor from taking focus
            preview: true // should text document be in preview only? set false for fully opened
            // selection is instead set when the GET_BODY_STATES above resolves
        } : {
            viewColumn: this._bodyMainSelectionColumn ? this._bodyMainSelectionColumn : 1, // view column in which the editor should be shown
            preserveFocus: p_preserveFocus, // an optional flag that when true will stop the editor from taking focus
            preview: false // should text document be in preview only? set false for fully opened
            // selection is instead set when the GET_BODY_STATES above resolves
        };

    // TODO : THIS IS PLACEHOLDER CODE
    if (this._bodyTextDocument) {
        return vscode.window.showTextDocument(this._bodyTextDocument, w_showOptions);
    } else {
        console.log('showBody: no _bodyTextDocument set to show');

        return Promise.resolve(undefined);
    }
}

</t>
<t tx="felix.20201214211655.1">/**
 * * Reveals the log pane if not already visible
 */
public showLogPane(): Thenable&lt;unknown&gt; {
    if (this._leoLogPane) {
        this._leoLogPane.show(true); // Just show, so use flag to preserve focus
        return Promise.resolve(true);
    } else {
        return Promise.resolve(undefined); // if cancelled
    }
}

</t>
<t tx="felix.20201214211742.1">/**
 * * Invoke an '@button' click directly by index string. Used by '@buttons' treeview.
 * @param p_node the node of the at-buttons panel that was clicked
 * @returns Promises that resolves when done
 */
public clickAtButton(p_node: LeoButtonNode): Thenable&lt;unknown&gt; {

    this._setupRefresh(false, {
        tree: true,
        body: true,
        documents: true,
        buttons: true,
        states: true
    });

    vscode.window.showInformationMessage('TODO: Implement clickAtButton ' + p_node.label);

    this.launchRefresh();

    // if edited and accepted
    return Promise.resolve(true);

    // return Promise.resolve(undefined); // if cancelled
}

</t>
<t tx="felix.20201214211744.1">/**
 * * Removes an '@button' from Leo's button dict, directly by index string. Used by '@buttons' treeview.
 * @param p_node the node of the at-buttons panel that was chosen to remove
 * @returns Thenable that resolves when done
 */
public removeAtButton(p_node: LeoButtonNode): Thenable&lt;unknown&gt; {

    this._setupRefresh(false, { buttons: true });

    vscode.window.showInformationMessage('TODO: Implement removeAtButton ' + p_node.label);

    this.launchRefresh();

    // if edited and accepted
    return Promise.resolve(true);

    // return Promise.resolve(undefined); // if cancelled
}

</t>
<t tx="felix.20201214211830.1">    this._setupRefresh(false, {
        tree: true,
        body: true,
        documents: true,
        buttons: true,
        states: true
    });

    if (!this.leoStates.fileOpenedReady) {
        if (g.app.loadManager) {
            g.app.loadManager.openEmptyLeoFile(this);
        }
    } else {

        await this._triggerSave();


        const c = g.app.windowList[this.frameIndex].c;
        c.new(this);
    }



    this.launchRefresh();
    return Promise.resolve();
}

/**
* * Close an opened Leo file
* @returns the promise started after it's done closing the Leo document
*/
public async closeLeoFile(): Promise&lt;unknown&gt; {

    await this._triggerSave();

    this._setupRefresh(false, {
        tree: true,
        body: true,
        documents: true,
        buttons: true,
        states: true
    });

    const c = g.app.windowList[this.frameIndex].c;
    await c.close();

    this.launchRefresh();
    return Promise.resolve();
}

</t>
<t tx="felix.20201214211832.1">/**
 * * Sets up the call to the 'open-outline' command ans its possible file url parameter.
 * @param p_leoFileUri optional uri for specifying a file, if missing, a dialog will open
 * @returns A promise that resolves when done trying to open the file
 */
public async openLeoFile(p_uri?: vscode.Uri): Promise&lt;unknown&gt; {
    this._setupRefresh(true, {
        tree: true,
        body: true,
        states: true,
        documents: true,
        buttons: true
    });
    if (!this.leoStates.fileOpenedReady) {
        // override with given argument
        let fileName: string;
        if (p_uri &amp;&amp; p_uri.fsPath.trim() &amp;&amp; g.app.loadManager) {
            fileName = p_uri.fsPath.replace(/\\/g, '/');
            await g.app.loadManager.openFileByName(fileName, this);
        }
    } else {
        await this._triggerSave();

        const c = g.app.windowList[this.frameIndex].c;

        await c.open_outline(p_uri);
    }

    this.launchRefresh();
    return Promise.resolve();

}

</t>
<t tx="felix.20201214211834.1">/**
 * * Shows the recent Leo files list, choosing one will open it
 * @returns A promise that resolves when the a file is finally opened, rejected otherwise
 */
public showRecentLeoFiles(): Thenable&lt;unknown&gt; {
    vscode.window.showInformationMessage('TODO: Implement showRecentLeoFiles');

    // if shown, chosen and opened
    return Promise.resolve(true);

    // return Promise.resolve(undefined); // if cancelled
}

</t>
<t tx="felix.20201214211835.1">/**
 * * Asks for file name and path, then saves the Leo file
 * @param p_fromOutlineSignifies that the focus was, and should be brought back to, the outline
 * @returns a promise from saving the file results.
 */
public async saveAsLeoFile(p_fromOutline?: boolean): Promise&lt;unknown&gt; {
    await this._triggerSave();

    const c = g.app.windowList[this.frameIndex].c;

    this._setupRefresh(!!p_fromOutline, {
        tree: true,
        states: true,
        documents: true
    });

    await c.saveAs();

    this.launchRefresh();
    return Promise.resolve();
}

</t>
<t tx="felix.20201214211836.1">/**
 * * Invokes the commander.save() command
 * @param p_fromOutlineSignifies that the focus was, and should be brought back to, the outline
 * @returns Promise that resolves when the save command is done
 */
public async saveLeoFile(p_fromOutline?: boolean): Promise&lt;unknown&gt; {
    await this._triggerSave();

    const c = g.app.windowList[this.frameIndex].c;

    this._setupRefresh(!!p_fromOutline, {
        tree: true,
        states: true,
        documents: true
    });

    await c.save();

    this.launchRefresh();
    return Promise.resolve();
}

</t>
<t tx="felix.20201214211837.1">/**
 * * Show switch document 'QuickPick' dialog and switch file if selection is made, or just return if no files are opened.
 * @returns A promise that resolves with a textEditor of the selected node's body from the newly selected document
 */
public switchLeoFile(): Thenable&lt;unknown&gt; {

    vscode.window.showInformationMessage('TODO: Implement switchLeoFile');

    // vscode.window.showQuickPick(w_entries, w_pickOptions);
    //     then
    // return Promise.resolve(this.selectOpenedLeoDocument(p_chosenDocument.value));

    return Promise.resolve(true);

    // return Promise.resolve(undefined); // if cancelled
}

</t>
<t tx="felix.20201214211839.1">/**
 * * Switches Leo document directly by index number. Used by document treeview and switchLeoFile command.
 * @param p_index position of the opened Leo document in the document array
 * @returns A promise that resolves with a textEditor of the selected node's body from the newly opened document
 */
public selectOpenedLeoDocument(p_index: number, p_fromOutline?: boolean): Thenable&lt;unknown&gt; {

    this._setupRefresh(!!p_fromOutline, {
        tree: true,
        body: true,
        buttons: true,
        states: true,
        documents: true
    });

    this.frameIndex = p_index;

    this.launchRefresh();

    // if selected and opened
    return Promise.resolve(true);
}

</t>
<t tx="felix.20201214233119.1">/**
 * General 'Leo is ready' state
 */
private _leoReady: boolean = false;
get leoReady(): boolean {
    return this._leoReady;
}
set leoReady(p_value: boolean) {
    this._leoReady = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_READY, p_value);
}

</t>
<t tx="felix.20201222013904.1">/**
 * * Refreshes the outline. A reveal type can be passed along to specify the reveal type for the selected node
 * @param p_incrementTreeId Make all node id's be 'new' by incrementing the treeId prefix of the id's.
 * @param p_revealType Facultative reveal type to specify type of reveal when the 'selected node' is encountered
 */
private _refreshOutline(p_incrementTreeId: boolean, p_revealType?: RevealType): void {
    if (p_incrementTreeId) {
        this._leoTreeProvider.incTreeId();
    }
    if (p_revealType !== undefined &amp;&amp; p_revealType.valueOf() &gt;= this._revealType.valueOf()) { // To check if selected node should self-select while redrawing whole tree
        this._revealType = p_revealType; // To be read/cleared (in arrayToLeoNodesArray instead of directly by nodes)
    }
    this._leoTreeProvider.refreshTreeRoot();
}

</t>
<t tx="felix.20201227014627.1">/**
 * * Launches refresh for UI components and states (Debounced)
 */
public async _launchRefresh(p_node?: Position): Promise&lt;unknown&gt; {
    // check states for having at least a document opened
    if (this.leoStates.leoReady &amp;&amp; this.leoStates.fileOpenedReady) {
        // Had some opened
        if (!g.app.windowList.length) {
            return this._setupNoOpenedLeoDocument(); // All closed now!
        }
    }
    if (this.leoStates.leoReady &amp;&amp; !this.leoStates.fileOpenedReady) {
        // Was all closed
        if (g.app.windowList.length) {
            this._setupOpenedLeoDocument();
            // Has a commander opened, but wait for UI!
            await this.leoStates.qLastContextChange;
        }
    }

    // Consider command finished
    if (this.trace) {
        if (this.commandTimer !== undefined) {
            console.log('commandTimer', utils.getDurationMs(this.commandTimer));
        }
    }
    this.commandTimer = undefined;

    // Start reset-timer capture, if has been reset.
    this.lastRefreshTimer = process.hrtime();
    if (this.refreshTimer === undefined) {
        this.refreshTimer = this.lastRefreshTimer;
    }

    const c = g.app.windowList[this.frameIndex].c;

    // Set w_revealType, it will ultimately set this._revealType.
    // Used when finding the OUTLINE's selected node and setting or preventing focus into it
    // Set this._fromOutline. Used when finding the selected node and showing the BODY to set or prevent focus in it

    if (Object.keys(this._refreshType).length) {
        // console.log('Has UI to REFRESH!', this._refreshType);
    }

    // this._refreshType = Object.assign({}, p_refreshType); // USE _setupRefresh INSTEAD

    let w_revealType: RevealType;

    if (this._fromOutline) {
        w_revealType = RevealType.RevealSelectFocus;
    } else {
        w_revealType = RevealType.RevealSelect;
    }

    // if (this._refreshType.body &amp;&amp;
    //     this._bodyLastChangedDocument &amp;&amp; this._bodyLastChangedDocument.isDirty) {
    //     // When this refresh is launched with 'refresh body' requested, we need to lose any pending edits and save on vscode's side.
    //     this._bodyLastChangedDocument.save(); // Voluntarily save to 'clean' any pending body
    // }

    // * _focusInterrupt insertNode Override
    if (this._focusInterrupt) {
        // this._focusInterrupt = false; // TODO : Test if reverting this in _gotSelection is 'ok'
        w_revealType = RevealType.RevealSelect;
    }
    if (
        this._refreshType.tree ||
        this._refreshType.body ||
        this._refreshType.node ||
        this._refreshType.states
    ) {
        this.refreshUndoPane(); // with largish debounce.
    }

    // * Either the whole tree refreshes, or a single tree node is revealed when just navigating
    if (this._refreshType.tree) {
        this._refreshType.tree = false;

        this._refreshOutline(true, w_revealType);
    } else if (this._refreshType.node &amp;&amp; p_node) {

        // * Force single node "refresh" by revealing it, instead of "refreshing" it
        this._refreshType.node = false;

        this.leoStates.setSelectedNodeFlags(p_node);
        this._revealTreeViewNode(p_node, {
            select: true, focus: true // FOCUS FORCED TO TRUE always leave focus on tree when navigating
        });

        if (this._refreshType.body) {
            this._refreshType.body = false;
            this._tryApplyNodeToBody(p_node, false, true); // ! NEEDS STACK AND THROTTLE!
        }

    } else if (this._refreshType.node) {
        this._refreshType.node = false;
        this.leoStates.setSelectedNodeFlags(c.p);
        this._revealTreeViewNode(c.p, {
            select: true, focus: true // FOCUS FORCED TO TRUE always leave focus on tree when navigating
        });

    }

    // getStates will check if documents, buttons and states flags are set and refresh accordingly
    return this.getStates();
}

</t>
<t tx="felix.20201227155008.1">/**
 * * Setup global refresh options
 * @param p_focusOutline Flag for focus to be placed in outline
 * @param p_refreshType Refresh flags for each UI part
 */
public _setupRefresh(p_focusOutline: boolean, p_refreshType: ReqRefresh): void {
    // Set final "focus-placement" and setup final refresh type, if command requires higher than the one setup so far
    this._fromOutline = p_focusOutline; // set directly
    Object.assign(this._refreshType, p_refreshType); // add all properties without replacing (only 'true' properties)
}

</t>
<t tx="felix.20201227230901.1">/**
 * * Setup UI for having no opened Leo documents
 */
private _setupNoOpenedLeoDocument(): void {
    this.leoStates.fileOpenedReady = false;
    this._bodyTextDocument = undefined;
    this._refreshOutline(false, RevealType.NoReveal);
    this.refreshDocumentsPane();
    this._leoButtonsProvider.refreshTreeRoot();
    this.closeBody();
}

</t>
<t tx="felix.20201227230912.1">/**
 * * A Leo file was opened: setup UI accordingly.
 * @param p_openFileResult Returned info about currently opened and editing document
 * @return a promise that resolves to an opened body pane text editor
 */
private _setupOpenedLeoDocument(): Promise&lt;unknown&gt; {

    // const w_selectedLeoNode = this.apToLeoNode(p_openFileResult.node, false); // Just to get gnx for the body's fist appearance
    this.leoStates.leoOpenedFileName = g.app.windowList[this.frameIndex].c.fileName();

    // // * If not unnamed file add to recent list &amp; last opened list
    // this._addRecentAndLastFile(p_openFileResult.filename);

    // // * Could be already opened, so perform 'rename hack' as if another node was selected
    // if (this._bodyTextDocument &amp;&amp; this.bodyUri) {
    //     // TODO : BUG WHEN SWITCHING LEO DOCUMENT : NEED CROSSOVER LOGIC!
    //     this._switchBody(w_selectedLeoNode.gnx);
    // } else {
    //     this.bodyUri = utils.strToLeoUri(w_selectedLeoNode.gnx);
    // }

    // // * Start body pane system
    // if (!this._bodyFileSystemStarted) {
    //     this._context.subscriptions.push(
    //         vscode.workspace.registerFileSystemProvider(Constants.URI_LEO_SCHEME, this._leoFileSystem, { isCaseSensitive: true })
    //     );
    //     this._bodyFileSystemStarted = true;
    // }
    // // * Startup flag
    this.leoStates.fileOpenedReady = true;
    // // * Maybe first valid redraw of tree along with the selected node and its body
    // this._refreshOutline(true, RevealType.RevealSelectFocus); // p_revealSelection flag set
    // // * Maybe first StatusBar appearance
    // this._leoStatusBar.update(true, 0, true);
    // this._leoStatusBar.show(); // Just selected a node
    // // * Send config to python's side (for settings such as defaultReloadIgnore and checkForChangeExternalFiles)
    // this.sendConfigToServer(this.config.getConfig());
    // // * Refresh Opened tree views
    // this.refreshDocumentsPane();
    // this._leoButtonsProvider.refreshTreeRoot();
    // // * Maybe first Body appearance
    // return this.showBody(false);
    // Reset Extension context flags (used in 'when' clauses in package.json)

    return Promise.resolve(true);
}

</t>
<t tx="felix.20201228164116.1">/**
 * * Closes any body pane opened in this vscode window instance
 */
public closeBody(): void {
    // TODO : CLEAR UNDO HISTORY AND FILE HISTORY for this.bodyUri !
    if (this.bodyUri) {
        vscode.commands.executeCommand('vscode.removeFromRecentlyOpened', this.bodyUri.path);
    }
    vscode.window.visibleTextEditors.forEach(p_textEditor =&gt; {
        if (p_textEditor.document.uri.scheme === Constants.URI_LEO_SCHEME) {
            vscode.commands.executeCommand('vscode.removeFromRecentlyOpened', p_textEditor.document.uri.path);
            if (p_textEditor.hide) {
                p_textEditor.hide();
            }
        }
    });
}

</t>
<t tx="felix.20201229025520.1">/**
 * * Handle selected node being created for the outline
 * @param p_node Position that was just created and detected as selected node
 */
public gotSelectedNode(p_node: Position): void {

    if (this._revealType) {
        setTimeout(() =&gt; {
            this._lastTreeView.reveal(p_node, {
                select: true,
                focus: (this._revealType.valueOf() &gt;= RevealType.RevealSelectFocus.valueOf())
            }).then(
                () =&gt; {
                    // Ok - so reset timers
                    if (this.trace) {
                        if (this.refreshTimer) {
                            console.log('refreshTimer', utils.getDurationMs(this.refreshTimer));
                        }
                        if (this.lastRefreshTimer) {
                            console.log('lastRefreshTimer', utils.getDurationMs(this.lastRefreshTimer));
                        }
                        if (this.commandRefreshTimer) {
                            console.log('commandRefreshTimer', utils.getDurationMs(this.commandRefreshTimer));
                        }
                        if (this.lastCommandRefreshTimer) {
                            console.log('lastCommandRefreshTimer', utils.getDurationMs(this.lastCommandRefreshTimer));
                        }
                    }
                    this.refreshTimer = undefined;
                    this.lastRefreshTimer = undefined;
                    this.commandRefreshTimer = undefined;
                    this.lastCommandRefreshTimer = undefined;
                },
                (p_error) =&gt; {
                    console.log('gotSelectedNode could not reveal');
                }
            );
            // Done, so reset reveal type 'flag'
            this._revealType = RevealType.NoReveal;
        }, 0);
    }
    // set context flags
    this.leoStates.setSelectedNodeFlags(p_node);
}

</t>
<t tx="felix.20210102000055.1"></t>
<t tx="felix.20210102000100.1"></t>
<t tx="felix.20210110210346.1">@language typescript
@tabwidth -4

// ambient module declaration for https://www.npmjs.com/package/date-format-lite
declare module "date-format-lite" { }

// date-format-lite augments built-in Date
interface Date {
    format: (format?: string) =&gt; string;
    masks: { default: string };
}

</t>
<t tx="felix.20211002194716.1"></t>
<t tx="felix.20211003223641.1">/**
 * * Builds a unique Id from gnx and stack, plus collapsed state,
 * for vscode to distinguish the collapsed state.
 */
public buildId(p_position: Position, p_collapsed: number): string {
    // concatenate gnx, stacks gnx's, and collapsible state number.
    // (vscode uses id for collapsible state)
    let w_stringId = this.treeId.toString() +
        p_position.v.gnx + p_position.childIndex().toString() +
        p_position.stack.map(p_stackEntry =&gt; p_stackEntry[0].gnx + p_stackEntry[1].toString()).join("");
    // NOT NEEDED -&gt; p_collapsed.toString(); // Added Uniqueness: VSCode's collapsible state in id
    return w_stringId;
}

</t>
<t tx="felix.20211003233639.1">/**
 * * Force uniqueness of ids generated for nodes in the  next tree refresh
 */
public incTreeId(): void {
    this.treeId++;
}

</t>
<t tx="felix.20211006225245.1">"configuration": {
  "title": "Leojs",
  "properties": {
    "leojs.checkForChangeExternalFiles": {
      "scope": "application",
      "default": "none",
      "type": "string",
      "description": "Set default for checking changes to external files",
      "enum": [
        "none",
        "force-check",
        "force-ignore"
      ],
      "enumDescriptions": [
        "Default from Leo's config",
        "Check for changes",
        "Ignore all changes"
      ]
    },
    "leojs.defaultReloadIgnore": {
      "scope": "application",
      "default": "none",
      "type": "string",
      "description": "Set default for derived files to always reload, or always ignore, when changes are detected",
      "enum": [
        "none",
        "yes-all",
        "no-all"
      ],
      "enumDescriptions": [
        "Choose each time",
        "Reload All",
        "Ignore All"
      ]
    },
    "leojs.leoTreeBrowse": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Specifies whether to use Leo's style of tree browsing with the arrow keys"
    },
    "leojs.treeKeepFocus": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Specifies whether to keep focus in the outline when selecting a node - overridden by \"leoTreeBrowse\""
    },
    "leojs.treeKeepFocusWhenAside": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Specifies whether to keep focus in the outline when opening a body pane on the side"
    },
    "leojs.statusBarString": {
      "scope": "application",
      "default": "",
      "type": "string",
      "description": "Sets the message string of the Status Bar Indicator"
    },
    "leojs.statusBarColor": {
      "scope": "application",
      "default": "fb7c47",
      "type": "string",
      "description": "Specifies the hexadecimal color string for the Status Bar Indicator"
    },
    "leojs.treeInExplorer": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Show the outline tree in the explorer view"
    },
    "leojs.showOpenAside": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Offer 'Open to the Side' in nodes context menu"
    },
    "leojs.showEditOnNodes": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows 'Edit Headline' button on tree nodes"
    },
    "leojs.showArrowsOnNodes": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Shows 'Move Node' arrow buttons on tree nodes"
    },
    "leojs.showAddOnNodes": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Shows 'Insert' button on tree nodes"
    },
    "leojs.showMarkOnNodes": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Shows 'Mark/Unmark' buttons on tree nodes"
    },
    "leojs.showCloneOnNodes": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Shows 'Clone' button on tree nodes"
    },
    "leojs.showCopyOnNodes": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Shows 'Copy' button on tree nodes"
    },
    "leojs.invertNodeContrast": {
      "scope": "application",
      "default": false,
      "type": "boolean",
      "description": "Inverts the contrast of the dirty/clean border aspect of tree nodes"
    },
    "leojs.showEditionOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows clone, delete and insert nodes above the body pane"
    },
    "leojs.showClipboardOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows cut, copy &amp; paste nodes above the body pane"
    },
    "leojs.showPromoteOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows promote and demote above the body pane"
    },
    "leojs.showExecuteOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows 'Execute Script' above the body pane"
    },
    "leojs.showExtractOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows extract commands above the body pane"
    },
    "leojs.showImportOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows 'Import File' above the body pane"
    },
    "leojs.showRefreshOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows 'Refresh from disk' above the body pane"
    },
    "leojs.showHoistOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows Hoist commands above the body pane"
    },
    "leojs.showMarkOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows Mark commands above the body pane"
    },
    "leojs.showSortOnBody": {
      "scope": "application",
      "default": true,
      "type": "boolean",
      "description": "Shows 'Sort Siblings' above the body pane"
    },
    "leojs.leoID": {
      "scope": "application",
      "default": "",
      "type": "string",
      "description": "Used to uniquely identify nodes - Defaults to the OS/Environment user name",
      "pattern": "(^$|^[a-zA-Z0-9]*$)",
      "patternErrorMessage": "Your id should contain only letters and numbers, and must contain at least 3 characters."
    }
  }
},
</t>
<t tx="felix.20211007213344.1">import * as vscode from "vscode";
import * as utils from "./utils";
import { ConfigMembers, ConfigSetting, FontSettings } from "./types";
import { Constants } from "./constants";
import { LeoUI } from "./leoUI";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20211007213344.10">/**
 * * Check if the workbench.editor.enablePreview flag is set
 * @param p_forced Forces the setting instead of just suggesting with a message
 */
public checkEnablePreview(p_forced?: boolean): void {
    let w_result: any = true;
    const w_setting = vscode.workspace.getConfiguration("workbench.editor");
    if (w_setting.inspect("enablePreview")!.globalValue === undefined) {
        w_result = w_setting.inspect("enablePreview")!.defaultValue;
    } else {
        w_result = w_setting.inspect("enablePreview")!.globalValue;
    }
    if (w_result === false) {
        if (p_forced) {
            this.setEnablePreview();
            vscode.window.showInformationMessage(Constants.USER_MESSAGES.ENABLE_PREVIEW_SET);
        } else {
            vscode.window.showWarningMessage(
                Constants.USER_MESSAGES.ENABLE_PREVIEW_RECOMMEND,
                Constants.USER_MESSAGES.FIX_IT
            ).then(p_chosenButton =&gt; {
                if (p_chosenButton === Constants.USER_MESSAGES.FIX_IT) {
                    vscode.commands.executeCommand(Constants.COMMANDS.SET_ENABLE_PREVIEW);
                }
            });
        }
    }
}

</t>
<t tx="felix.20211007213344.11">/**
 * * Check if the 'workbench.editor.closeEmptyGroups' setting is false
 * @param p_forced Forces the setting instead of just suggesting with a message
 */
public checkCloseEmptyGroups(p_forced?: boolean): void {
    let w_result: any = false;
    const w_setting = vscode.workspace.getConfiguration("workbench.editor");
    if (w_setting.inspect("closeEmptyGroups")!.globalValue === undefined) {
        w_result = w_setting.inspect("closeEmptyGroups")!.defaultValue;
    } else {
        w_result = w_setting.inspect("closeEmptyGroups")!.globalValue;
    }
    if (w_result === true) {
        if (p_forced) {
            this.clearCloseEmptyGroups();
            vscode.window.showInformationMessage(Constants.USER_MESSAGES.CLOSE_EMPTY_CLEARED);
        } else {
            vscode.window.showWarningMessage(
                Constants.USER_MESSAGES.CLOSE_EMPTY_RECOMMEND,
                Constants.USER_MESSAGES.FIX_IT
            ).then(p_chosenButton =&gt; {
                if (p_chosenButton === Constants.USER_MESSAGES.FIX_IT) {
                    vscode.commands.executeCommand(Constants.COMMANDS.CLEAR_CLOSE_EMPTY_GROUPS);
                }
            });
        }
    }
}

</t>
<t tx="felix.20211007213344.12">/**
 * * Check if the workbench.editor.closeOnFileDelete flag is set
 * @param p_forced Forces the setting instead of just suggesting with a message
 */
public checkCloseOnFileDelete(p_forced?: boolean): void {
    let w_result: any = true;
    const w_setting = vscode.workspace.getConfiguration("workbench.editor");
    if (w_setting.inspect("closeOnFileDelete")!.globalValue === undefined) {
        w_result = w_setting.inspect("closeOnFileDelete")!.defaultValue;
    } else {
        w_result = w_setting.inspect("closeOnFileDelete")!.globalValue;
    }
    if (w_result === false) {
        if (p_forced) {
            this.setCloseOnFileDelete();
            vscode.window.showInformationMessage(Constants.USER_MESSAGES.CLOSE_ON_DELETE_SET);

        } else {
            vscode.window.showWarningMessage(
                Constants.USER_MESSAGES.CLOSE_ON_DELETE_RECOMMEND,
                Constants.USER_MESSAGES.FIX_IT
            ).then(p_chosenButton =&gt; {
                if (p_chosenButton === Constants.USER_MESSAGES.FIX_IT) {
                    vscode.commands.executeCommand(Constants.COMMANDS.SET_CLOSE_ON_FILE_DELETE);
                }
            });
        }
    }
}

</t>
<t tx="felix.20211007213344.13">/**
 * * Build config from settings from vscode's saved config settings
 */
public buildFromSavedSettings(): Promise&lt;unknown&gt; {
    // Shorthand pointers for readability
    const GET = vscode.workspace.getConfiguration;
    const NAME = Constants.CONFIG_NAME;
    const NAMES = Constants.CONFIG_NAMES;
    const DEFAULTS = Constants.CONFIG_DEFAULTS;
    const FLAGS = Constants.CONTEXT_FLAGS;

    if (this._isBusySettingConfig) {
        // * Currently setting config, wait until its done all, and this will be called automatically
        return Promise.resolve();
    } else {
        this.checkForChangeExternalFiles = GET(NAME).get(NAMES.CHECK_FOR_CHANGE_EXTERNAL_FILES, DEFAULTS.CHECK_FOR_CHANGE_EXTERNAL_FILES);
        this.defaultReloadIgnore = GET(NAME).get(NAMES.DEFAULT_RELOAD_IGNORE, DEFAULTS.DEFAULT_RELOAD_IGNORE);
        this.leoTreeBrowse = GET(NAME).get(NAMES.LEO_TREE_BROWSE, DEFAULTS.LEO_TREE_BROWSE);
        this.treeKeepFocus = GET(NAME).get(NAMES.TREE_KEEP_FOCUS, DEFAULTS.TREE_KEEP_FOCUS);
        this.treeKeepFocusWhenAside = GET(NAME).get(NAMES.TREE_KEEP_FOCUS_WHEN_ASIDE, DEFAULTS.TREE_KEEP_FOCUS_WHEN_ASIDE);
        this.statusBarString = GET(NAME).get(NAMES.STATUSBAR_STRING, DEFAULTS.STATUSBAR_STRING);
        if (this.statusBarString.length &gt; 8) {
            this.statusBarString = DEFAULTS.STATUSBAR_STRING;
        }
        this.statusBarColor = GET(NAME).get(NAMES.STATUSBAR_COLOR, DEFAULTS.STATUSBAR_COLOR);
        if (!utils.isHexColor(this.statusBarColor)) {
            this.statusBarColor = DEFAULTS.STATUSBAR_COLOR;
        }
        this.treeInExplorer = GET(NAME).get(NAMES.TREE_IN_EXPLORER, DEFAULTS.TREE_IN_EXPLORER);
        this.showOpenAside = GET(NAME).get(NAMES.SHOW_OPEN_ASIDE, DEFAULTS.SHOW_OPEN_ASIDE);
        this.showEditOnNodes = GET(NAME).get(NAMES.SHOW_EDIT, DEFAULTS.SHOW_EDIT);
        this.showArrowsOnNodes = GET(NAME).get(NAMES.SHOW_ARROWS, DEFAULTS.SHOW_ARROWS);
        this.showAddOnNodes = GET(NAME).get(NAMES.SHOW_ADD, DEFAULTS.SHOW_ADD);
        this.showMarkOnNodes = GET(NAME).get(NAMES.SHOW_MARK, DEFAULTS.SHOW_MARK);
        this.showCloneOnNodes = GET(NAME).get(NAMES.SHOW_CLONE, DEFAULTS.SHOW_CLONE);
        this.showCopyOnNodes = GET(NAME).get(NAMES.SHOW_COPY, DEFAULTS.SHOW_COPY);

        this.showEditionOnBody = GET(NAME).get(NAMES.SHOW_EDITION_BODY, DEFAULTS.SHOW_EDITION_BODY);
        this.showClipboardOnBody = GET(NAME).get(NAMES.SHOW_CLIPBOARD_BODY, DEFAULTS.SHOW_CLIPBOARD_BODY);
        this.showPromoteOnBody = GET(NAME).get(NAMES.SHOW_PROMOTE_BODY, DEFAULTS.SHOW_PROMOTE_BODY);
        this.showExecuteOnBody = GET(NAME).get(NAMES.SHOW_EXECUTE_BODY, DEFAULTS.SHOW_EXECUTE_BODY);
        this.showExtractOnBody = GET(NAME).get(NAMES.SHOW_EXTRACT_BODY, DEFAULTS.SHOW_EXTRACT_BODY);
        this.showImportOnBody = GET(NAME).get(NAMES.SHOW_IMPORT_BODY, DEFAULTS.SHOW_IMPORT_BODY);
        this.showRefreshOnBody = GET(NAME).get(NAMES.SHOW_REFRESH_BODY, DEFAULTS.SHOW_REFRESH_BODY);
        this.showHoistOnBody = GET(NAME).get(NAMES.SHOW_HOIST_BODY, DEFAULTS.SHOW_HOIST_BODY);
        this.showMarkOnBody = GET(NAME).get(NAMES.SHOW_MARK_BODY, DEFAULTS.SHOW_MARK_BODY);
        this.showSortOnBody = GET(NAME).get(NAMES.SHOW_SORT_BODY, DEFAULTS.SHOW_SORT_BODY);
        this.invertNodeContrast = GET(NAME).get(NAMES.INVERT_NODES, DEFAULTS.INVERT_NODES);
        this.leoID = GET(NAME).get(NAMES.LEO_ID, DEFAULTS.LEO_ID);

        // * Set context for tree items visibility that are based on config options
        return Promise.all([
            utils.setContext(FLAGS.LEO_TREE_BROWSE, this.leoTreeBrowse),
            utils.setContext(FLAGS.TREE_IN_EXPLORER, this.treeInExplorer),
            utils.setContext(FLAGS.SHOW_OPEN_ASIDE, this.showOpenAside),
            utils.setContext(FLAGS.SHOW_EDIT, this.showEditOnNodes),
            utils.setContext(FLAGS.SHOW_ARROWS, this.showArrowsOnNodes),
            utils.setContext(FLAGS.SHOW_ADD, this.showAddOnNodes),
            utils.setContext(FLAGS.SHOW_MARK, this.showMarkOnNodes),
            utils.setContext(FLAGS.SHOW_CLONE, this.showCloneOnNodes),
            utils.setContext(FLAGS.SHOW_COPY, this.showCopyOnNodes),

            utils.setContext(FLAGS.SHOW_EDITION_BODY, this.showEditionOnBody),
            utils.setContext(FLAGS.SHOW_CLIPBOARD_BODY, this.showClipboardOnBody),
            utils.setContext(FLAGS.SHOW_PROMOTE_BODY, this.showPromoteOnBody),
            utils.setContext(FLAGS.SHOW_EXECUTE_BODY, this.showExecuteOnBody),
            utils.setContext(FLAGS.SHOW_EXTRACT_BODY, this.showExtractOnBody),
            utils.setContext(FLAGS.SHOW_IMPORT_BODY, this.showImportOnBody),
            utils.setContext(FLAGS.SHOW_REFRESH_BODY, this.showRefreshOnBody),
            utils.setContext(FLAGS.SHOW_HOIST_BODY, this.showHoistOnBody),
            utils.setContext(FLAGS.SHOW_MARK_BODY, this.showMarkOnBody),
            utils.setContext(FLAGS.SHOW_SORT_BODY, this.showSortOnBody)
        ]);
    }
}

</t>
<t tx="felix.20211007213344.2">/**
 * * Configuration Settings Service
 */
export class Config implements ConfigMembers {

    // Config settings used on Leo's side
    public checkForChangeExternalFiles: string = Constants.CONFIG_DEFAULTS.CHECK_FOR_CHANGE_EXTERNAL_FILES;
    public defaultReloadIgnore: string = Constants.CONFIG_DEFAULTS.DEFAULT_RELOAD_IGNORE;
    // Config settings used on vscode's side
    public leoTreeBrowse: boolean = Constants.CONFIG_DEFAULTS.LEO_TREE_BROWSE; // Used as Context Flag
    public treeKeepFocus: boolean = Constants.CONFIG_DEFAULTS.TREE_KEEP_FOCUS;
    public treeKeepFocusWhenAside: boolean = Constants.CONFIG_DEFAULTS.TREE_KEEP_FOCUS_WHEN_ASIDE;
    public statusBarString: string = Constants.CONFIG_DEFAULTS.STATUSBAR_STRING;
    public statusBarColor: string = Constants.CONFIG_DEFAULTS.STATUSBAR_COLOR;
    public treeInExplorer: boolean = Constants.CONFIG_DEFAULTS.TREE_IN_EXPLORER; // Used as Context Flag
    public showOpenAside: boolean = Constants.CONFIG_DEFAULTS.SHOW_OPEN_ASIDE; // Used as Context Flag
    public showEditOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_EDIT; // Used as Context Flag
    public showArrowsOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_ARROWS; // Used as Context Flag
    public showAddOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_ADD; // Used as Context Flag
    public showMarkOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_MARK; // Used as Context Flag
    public showCloneOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_CLONE; // Used as Context Flag
    public showCopyOnNodes: boolean = Constants.CONFIG_DEFAULTS.SHOW_COPY; // Used as Context Flag

    public showEditionOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_EDITION_BODY; // Used as Context Flag
    public showClipboardOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_CLIPBOARD_BODY; // Used as Context Flag
    public showPromoteOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_PROMOTE_BODY; // Used as Context Flag
    public showExecuteOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_EXECUTE_BODY; // Used as Context Flag
    public showExtractOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_EXTRACT_BODY; // Used as Context Flag
    public showImportOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_IMPORT_BODY; // Used as Context Flag
    public showRefreshOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_REFRESH_BODY; // Used as Context Flag
    public showHoistOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_HOIST_BODY; // Used as Context Flag
    public showMarkOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_MARK_BODY; // Used as Context Flag
    public showSortOnBody: boolean = Constants.CONFIG_DEFAULTS.SHOW_SORT_BODY; // Used as Context Flag


    public invertNodeContrast: boolean = Constants.CONFIG_DEFAULTS.INVERT_NODES;
    public leoID: string = Constants.CONFIG_DEFAULTS.LEO_ID;

    private _isBusySettingConfig: boolean = false;
    private _needsTreeRefresh: boolean = false;

    constructor(
        private _context: vscode.ExtensionContext,
        private _leoUI: LeoUI
    ) { }

    @others
}
</t>
<t tx="felix.20211007213344.3">/**
 * * Get actual 'live' Leojs configuration
 * @returns An object with config settings members such as treeKeepFocus, defaultReloadIgnore, etc.
 */
public getConfig(): ConfigMembers {
    return {
        checkForChangeExternalFiles: this.checkForChangeExternalFiles,
        defaultReloadIgnore: this.defaultReloadIgnore,
        leoTreeBrowse: this.leoTreeBrowse, // Used as Context Flag
        treeKeepFocus: this.treeKeepFocus,
        treeKeepFocusWhenAside: this.treeKeepFocusWhenAside,
        statusBarString: this.statusBarString,
        statusBarColor: this.statusBarColor,
        treeInExplorer: this.treeInExplorer, // Used as Context Flag
        showOpenAside: this.showOpenAside,  // Used as Context Flag
        showEditOnNodes: this.showEditOnNodes, // Used as Context Flag
        showArrowsOnNodes: this.showArrowsOnNodes, // Used as Context Flag
        showAddOnNodes: this.showAddOnNodes, // Used as Context Flag
        showMarkOnNodes: this.showMarkOnNodes, // Used as Context Flag
        showCloneOnNodes: this.showCloneOnNodes, // Used as Context Flag
        showCopyOnNodes: this.showCopyOnNodes, // Used as Context Flag

        showEditionOnBody: this.showEditionOnBody, // Used as Context Flag
        showClipboardOnBody: this.showClipboardOnBody, // Used as Context Flag
        showPromoteOnBody: this.showPromoteOnBody, // Used as Context Flag
        showExecuteOnBody: this.showExecuteOnBody, // Used as Context Flag
        showExtractOnBody: this.showExtractOnBody, // Used as Context Flag
        showImportOnBody: this.showImportOnBody, // Used as Context Flag
        showRefreshOnBody: this.showRefreshOnBody, // Used as Context Flag
        showHoistOnBody: this.showHoistOnBody, // Used as Context Flag
        showMarkOnBody: this.showMarkOnBody, // Used as Context Flag
        showSortOnBody: this.showSortOnBody, // Used as Context Flag

        invertNodeContrast: this.invertNodeContrast,
        leoID: this.leoID
    };
}

</t>
<t tx="felix.20211007213344.4">/**
 * * Get config from vscode for the UI font sizes
 * @returns the font settings object (zoom level and editor font size)
 */
public getFontConfig(): FontSettings {
    let w_zoomLevel = vscode.workspace.getConfiguration(
        "window"
    ).get("zoomLevel");

    let w_fontSize = vscode.workspace.getConfiguration(
        "editor"
    ).get("fontSize");

    const w_config: FontSettings = {
        zoomLevel: Number(w_zoomLevel),
        fontSize: Number(w_fontSize)
    };

    return w_config;
}

</t>
<t tx="felix.20211007213344.5">/**
 * * Apply changes to the expansion config settings and save them in user settings.
 * @param p_changes is an array of codes and values to be changed
 * @returns a promise that resolves upon completion
 */
public async setLeojsSettings(p_changes: ConfigSetting[]): Promise&lt;unknown&gt; {
    this._isBusySettingConfig = true;
    const w_promises: Thenable&lt;void&gt;[] = [];
    const w_vscodeConfig = vscode.workspace.getConfiguration(Constants.CONFIG_NAME);
    p_changes.forEach(i_change =&gt; {
        if (i_change.code.includes(Constants.CONFIG_REFRESH_MATCH)) {
            // Check if tree refresh is required for hover-icons to be displayed or hidden accordingly
            this._needsTreeRefresh = true;
        }
        // tslint:disable-next-line: strict-comparisons
        if (w_vscodeConfig.inspect(i_change.code)!.defaultValue === i_change.value) {
            // Set as undefined - same as default
            w_promises.push(w_vscodeConfig.update(i_change.code, undefined, true));
        } else {
            // Set as value which is not default
            w_promises.push(w_vscodeConfig.update(i_change.code, i_change.value, true));
        }
    });

    await Promise.all(w_promises);
    if (this._needsTreeRefresh) {
        this._needsTreeRefresh = false;
        setTimeout(() =&gt; {
            this._leoUI.configTreeRefresh();
        }, 200);
    }
    this._isBusySettingConfig = false;
    return this.buildFromSavedSettings(); // Refresh config from settings from vscode's saved config

}

</t>
<t tx="felix.20211007213344.6">/**
 * * Apply changes in font size settings and save them in user settings.
 */
public setFontConfig(p_settings: FontSettings): void {
    if (p_settings.zoomLevel || p_settings.zoomLevel === 0) {
        if (!isNaN(p_settings.zoomLevel) &amp;&amp; p_settings.zoomLevel &lt;= 12 &amp;&amp; p_settings.zoomLevel &gt;= -12) {
            vscode.workspace.getConfiguration("window")
                .update("zoomLevel", p_settings.zoomLevel, true);
        } else {
            vscode.window.showInformationMessage(
                Constants.USER_MESSAGES.ZOOM_LEVEL_RANGE_LIMIT
            );
        }
    }
    if (p_settings.fontSize) {
        if (!isNaN(p_settings.fontSize) &amp;&amp; p_settings.fontSize &lt;= 30 &amp;&amp; p_settings.fontSize &gt;= 6) {
            vscode.workspace.getConfiguration("editor")
                .update("fontSize", p_settings.fontSize, true);
        } else {
            vscode.window.showInformationMessage(
                Constants.USER_MESSAGES.FONT_SIZE_RANGE_LIMIT
            );
        }
    }
}

</t>
<t tx="felix.20211007213344.7">/**
 * * Set the workbench.editor.enablePreview vscode setting
 */
public setEnablePreview(): Thenable&lt;void&gt; {
    return vscode.workspace.getConfiguration("workbench.editor")
        .update("enablePreview", true, true);
}

</t>
<t tx="felix.20211007213344.8">/**
 * * Clears the workbench.editor.closeEmptyGroups vscode setting
 */
public clearCloseEmptyGroups(): Thenable&lt;void&gt; {
    return vscode.workspace.getConfiguration("workbench.editor")
        .update("closeEmptyGroups", false, true);
}

</t>
<t tx="felix.20211007213344.9">/**
 * * Set the "workbench.editor.closeOnFileDelete" vscode setting
 */
public setCloseOnFileDelete(): Thenable&lt;void&gt; {
    return vscode.workspace.getConfiguration("workbench.editor")
        .update("closeOnFileDelete", true, true);
}

</t>
<t tx="felix.20211007213900.1">/**
 * * Types of the various JSON configuration keys such as treeKeepFocus, defaultReloadIgnore, etc.
 */
export interface ConfigMembers {
    checkForChangeExternalFiles: string;
    defaultReloadIgnore: string;
    leoTreeBrowse: boolean;
    treeKeepFocus: boolean;
    treeKeepFocusWhenAside: boolean;
    statusBarString: string;
    statusBarColor: string;
    treeInExplorer: boolean;
    showOpenAside: boolean;
    showEditOnNodes: boolean;
    showArrowsOnNodes: boolean;
    showAddOnNodes: boolean;
    showMarkOnNodes: boolean;
    showCloneOnNodes: boolean;
    showCopyOnNodes: boolean;

    showEditionOnBody: boolean; // clone delete insert(s)
    showClipboardOnBody: boolean; // cut copy paste(s)
    showPromoteOnBody: boolean; // promote demote
    showExecuteOnBody: boolean; // extract(s)
    showExtractOnBody: boolean;
    showImportOnBody: boolean;
    showRefreshOnBody: boolean;
    showHoistOnBody: boolean;
    showMarkOnBody: boolean;
    showSortOnBody: boolean;

    invertNodeContrast: boolean;
    leoID: string;
}

</t>
<t tx="felix.20211007213909.1">/**
 * * Structure for configuration settings changes used along with welcome/settings webview.
 */
export interface ConfigSetting {
    code: string;
    value: any;
}

</t>
<t tx="felix.20211007213915.1">/**
 * * Structure for the two vscode font settings
 */
export interface FontSettings {
    zoomLevel: number;
    fontSize: number;
}

</t>
<t tx="felix.20211007214102.1">/**
 * * String for JSON configuration keys such as treeKeepFocus, defaultReloadIgnore, etc.
 */
public static CONFIG_NAMES = {
    CHECK_FOR_CHANGE_EXTERNAL_FILES: "checkForChangeExternalFiles",
    DEFAULT_RELOAD_IGNORE: "defaultReloadIgnore",
    LEO_TREE_BROWSE: "leoTreeBrowse",
    TREE_KEEP_FOCUS: "treeKeepFocus",
    TREE_KEEP_FOCUS_WHEN_ASIDE: "treeKeepFocusWhenAside",
    STATUSBAR_STRING: "statusBarString",
    STATUSBAR_COLOR: "statusBarColor",
    TREE_IN_EXPLORER: "treeInExplorer",
    SHOW_OPEN_ASIDE: "showOpenAside",
    SHOW_EDIT: "showEditOnNodes",
    SHOW_ARROWS: "showArrowsOnNodes",
    SHOW_ADD: "showAddOnNodes",
    SHOW_MARK: "showMarkOnNodes",
    SHOW_CLONE: "showCloneOnNodes",
    SHOW_COPY: "showCopyOnNodes",

    SHOW_EDITION_BODY: "showEditionOnBody",
    SHOW_CLIPBOARD_BODY: "showClipboardOnBody",
    SHOW_PROMOTE_BODY: "showPromoteOnBody",
    SHOW_EXECUTE_BODY: "showExecuteOnBody",
    SHOW_EXTRACT_BODY: "showExtractOnBody",
    SHOW_IMPORT_BODY: "showImportOnBody",
    SHOW_REFRESH_BODY: "showRefreshOnBody",
    SHOW_HOIST_BODY: "showHoistOnBody",
    SHOW_MARK_BODY: "showMarkOnBody",
    SHOW_SORT_BODY: "showSortOnBody",

    INVERT_NODES: "invertNodeContrast",
    LEO_ID: "leoID"
};

</t>
<t tx="felix.20211007214110.1">/**
 * * Configuration Defaults used in config.ts
 * Used when setting itself and getting parameters from vscode
 */
public static CONFIG_DEFAULTS = {
    CHECK_FOR_CHANGE_EXTERNAL_FILES: "none",  // Used in leoBridge scrip,
    DEFAULT_RELOAD_IGNORE: "none", // Used in leoBridge scrip,
    LEO_TREE_BROWSE: true,
    TREE_KEEP_FOCUS: true,
    TREE_KEEP_FOCUS_WHEN_ASIDE: false,
    STATUSBAR_STRING: "", // Strings like "Literate", "Leo", UTF-8 also supported: \u{1F981}
    STATUSBAR_COLOR: "fb7c47",
    TREE_IN_EXPLORER: true,
    SHOW_OPEN_ASIDE: true,
    SHOW_EDIT: true,
    SHOW_ARROWS: false,
    SHOW_ADD: false,
    SHOW_MARK: false,
    SHOW_CLONE: false,
    SHOW_COPY: false,

    SHOW_EDITION_BODY: true,
    SHOW_CLIPBOARD_BODY: true,
    SHOW_PROMOTE_BODY: true,
    SHOW_EXECUTE_BODY: true,
    SHOW_EXTRACT_BODY: true,
    SHOW_IMPORT_BODY: true,
    SHOW_REFRESH_BODY: true,
    SHOW_HOIST_BODY: true,
    SHOW_MARK_BODY: true,
    SHOW_SORT_BODY: true,

    INVERT_NODES: false,
    LEO_ID: ""
};

</t>
<t tx="felix.20211007214455.1">/**
 * * Checks if a string is formatted as a valid rrggbb color code.
 * @param p_hexString hexadecimal 6 digits string, without leading '0x'
 * @returns True if the string is a valid representation of an hexadecimal 6 digit number
 */
export function isHexColor(p_hexString: string): boolean {
    return typeof p_hexString === 'string'
        &amp;&amp; p_hexString.length === 6
        &amp;&amp; !isNaN(Number('0x' + p_hexString));
}

</t>
<t tx="felix.20211007232334.1">/**
 * * Refresh tree for 'node hover icons' to show up properly after changing their settings
 */
public configTreeRefresh(): void {
    if (this.leoStates.fileOpenedReady) {
        this._preventShowBody = true;
        this._refreshOutline(true, RevealType.RevealSelect);
    }
}

</t>
<t tx="felix.20211008004139.1">/**
 * * Find panel controls ids
 */
public static FIND_INPUTS_IDS = {
    FIND_TEXT: "findText",
    REPLACE_TEXT: "replaceText",
    ENTIRE_OUTLINE: "entireOutline",
    NODE_ONLY: "nodeOnly",
    SUBOUTLINE_ONLY: "subOutlineOnly",
    IGNORE_CASE: "ignoreCase",
    MARK_CHANGES: "markChanges",
    MARK_FINDS: "markFinds",
    REG_EXP: "regExp",
    WHOLE_WORD: "wholeWord",
    SEARCH_BODY: "searchBody",
    SEARCH_HEADLINE: "searchHeadline"
};

</t>
<t tx="felix.20211010192923.1">import * as vscode from "vscode";
import * as utils from "./utils";
import * as path from 'path';
import { Constants } from "./constants";

import { BodyTimeInfo } from "./types";
import { LeoUI } from "./leoUI";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20211010192923.10">public createDirectory(p_uri: vscode.Uri): void {
    console.warn('Called createDirectory with ', p_uri.fsPath); // should not happen
    throw vscode.FileSystemError.NoPermissions();
}

</t>
<t tx="felix.20211010192923.11">public writeFile(p_uri: vscode.Uri, p_content: Uint8Array, p_options: { create: boolean, overwrite: boolean }): void {
    if (!this.preventSaveToLeo) {
        // TODO :
        // this._leoUi.triggerBodySave(true); // Might have been a vscode 'save' via the menu
    } else {
        this.preventSaveToLeo = false;
    }
    const w_gnx = utils.leoUriToStr(p_uri);
    if (!this._openedBodiesGnx.includes(w_gnx)) {
        console.error("Leointeg: Tried to save body other than selected node's body", w_gnx);
        this._openedBodiesGnx.push(w_gnx);
    }
    const w_now = new Date().getTime();
    this._openedBodiesInfo[w_gnx] = {
        ctime: w_now,
        mtime: w_now
    };
    this._fireSoon({ type: vscode.FileChangeType.Changed, uri: p_uri });
}

</t>
<t tx="felix.20211010192923.12">public rename(p_oldUri: vscode.Uri, p_newUri: vscode.Uri, p_options: { overwrite: boolean }): void {
    console.warn('Called rename on ', p_oldUri.fsPath, p_newUri.fsPath); // should not happen
    this._fireSoon(
        { type: vscode.FileChangeType.Deleted, uri: p_oldUri },
        { type: vscode.FileChangeType.Created, uri: p_newUri }
    );
}

</t>
<t tx="felix.20211010192923.13">public delete(p_uri: vscode.Uri): void {
    // console.log("delete", p_uri.fsPath);
    const w_gnx = utils.leoUriToStr(p_uri);
    if (this._openedBodiesGnx.includes(w_gnx)) {
        this._openedBodiesGnx.splice(this._openedBodiesGnx.indexOf(w_gnx), 1);
        delete this._openedBodiesInfo[w_gnx];
    } else {
        // console.log("not deleted");
    }

    // dirname is just a slash "/"
    let w_dirname = p_uri.with({ path: path.posix.dirname(p_uri.path) });

    this._fireSoon(
        { type: vscode.FileChangeType.Changed, uri: w_dirname },
        { uri: p_uri, type: vscode.FileChangeType.Deleted }
    );
}

</t>
<t tx="felix.20211010192923.14">/**
 * * // 
 */
public copy(p_uri: vscode.Uri): void {
    console.warn('Called copy on ', p_uri.fsPath); // should not happen
    throw vscode.FileSystemError.NoPermissions();
}

</t>
<t tx="felix.20211010192923.15">private _fireSoon(...p_events: vscode.FileChangeEvent[]): void {
    this._bufferedEvents.push(...p_events);
    if (this._fireSoonHandle) {
        clearTimeout(this._fireSoonHandle);
    }
    this._fireSoonHandle = setTimeout(() =&gt; {
        this._onDidChangeFileEmitter.fire(this._bufferedEvents);
        this._bufferedEvents.length = 0; // clearing events array
    }, 5);
}

</t>
<t tx="felix.20211010192923.2">/**
 * * Body panes implementation as a file system using "leo" as a scheme identifier
 * Saving and renaming prevents flickering and prevents undos to 'traverse through' different gnx
 */
export class LeoBodyProvider implements vscode.FileSystemProvider {

    // * Flag normally false
    public preventSaveToLeo: boolean = false;

    // * Last file read data with the readFile method
    private _lastGnx: string = ""; // gnx of last file read
    private _lastBodyData: string = ""; // body content of last file read
    private _lastBodyLength: number = 0; // length of last file read

    // * List of currently opened body panes gnx (from 'watch' &amp; 'dispose' methods)
    private _watchedBodiesGnx: string[] = [];

    // * List of gnx that should be available (from more.selectNode and fs.delete)
    private _openedBodiesGnx: string[] = [];
    private _openedBodiesInfo: { [key: string]: BodyTimeInfo } = {};

    // * List of all possible vNodes gnx in the currently opened leo file (since last refresh/tree operation)
    private _possibleGnxList: string[] = []; // Maybe deprecated

    private _lastBodyTimeGnx: string = "";

    // * An event to signal that a resource has been changed
    // * It should fire for resources that are being [watched](#FileSystemProvider.watch) by clients of this provider
    private _onDidChangeFileEmitter = new vscode.EventEmitter&lt;vscode.FileChangeEvent[]&gt;();
    readonly onDidChangeFile: vscode.Event&lt;vscode.FileChangeEvent[]&gt; = this._onDidChangeFileEmitter.event;
    private _bufferedEvents: vscode.FileChangeEvent[] = [];
    private _fireSoonHandle?: NodeJS.Timer;

    constructor(private _leoUi: LeoUI) { }

    @others
}
</t>
<t tx="felix.20211010192923.3">/**
 * * Sets selected node body's modified time for this gnx virtual file
 * @param p_uri URI of file for which to set made-up modified time
 */
public setBodyTime(p_uri: vscode.Uri): void {
    const w_gnx = utils.leoUriToStr(p_uri);
    this._lastBodyTimeGnx = w_gnx;
    if (!this._openedBodiesGnx.includes(w_gnx)) {
        this._openedBodiesGnx.push(w_gnx);
    }
    const w_now = new Date().getTime();
    this._openedBodiesInfo[w_gnx] = {
        ctime: w_now,
        mtime: w_now
    };
}

</t>
<t tx="felix.20211010192923.4">/**
 * * Refresh the body pane for a particular gnx by telling vscode that the file from the Leo file provider has changed
 * @param p_gnx Gnx of body associated with this virtual file, mostly Leo's selected node
 */
public fireRefreshFile(p_gnx: string): void {
    if (!this._openedBodiesGnx.includes(p_gnx)) {
        console.error("ASKED TO REFRESH NOT EVEN IN SELECTED BODY: ", p_gnx);
        this._openedBodiesGnx.push(p_gnx);
    }
    const w_now = new Date().getTime();
    this._openedBodiesInfo[p_gnx] = {
        ctime: w_now,
        mtime: w_now
    };
    this._onDidChangeFileEmitter.fire([{
        type: vscode.FileChangeType.Changed,
        uri: utils.strToLeoUri(p_gnx)
    } as vscode.FileChangeEvent]);
}

</t>
<t tx="felix.20211010192923.5">/**
 * Maybe deprecated
 * * Refreshes the '_possibleGnxList' list of all unique gnx from Leo
 * @returns a promise that resolves to the fresh gnx string array
 */
public refreshPossibleGnxList(): Thenable&lt;string[]&gt; {
    // * Get updated list of possible gnx
    // return this._leoUi.sendAction(
    //     Constants.LEOBRIDGE.GET_ALL_GNX
    // ).then((p_result) =&gt; {
    //     this._possibleGnxList = p_result.gnx || [];
    //     return Promise.resolve(this._possibleGnxList);
    // });
    return Promise.resolve([]);
}

</t>
<t tx="felix.20211010192923.6">public watch(p_resource: vscode.Uri): vscode.Disposable {
    const w_gnx = utils.leoUriToStr(p_resource);
    if (!this._watchedBodiesGnx.includes(w_gnx)) {
        this._watchedBodiesGnx.push(w_gnx); // add gnx
    } else {
    }
    return new vscode.Disposable(() =&gt; {
        const w_position = this._watchedBodiesGnx.indexOf(w_gnx); // find and remove it
        if (w_position &gt; -1) {
            this._watchedBodiesGnx.splice(w_position, 1);
        }
    });
}

</t>
<t tx="felix.20211010192923.7">public stat(p_uri: vscode.Uri): vscode.FileStat | Thenable&lt;vscode.FileStat&gt; {
    // TODO : Fix/Check extraneous stat(...) call(s)
    if (this._leoUi.leoStates.fileOpenedReady) {
        const w_gnx = utils.leoUriToStr(p_uri);
        if (p_uri.fsPath.length === 1) { // p_uri.fsPath === '/' || p_uri.fsPath === '\\'
            return { type: vscode.FileType.Directory, ctime: 0, mtime: 0, size: 0 };
        } else if (w_gnx === this._lastGnx &amp;&amp; this._openedBodiesGnx.includes(this._lastGnx)) {
            return {
                type: vscode.FileType.File,
                ctime: this._openedBodiesInfo[this._lastGnx].ctime,
                mtime: this._openedBodiesInfo[this._lastGnx].mtime,
                size: this._lastBodyLength
            };
        } else if (this._openedBodiesGnx.includes(w_gnx)) {
            // return this._leoUi.sendAction(
            //     Constants.LEOBRIDGE.GET_BODY_LENGTH,
            //     JSON.stringify({ "gnx": w_gnx })
            // ).then((p_result) =&gt; {
            return Promise.resolve(
                {
                    type: vscode.FileType.File,
                    ctime: this._openedBodiesInfo[w_gnx].ctime,
                    mtime: this._openedBodiesInfo[w_gnx].mtime,
                    size: 0
                    // size: p_result.len ? p_result.len : 0
                }
            );

        }
    }
    // throw vscode.FileSystemError.FileNotFound();
    // (Instead of FileNotFound) should be caught by _onActiveEditorChanged or _changedVisibleTextEditors
    return { type: vscode.FileType.File, ctime: 0, mtime: 0, size: 0 };
}

</t>
<t tx="felix.20211010192923.8">public readFile(p_uri: vscode.Uri): Thenable&lt;Uint8Array&gt; {
    if (this._leoUi.leoStates.fileOpenedReady) {
        if (p_uri.fsPath.length === 1) { // p_uri.fsPath === '/' || p_uri.fsPath === '\\'
            throw vscode.FileSystemError.FileIsADirectory();
        } else {
            const w_gnx = utils.leoUriToStr(p_uri);
            // if (!this._possibleGnxList.includes(w_gnx)) {
            if (!this._openedBodiesGnx.includes(w_gnx)) {
                console.error("readFile: ERROR File not in _openedBodiesGnx! readFile missing refreshes?");
                // throw vscode.FileSystemError.FileNotFound();
                // (Instead of FileNotFound) should be caught by _onActiveEditorChanged or _changedVisibleTextEditors
                return Promise.resolve(Buffer.from(""));
            } else {
                // return this._leoUi.sendAction(
                //     Constants.LEOBRIDGE.GET_BODY,
                //     JSON.stringify({ "gnx": w_gnx })
                // ).then((p_result) =&gt; {
                // if (p_result.body) {
                //     this._lastGnx = w_gnx;
                //     this._lastBodyData = p_result.body;
                //     const w_buffer: Uint8Array = Buffer.from(p_result.body);
                //     this._lastBodyLength = w_buffer.byteLength;
                //     return Promise.resolve(w_buffer);
                // } else if (p_result.body === "") {
                //     this._lastGnx = w_gnx;
                //     this._lastBodyLength = 0;
                //     this._lastBodyData = "";
                //     return Promise.resolve(Buffer.from(""));
                // } else {
                //     if (this._lastGnx === w_gnx) {
                //         // was last gnx of closed file about to be switched to new document selected
                //         console.log('Passed in not found: ' + w_gnx);

                //         return Promise.resolve(Buffer.from(this._lastBodyData));
                //     }
                //     console.error("ERROR =&gt; readFile of unknown GNX"); // is possibleGnxList updated correctly?
                //     //  throw vscode.FileSystemError.FileNotFound();
                //     // (Instead of FileNotFound) should be caught by _onActiveEditorChanged or _changedVisibleTextEditors
                //     return Promise.resolve(Buffer.from(""));
                // }
                // });
                // FAKE
                return Promise.resolve(Buffer.from(""));
            }
        }
    } else {
        throw vscode.FileSystemError.FileNotFound();
    }
}

</t>
<t tx="felix.20211010192923.9">public readDirectory(p_uri: vscode.Uri): Thenable&lt;[string, vscode.FileType][]&gt; {
    if (p_uri.fsPath.length === 1) { // p_uri.fsPath === '/' || p_uri.fsPath === '\\'
        const w_directory: [string, vscode.FileType][] = [];
        w_directory.push([this._lastBodyTimeGnx, vscode.FileType.File]);
        return Promise.resolve(w_directory);
    } else {
        throw vscode.FileSystemError.FileNotFound();
    }
}

</t>
<t tx="felix.20211010221959.1">/**
 * * LeoBody virtual file time information object
 */
export interface BodyTimeInfo {
    ctime: number;
    mtime: number;
}

</t>
<t tx="felix.20211012233514.1">/**
 * * Asks for .leojs file name and path, then saves the JSON Leo file
 * @param p_fromOutlineSignifies that the focus was, and should be brought back to, the outline
 * @returns a promise from saving the file results.
 */
public async saveAsLeoJsFile(p_fromOutline?: boolean): Promise&lt;unknown&gt; {
    await this._triggerSave();

    const c = g.app.windowList[this.frameIndex].c;

    this._setupRefresh(!!p_fromOutline, {
        tree: true,
        states: true,
        documents: true
    });

    await c.save_as_leojs();

    this.launchRefresh();
    return Promise.resolve();
}

</t>
<t tx="felix.20211024012523.1">/**
 * Returns clipboard content
*/
public getTextFromClipboard(): string {
    return this.clipboardContent;
}

</t>
<t tx="felix.20211024012536.1"></t>
<t tx="felix.20211024203649.1">/**
 * * 'TreeView.reveal' for any opened leo outline that is currently visible
 * @param p_leoNode The node to be revealed
 * @param p_options Options object for the revealed node to either also select it, focus it, and expand it
 * @returns Thenable from the reveal tree node action, resolves directly if no tree visible
 */
private _revealTreeViewNode(
    p_leoNode: Position,
    p_options?: { select?: boolean; focus?: boolean; expand?: boolean | number }
): Thenable&lt;void&gt; {
    if (this._leoTreeView.visible) {
        return this._leoTreeView.reveal(p_leoNode, p_options);
    }
    if (this._leoTreeExView.visible &amp;&amp; this.config.treeInExplorer) {
        return this._leoTreeExView.reveal(p_leoNode, p_options);
    }
    return Promise.resolve(); // Defaults to resolving even if both are hidden
}

</t>
<t tx="felix.20211024203725.1">/**
 * * Makes sure the body now reflects the selected node.
 * This is called after 'selectTreeNode', or after '_gotSelection' when refreshing.
 * @param p_node Node that was just selected
 * @param p_aside Flag to indicate opening 'Aside' was required
 * @param p_showBodyKeepFocus Flag used to keep focus where it was instead of forcing in body
 * @param p_force_open Flag to force opening the body pane editor
 * @returns a text editor of the p_node parameter's gnx (As 'leo' file scheme)
 */
private _tryApplyNodeToBody(
    p_node: Position,
    p_aside: boolean,
    p_showBodyKeepFocus: boolean,
    p_force_open?: boolean
): Thenable&lt;vscode.TextEditor&gt; {
    // console.log('try to apply node -&gt; ', p_node.gnx);

    // this.lastSelectedNode = p_node; // Set the 'lastSelectedNode' this will also set the 'marked' node context
    // this._commandStack.newSelection(); // Signal that a new selected node was reached and to stop using the received selection as target for next command

    // if (this._bodyTextDocument) {
    //     // if not first time and still opened - also not somewhat exactly opened somewhere.
    //     if (
    //         !this._bodyTextDocument.isClosed &amp;&amp;
    //         !this._locateOpenedBody(p_node.gnx) // LOCATE NEW GNX
    //     ) {
    //         // if needs switching by actually having different gnx
    //         if (utils.leoUriToStr(this.bodyUri) !== p_node.gnx) {
    //             this._locateOpenedBody(utils.leoUriToStr(this.bodyUri)); // * LOCATE OLD GNX FOR PROPER COLUMN*
    //             return this._bodyTextDocument.save().then(() =&gt; {
    //                 return this._switchBody(p_node.gnx, p_aside, p_showBodyKeepFocus);
    //             });
    //         }
    //     }
    // } else {
    //     // first time?
    //     this.bodyUri = utils.strToLeoUri(p_node.gnx);
    // }
    // return this.showBody(p_aside, p_showBodyKeepFocus);
    return Promise.resolve(vscode.window.activeTextEditor!); // TODO : TEMP
}

</t>
<t tx="felix.20211030165058.1"></t>
<t tx="felix.20211117232843.1">{
  "command": "leojs.undoFromOutline",
  "key": "ctrl+z",
  "mac": "cmd+z",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs || leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsUndos/"
},
{
  "command": "leojs.redoFromOutline",
  "key": "ctrl+shift+z",
  "mac": "cmd+shift+z",
  "when": "leojsTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leojs || leojsTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /^leojsOutline|^leojsDocuments|^leojsUndos/"
},
</t>
<t tx="felix.20211119001637.1">"resourceLabelFormatters": [
  {
    "scheme": "leojs",
    "formatting": {
      "label": "LEOJS: BODY",
      "separator": "/",
      "workspaceSuffix": ""
    }
  }
]
</t>
<t tx="felix.20211122205011.1">import * as vscode from "vscode";
import { LeoUI } from './leoUI';
import { LeoStates } from "./leoStates";
import * as g from './core/leoGlobals';
import { Bead } from "./core/leoUndo";

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20211122205031.1">/**
 * * Undo beads shown as a list with this TreeDataProvider implementation
 */
export class LeoUndosProvider implements vscode.TreeDataProvider&lt;LeoUndoNode&gt; {

    private _beadId = 0;

    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoUndoNode | undefined&gt; = new vscode.EventEmitter&lt;LeoUndoNode | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;LeoUndoNode | undefined&gt; = this._onDidChangeTreeData.event;

    constructor(
        private _leoStates: LeoStates,
        private _leoUI: LeoUI,
    ) { }

    @others
}

</t>
<t tx="felix.20211122212823.1">/**
 * * Opened Leo documents tree view node item implementation for usage in a TreeDataProvider
 */
export class LeoUndoNode extends vscode.TreeItem {

    // Context string is checked in package.json with 'when' clauses
    public contextValue: string;

    constructor(
        bead: Bead,
        public description: string,
        private _beadId: number,

    ) {
        super(bead.undoType || "unknown");
        this.contextValue = "leojsUndoNode";
    }

    @others
}

</t>
<t tx="felix.20211122213012.1">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20211122213023.1">public getTreeItem(element: LeoUndoNode): Thenable&lt;LeoUndoNode&gt; | LeoUndoNode {
    return element;
}

</t>
<t tx="felix.20211122213037.1">public getParent(element: LeoUndoNode): vscode.ProviderResult&lt;LeoUndoNode&gt; {
    // Leo documents are just a list, as such, entries are always child of root, so return null
    return undefined;
}

</t>
<t tx="felix.20211122214009.1">// @ts-ignore
public get id(): string {
    // Add prefix and suffix salt to numeric index to prevent accidental duplicates
    return "b" + this._beadId;
}

</t>
<t tx="felix.20211122214039.1">// @ts-ignore
public get tooltip(): string {
    return "TODO leojs Undo Tooltip";
}

</t>
<t tx="felix.20211122214230.1">public getChildren(element?: LeoUndoNode): LeoUndoNode[] {
    const w_children: LeoUndoNode[] = [];
    // if called with element, or not ready, give back empty array as there won't be any children
    if (this._leoStates.fileOpenedReady &amp;&amp; !element &amp;&amp; g.app.windowList.length) {
        const c = g.app.windowList[this._leoUI.frameIndex].c;
        const undoer = c.undoer;

        let i: number = 0;
        undoer.beads.forEach(p_bead =&gt; {
            let w_description: string = "";
            let w_undoFlag: boolean = false;
            if (i === undoer.bead) {
                w_description = "Undo";
                w_undoFlag = true;
            }
            if (i === undoer.bead + 1) {
                w_description = "Redo";
            }
            const w_node = new LeoUndoNode(p_bead, w_description, this._beadId++);
            w_children.push(w_node);
            if (w_undoFlag) {
                this._leoUI.setUndoSelection(w_node);
            }
            i++;
        });
        if (!undoer.beads.length) {
            const w_node = new LeoUndoNode({ undoType: "Unchanged" }, "", this._beadId++);
            w_children.push(w_node);
        }

    }
    return w_children; // Defaults to an empty list of children
}

</t>
<t tx="felix.20211122230343.1">/**
 * * Handle the change of visibility of either outline treeview and refresh it if its visible
 * @param p_event The treeview-visibility-changed event passed by vscode
 * @param p_explorerView Flags that the treeview who triggered this event is the one in the explorer view
 */
private _onUndosTreeViewVisibilityChanged(p_event: vscode.TreeViewVisibilityChangeEvent, p_explorerView: boolean): void {
    if (p_explorerView) { } // (Facultative/unused) Do something different if explorer view is used
    if (p_event.visible) {
        this._lastLeoUndos = p_explorerView ? this._leoUndosExplorer : this._leoUndos;
        // TODO: Check if needed
        // this._leoUndosProvider.refreshTreeRoot(); // May not need to set selection...?
    }
}

</t>
<t tx="felix.20211124223735.1">/**
 * * Refreshes the undo pane
 */
private _refreshUndoPane(): void {
    this._leoUndosProvider.refreshTreeRoot();
}

</t>
<t tx="felix.20211129002604.1">/**
 * * Places selection on the required node with a 'timeout'. Used after refreshing the opened Leo documents view.
 * @param p_undoNode Node instance in the Leo History view to be the 'selected' one.
 */
public setUndoSelection(p_undoNode: LeoUndoNode): void {
    setTimeout(() =&gt; {
        if (this._lastLeoUndos &amp;&amp; this._lastLeoUndos.visible) {
            this._lastLeoUndos.reveal(p_undoNode, { select: true, focus: false }).then(
                () =&gt; { }, // Ok - do nothing
                (p_error) =&gt; {
                    console.log('setUndoSelection could not reveal');
                }
            );
        }
    }, 0);
}

</t>
<t tx="felix.20211201001847.1">export class LeoOutlineNode extends vscode.TreeItem {

    constructor(
        public label: string, // Node headline
        public collapsibleState: vscode.TreeItemCollapsibleState,
        public position: Position, // Pointer/reference for leo's node position
        public description: string,
        public iconPath: Icon,
        public id: string,
        public contextValue: string // For contextual menu on each node (not the global 'selected node' flag!)
    ) {
        super(label, collapsibleState);
        this.command = {
            command: Constants.COMMANDS.SELECT_NODE,
            title: '',
            // using 'this' as LeoOutlineNode instead of position, to match 'openToTheSide' paramter
            arguments: [this]
        };
    }

    @others
}
</t>
<t tx="felix.20211204144931.1"></t>
<t tx="felix.20211204144931.2">/**
 * * Save body to Leo if its dirty. That is, only if a change has been made to the body 'document' so far
 * @param p_forcedVsCodeSave Flag to also have vscode 'save' the content of this editor through the filesystem
 * @returns a promise that resolves when the possible saving process is finished
 */
public triggerBodySave(p_forcedVsCodeSave?: boolean): Thenable&lt;unknown&gt; {
    // * Save body to Leo if a change has been made to the body 'document' so far
    // let q_savePromise: Promise&lt;boolean&gt;;
    // if (
    //     this._bodyLastChangedDocument &amp;&amp;
    //     (this._bodyLastChangedDocument.isDirty || this._editorTouched) &amp;&amp;
    //     !this._bodyLastChangedDocumentSaved
    // ) {
    //     // * Is dirty and unsaved, so proper save is in order
    //     const w_document = this._bodyLastChangedDocument; // backup for bodySaveDocument before reset
    //     this._bodyLastChangedDocumentSaved = true;
    //     this._editorTouched = false;
    //     q_savePromise = this._bodySaveDocument(w_document, p_forcedVsCodeSave);
    // } else if (
    //     p_forcedVsCodeSave &amp;&amp;
    //     this._bodyLastChangedDocument &amp;&amp;
    //     this._bodyLastChangedDocument.isDirty &amp;&amp;
    //     this._bodyLastChangedDocumentSaved
    // ) {
    //     // * Had 'forcedVsCodeSave' and isDirty only, so just clean up dirty VSCODE document flag.
    //     this._bodyLastChangedDocument.save(); // ! USED INTENTIONALLY: This trims trailing spaces
    //     q_savePromise = this._bodySaveSelection(); // just save selection if it's changed
    // } else {
    //     this._bodyLastChangedDocumentSaved = true;
    //     q_savePromise = this._bodySaveSelection();  // just save selection if it's changed
    // }
    // return q_savePromise.then((p_result) =&gt; {
    //     return p_result;
    // }, (p_reason) =&gt; {
    //     console.log('BodySave rejected :', p_reason);
    //     return false;
    // });
    return Promise.resolve(true);
}

</t>
<t tx="felix.20211204144931.3">/**
 * * Saves the cursor position along with the text selection range and scroll position
 * @returns Promise that resolves when the "setSelection" action returns from Leo's side
 */
private _bodySaveSelection(): Thenable&lt;unknown&gt; {
    // if (this._selectionDirty &amp;&amp; this._selection) {
    //     // Prepare scroll data separately
    //     // ! TEST NEW SCROLL WITH SINGLE LINE NUMBER
    //     let w_scroll: number;
    //     if (this._selectionGnx === this._scrollGnx &amp;&amp; this._scrollDirty) {
    //         w_scroll = this._scroll?.start.line || 0;
    //     } else {
    //         w_scroll = 0;
    //     }
    //     const w_param: BodySelectionInfo = {
    //         gnx: this._selectionGnx,
    //         scroll: w_scroll,
    //         insert: {
    //             line: this._selection.active.line || 0,
    //             col: this._selection.active.character || 0,
    //         },
    //         start: {
    //             line: this._selection.start.line || 0,
    //             col: this._selection.start.character || 0,
    //         },
    //         end: {
    //             line: this._selection.end.line || 0,
    //             col: this._selection.end.character || 0,
    //         },
    //     };
    //     // console.log("set scroll to leo: " + w_scroll + " start:" + this._selection.start.line);

    //     this._scrollDirty = false;
    //     this._selectionDirty = false; // don't wait for return of this call
    //     return this.sendAction(Constants.LEOBRIDGE.SET_SELECTION, JSON.stringify(w_param)).then(
    //         (p_result) =&gt; {
    //             return Promise.resolve(true);
    //         }
    //     );
    // } else {
    //     return Promise.resolve(true);
    // }
    return Promise.resolve(true);
}

</t>
<t tx="felix.20211204144931.4">/**
 * * Sets new body text on leo's side, and may optionally save vsCode's body editor (which will trim spaces)
 * @param p_document Vscode's text document which content will be used to be the new node's body text in Leo
 * @param p_forcedVsCodeSave Flag to also have vscode 'save' the content of this editor through the filesystem
 * @returns a promise that resolves when the complete saving process is finished
 */
private _bodySaveDocument(
    p_document: vscode.TextDocument,
    p_forcedVsCodeSave?: boolean
): Thenable&lt;unknown&gt; {
    // if (p_document) {
    //     // * Fetch gnx and document's body text first, to be reused more than once in this method
    //     const w_param = {
    //         gnx: utils.leoUriToStr(p_document.uri),
    //         body: p_document.getText(),
    //     };
    //     this.sendAction(Constants.LEOBRIDGE.SET_BODY, JSON.stringify(w_param)); // Don't wait for promise
    //     // This bodySaveSelection is placed on the stack right after saving body, returns promise either way
    //     return this._bodySaveSelection().then(() =&gt; {
    //         this._refreshType.states = true;
    //         this.getStates();
    //         if (p_forcedVsCodeSave) {
    //             return p_document.save(); // ! USED INTENTIONALLY: This trims trailing spaces
    //         }
    //         return Promise.resolve(p_document.isDirty);
    //     });
    // } else {
    //     return Promise.resolve(false);
    // }
    return Promise.resolve(true);
}

</t>
<t tx="felix.20211204144931.5">/**
 * * Sets new body text on leo's side before vscode closes itself if body is dirty
 * @param p_document Vscode's text document which content will be used to be the new node's body text in Leo
 * @returns a promise that resolves when the complete saving process is finished
 */
private _bodySaveDeactivate(
    p_document: vscode.TextDocument
): Thenable&lt;unknown&gt; {
    // const w_param = {
    //     gnx: utils.leoUriToStr(p_document.uri),
    //     body: p_document.getText(),
    // };
    // return this.sendAction(Constants.LEOBRIDGE.SET_BODY, JSON.stringify(w_param));
    return Promise.resolve(true);
}

</t>
<t tx="felix.20211204181418.1">/**
 * * Perform insert and rename commands
 */
private _insertAndSetHeadline(p_name?: string, p_asChild?: boolean): any {
    const LEOCMD = Constants.LEO_COMMANDS;
    const w_command = p_asChild ? LEOCMD.INSERT_CHILD_PNODE : LEOCMD.INSERT_PNODE;
    const c = g.app.windowList[this.frameIndex].c;
    const u = c.undoer;
    let value: any = c.doCommandByName(w_command);
    if (!p_name) {
        return value;
    }
    const undoData = u.beforeChangeHeadline(c.p);
    c.setHeadString(c.p, p_name);  // Set v.h *after* calling the undoer's before method.
    if (!c.changed) {
        c.setChanged();
    }
    u.afterChangeHeadline(c.p, 'Edit Headline', undoData);
    return value;
}

</t>
<t tx="felix.20211208011642.1">/**
 * * Overridden 'good' minibuffer commands
 */
public static MINIBUFFER_OVERRIDDEN_COMMANDS: { [key: string]: string } = {
    // "tag-children": Constants.COMMANDS.TAG_CHILDREN,
    // "clone-find-tag": Constants.COMMANDS.CLONE_FIND_TAG,
    // "import-file": Constants.COMMANDS.IMPORT_ANY_FILE,
    // "redo": Constants.COMMANDS.REDO,
    // "undo": Constants.COMMANDS.UNDO,
    // "clone-find-all": Constants.COMMANDS.CLONE_FIND_ALL,
    // "clone-find-all-flattened": Constants.COMMANDS.CLONE_FIND_ALL_FLATTENED,

    // 'import-MORE-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-free-mind-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-jupyter-notebook': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-legacy-external-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-mind-jet-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-tabbed-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-todo-text-files': Constants.COMMANDS.IMPORT_ANY_FILE,
    // 'import-zim-folder': Constants.COMMANDS.IMPORT_ANY_FILE,

    // 'file-new': Constants.COMMANDS.NEW_FILE,
    // 'file-open-by-name': Constants.COMMANDS.OPEN_FILE,
    // 'new': Constants.COMMANDS.NEW_FILE,
    // 'open-outline': Constants.COMMANDS.OPEN_FILE,
    // 'file-save': Constants.COMMANDS.SAVE_FILE,
    // 'file-save-as': Constants.COMMANDS.SAVE_AS_FILE,
    // 'file-save-as-leojs': Constants.COMMANDS.SAVE_AS_LEOJS,
    // 'file-save-as-unzipped': Constants.COMMANDS.SAVE_AS_FILE,
    // 'file-save-by-name': Constants.COMMANDS.SAVE_AS_FILE,
    // 'file-save-to': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save': Constants.COMMANDS.SAVE_FILE,
    // 'save-as': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save-file': Constants.COMMANDS.SAVE_FILE,
    // 'save-file-as': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save-file-as-leojs': Constants.COMMANDS.SAVE_AS_LEOJS,
    // 'save-file-as-unzipped': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save-file-by-name': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save-file-to': Constants.COMMANDS.SAVE_AS_FILE,
    // 'save-to': Constants.COMMANDS.SAVE_AS_FILE,

    // 'clone-find-all-flattened-marked': Constants.COMMANDS.CLONE_FIND_FLATTENED_MARKED,
    // 'clone-find-all-marked': Constants.COMMANDS.CLONE_FIND_MARKED,

    // 'clone-marked-nodes': Constants.COMMANDS.CLONE_MARKED_NODES,

    // 'cfa': Constants.COMMANDS.CLONE_FIND_ALL,
    // 'cfam': Constants.COMMANDS.CLONE_FIND_MARKED,
    // 'cff': Constants.COMMANDS.CLONE_FIND_ALL_FLATTENED,
    // 'cffm': Constants.COMMANDS.CLONE_FIND_FLATTENED_MARKED,
    // 'cft': Constants.COMMANDS.CLONE_FIND_TAG,

    // 'git-diff': Constants.COMMANDS.GIT_DIFF,
    // 'gd': Constants.COMMANDS.GIT_DIFF,

    // 'find-tab-open': Constants.COMMANDS.START_SEARCH,
    // 'find-clone-all': Constants.COMMANDS.CLONE_FIND_ALL,
    // 'find-clone-all-flattened': Constants.COMMANDS.CLONE_FIND_ALL_FLATTENED,
    // 'find-clone-tag': Constants.COMMANDS.CLONE_FIND_TAG,
    // 'find-all': Constants.COMMANDS.FIND_ALL,
    // 'start-search': Constants.COMMANDS.START_SEARCH,
    // 'find-next': Constants.COMMANDS.FIND_NEXT,
    // 'find-prev': Constants.COMMANDS.FIND_PREVIOUS,
    // 'search-backward': Constants.COMMANDS.FIND_NEXT,
    // 'search-forward': Constants.COMMANDS.FIND_PREVIOUS,
    // 'find-var': Constants.COMMANDS.FIND_VAR,
    // 'find-def': Constants.COMMANDS.FIND_DEF,
    // 'replace': Constants.COMMANDS.REPLACE,
    // 'replace-all': Constants.COMMANDS.REPLACE_ALL,
    // 'change-all': Constants.COMMANDS.REPLACE_ALL,
    // 'change-then-find': Constants.COMMANDS.REPLACE_THEN_FIND,
    // 'replace-then-find': Constants.COMMANDS.REPLACE_THEN_FIND,
    // 'show-find-options': Constants.COMMANDS.START_SEARCH,
    // 'toggle-find-ignore-case-option': Constants.COMMANDS.TOGGLE_FIND_IGNORE_CASE_OPTION,
    // 'toggle-find-in-body-option': Constants.COMMANDS.TOGGLE_FIND_SEARCH_BODY_OPTION,
    // 'toggle-find-in-headline-option': Constants.COMMANDS.TOGGLE_FIND_SEARCH_HEADLINE_OPTION,
    // 'toggle-find-mark-changes-option': Constants.COMMANDS.TOGGLE_FIND_MARK_CHANGES_OPTION,
    // 'toggle-find-mark-finds-option': Constants.COMMANDS.TOGGLE_FIND_MARK_FINDS_OPTION,
    // 'toggle-find-regex-option': Constants.COMMANDS.TOGGLE_FIND_REGEXP_OPTION,
    // 'toggle-find-word-option': Constants.COMMANDS.TOGGLE_FIND_WORD_OPTION,

    // 'goto-next-history-node': Constants.COMMANDS.PREV_NODE,
    // 'goto-prev-history-node': Constants.COMMANDS.NEXT_NODE,


};

</t>
<t tx="felix.20211212205241.1">public replaceClipboardWith(s: string): Thenable&lt;void&gt; {
    this.clipboardContent = s; // also set immediate clipboard string
    return vscode.env.clipboard.writeText(s);
}

</t>
<t tx="felix.20220103203600.1">public asyncGetTextFromClipboard(): Thenable&lt;string&gt; {
    return vscode.env.clipboard.readText().then((s) =&gt; {
        // also set immediate clipboard string for possible future read
        this.clipboardContent = s;
        return this.getTextFromClipboard();
    });
}

</t>
<t tx="felix.20220103222715.1">/**
 * * Overridden 'good' minibuffer command name strings
 */
public static MINIBUFFER_OVERRIDDEN_NAMES: { [key: string]: string } = {
    'paste-node': 'async-paste-node',
    'paste-retaining-clones': 'async-paste-retaining-clones',
    'paste-as-template': 'async-paste-as-template'
};
</t>
<t tx="felix.20220107223824.1">public runOpenFileDialog(
    c: Commands,
    title: string,
    filetypes: [string, string][],
    defaultExtension: string,
    multiple?: boolean
): Thenable&lt;string[]&gt; {
    // convert to { [name: string]: string[] } typing
    const types: { [name: string]: string[] } = utils.convertLeoFiletypes(filetypes);
    return vscode.window.showOpenDialog(
        {
            title: title,
            canSelectMany: !!multiple,
            filters: types
        }
    ).then((p_names) =&gt; {
        const names: string[] = [];
        if (p_names &amp;&amp; p_names.length) {
            p_names.forEach(name =&gt; {
                names.push(name.fsPath);
            });
        }
        return names;
    });
}

</t>
<t tx="felix.20220108211750.1">public runAskOkDialog(
    c: Commands,
    title: string,
    message: string,
    buttonText?: string
): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage(title, {
        modal: true,
        detail: message
    });
}

</t>
<t tx="felix.20220108211806.1">public runSaveFileDialog(
    c: Commands,
    title: string,
    filetypes: [string, string][],
    defaultExtension: string,
    // c,
    // c.mFileName,
    // "Save",
    // [["Leo files", "*.leo *.db"]], // Array of arrays (one in this case)
    // g.defaultLeoFileExtension(c)
): Thenable&lt;string&gt; {
    // convert to { [name: string]: string[] } typing
    const types: { [name: string]: string[] } = utils.convertLeoFiletypes(filetypes);
    return vscode.window.showSaveDialog(
        {
            title: title,
            filters: types
        }
    ).then((p_uri) =&gt; {
        if (p_uri) {
            return p_uri.fsPath;
        } else {
            return "";
        }
    });
}

</t>
<t tx="felix.20220109180351.1">/**
 * Convert Leo's internal filetype descriptions array
 * to vscode's option format for open/save dialogs.
 */
export function convertLeoFiletypes(p_filetypes: [string, string][]): { [name: string]: string[] } {
    /*
        from :
            [
                ["", ""],
                ["Leo files", "*.leo *.db"]
            ],

        to :
        {
            'Images': ['png', 'jpg']
            'TypeScript': ['ts', 'tsx']
        }

    */
    const w_types: { [name: string]: string[] } = {};
    p_filetypes.forEach(type =&gt; {
        w_types[type[0]] = type[1].split(" ").map((p_entry) =&gt; {

            return p_entry.startsWith("*.") ? p_entry.substring(2) : p_entry;
        });
    });
    return w_types;
}
</t>
<t tx="felix.20220109220155.1">public runAskYesNoDialog(
    c: Commands,
    title: string,
    message: string

): Thenable&lt;string&gt; {
    return vscode.window
        .showInformationMessage(
            title,
            {
                modal: true,
                detail: message
            },
            ...[Constants.USER_MESSAGES.YES, Constants.USER_MESSAGES.NO]
        )
        .then((answer) =&gt; {
            if (answer === Constants.USER_MESSAGES.YES) {
                return Constants.USER_MESSAGES.YES.toLowerCase();
            } else {
                return Constants.USER_MESSAGES.NO.toLowerCase();
            }
        });
}

</t>
<t tx="felix.20220124223019.1">@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20220124223042.1">/**
 * SVG string for treeview icons required for web-extension support
 */
export class IconConstants {

    public static nodeIcons: string[] = [
        // 0 - 7
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#a4a59e"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        // 8 - 15
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;',
        '&lt;path d="M7.074 4.5v8h1v-8z" fill="#e54a16"/&gt;&lt;path d="M0 4v9h15.15V4zm1 1h13.15v7H1z" fill="#4d4d4d"/&gt;&lt;path d="M9.075 6v5h4.075V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;&lt;path d="M3.56 5.65v2h1v-.279a1.5 1.5 0 11-2.27 1.904l-.923.395A2.5 2.5 0 006.074 8.5a2.5 2.5 0 00-.824-1.85h.31v-1z" fill="#e54a16"/&gt;'
    ];

    public static scriptButtons: string[] = [
        '&lt;path fill="#c5c5c5" d="M14 7v1H8v6H7V8H1V7h6V1h1v6h6z"/&gt;',
        '&lt;path fill="#424242" d="M14 7v1H8v6H7V8H1V7h6V1h1v6h6z"/&gt;'
    ];

    public static button: string[] = [
        '&lt;path d="M2.202 6.678c-.388.34-.42.704-.42 1.3.235 1.64 3.04 2.669 5.85 2.679 2.795.01 5.64-.986 5.958-2.582l.002-.027c.043-.616-.048-.946-.39-1.25-.3-.2-.527-.24-.718.025 0 1.242-2.145 2.248-4.79 2.249-2.647 0-4.793-1.007-4.794-2.249.001-.056-.102-.201-.2-.282-.158-.09-.386.03-.498.137z" fill="#c5c5c5" fill-opacity=".250"/&gt;&lt;path style="shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1" d="M7.697 1.219c-1.368 0-2.61.258-3.552.707-.842.4-1.504.99-1.637 1.756-.043.148-.018.268-.03.423v1.5C1.575 6.141.915 6.844.823 7.711c-.027.13-.01.271-.013.414v2.357h.003c.004.077.014.153.026.227.155.972 1 1.746 2.125 2.281 1.246.593 2.904.94 4.734.94s3.493-.347 4.74-.94c1.126-.535 1.972-1.31 2.126-2.283.033-.147.019-.251.029-.398V8.082c.019-.139-.015-.256-.022-.377-.082-.752-.576-1.385-1.3-1.889-.12-.078-.237-.157-.352-.236V4.086c-.003-.136-.015-.236-.022-.352-.11-.79-.781-1.4-1.642-1.808-.944-.45-2.189-.707-3.557-.707zm0 1c1.24 0 2.36.244 3.125.61.68.322 1.015.7 1.074 1.028.01.133.015.313.019.522.012.662.003 1.624.003 2.355l-.002.028a1.505 1.505 0 01-.05.293c-.03.071-.075.144-.132.218-.629.691-1.493.887-2.297 1.112a8.893 8.893 0 01-3.355.017c-.04-.007-.084-.01-.123-.017h-.002c-.812-.114-1.408-.452-2.039-.85h-.002a1.421 1.421 0 01-.353-.416c-.075-.1-.075-.224-.083-.33V4.148c.002-.177.004-.125.01-.28.057-.326.394-.712 1.084-1.04.766-.364 1.884-.61 3.123-.61zM2.48 6.809c-.002.09.019.184.028.27.128.77.791 1.366 1.638 1.769.943.448 2.183.705 3.551.705 1.368 0 2.613-.257 3.557-.705.853-.406 1.522-1.007 1.642-1.787.02-.095.015-.162.022-.252.355.299.574.61.638.978.044.176.02.277.036.49v1.961c.017.204-.015.188-.031.383-.122.495-.631 1.028-1.553 1.467-1.068.508-2.609.842-4.31.842-1.703 0-3.237-.334-4.305-.842-.891-.424-1.398-.935-1.541-1.416-.012-.064-.03-.127-.043-.19V8.266c-.016-.3-.018-.553.16-.852.11-.215.282-.413.511-.605z" fill="#c5c5c5"/&gt;&lt;path d="M7.697 2.219c-1.239 0-2.357.245-3.123.61-.655.31-.984.673-1.064.987a4.241 1.794 0 00-.02.159 4.241 1.794 0 004.242 1.793 4.241 1.794 0 004.18-1.504 10.7 10.7 0 00-.016-.407c-.06-.328-.395-.706-1.074-1.029-.765-.365-1.885-.61-3.125-.61z" fill="#c5c5c5" fill-opacity=".250"/&gt;',
        '&lt;path d="M1.777 7.966v2.885c.085.408.031.125.043.189 1.254 1.878 3.933 2.045 5.877 2.059 2.33-.098 4.586-.247 5.887-2.088.016-.195.048-.178.031-.382V7.966c-.198 1.667-3.12 2.718-5.982 2.708-2.821-.01-5.638-1.057-5.856-2.708z" fill="#424242" fill-opacity=".250"/&gt;&lt;path d="M3.426 5.35v1.83c.008.106.008.23.082.33 2.407 1.93 6.178 1.828 8.412-.065a1.49 1.49 0 00.053-.32V3.924c-.625 2.272-6.566 2.393-8.18.66-.182-.197-.31-.417-.338-.539z" fill="#424242" fill-opacity=".250"/&gt;&lt;path d="M7.697 1.219c-1.368 0-2.61.258-3.552.707-.842.4-1.504.99-1.637 1.756-.043.148-.018.268-.03.423v1.5C1.575 6.141.915 6.844.823 7.711c-.027.13-.01.271-.013.414v2.357h.003c.004.077.014.153.026.227.155.972 1 1.746 2.125 2.281 1.246.593 2.904.94 4.734.94s3.493-.347 4.74-.94c1.126-.535 1.972-1.31 2.126-2.283.033-.147.019-.251.029-.398V8.082c.019-.139-.015-.256-.022-.377-.082-.752-.576-1.385-1.3-1.889-.12-.078-.237-.157-.352-.236V4.086c-.003-.136-.015-.236-.022-.352-.11-.79-.781-1.4-1.642-1.808-.944-.45-2.189-.707-3.557-.707zm0 1c1.24 0 2.36.244 3.125.61.68.322 1.015.7 1.074 1.028.01.133.015.313.019.522.012.662.003 1.624.003 2.355l-.002.028a1.505 1.505 0 01-.05.293c-.03.071-.075.144-.132.218-.629.691-1.493.887-2.297 1.112a8.893 8.893 0 01-3.355.017c-.04-.007-.084-.01-.123-.017h-.002c-.812-.114-1.408-.452-2.039-.85h-.002a1.421 1.421 0 01-.353-.416c-.075-.1-.075-.224-.083-.33V4.148c.002-.177.004-.125.01-.28.057-.326.394-.712 1.084-1.04.766-.364 1.884-.61 3.123-.61zM2.48 6.809c-.002.09.019.184.028.27.128.77.791 1.366 1.638 1.769.943.448 2.183.705 3.551.705 1.368 0 2.613-.257 3.557-.705.853-.406 1.522-1.007 1.642-1.787.02-.095.015-.162.022-.252.355.299.574.61.638.978.044.176.02.277.036.49v1.961c.017.204-.015.188-.031.383-.122.495-.631 1.028-1.553 1.467-1.068.508-2.609.842-4.31.842-1.703 0-3.237-.334-4.305-.842-.891-.424-1.398-.935-1.541-1.416-.012-.064-.03-.127-.043-.19V8.266c-.016-.3-.018-.553.16-.852.11-.215.282-.413.511-.605z" style="shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1" fill="#424242"/&gt;'
    ];

    public static leoDocuments: string[] = [
        '&lt;path d="M2.875 1.21h10.566v8.482H2.875z" fill="#7c2504"/&gt;&lt;path d="M11.093 1.21c-1.14.782-1.827 2.105-1.828 3.523 0 1.747 1.023 3.246 2.482 3.89v6.021h1.694V1.21zm-8.218 0V14.88h1.713V9.009a4.073 4.225 0 003.167-4.115A4.073 4.225 0 005.673 1.21z" fill="#b04620"/&gt;&lt;path d="M6.35 6.339c.12.188.21.425.174.645-.245.565-.76 1.076-1.191 1.44-.73.668-1.442.894-2.433.993V4.002C4 4.79 5.58 5.269 6.35 6.339z" fill="#c96b4b"/&gt;&lt;path d="M4.332 8.389c-.158 0-.79.316-.79.316l-.65.561h-.07l-.034 3.3.333.28.562-.105c.37-.073.72-.394 1.106-.368 0 0-.368.375-.457.614-.177.595-.124 1.405.334 1.79.25.201.612.202.93.246 1.464-.037 4.222.01 5.74.035.626-.22.74-.879.841-1.422.07-.409.049-.903-.193-1.21-.215-.265-.877-.527-.877-.527s1.117.332 1.68.482c.2.054.601.15.601.15l.123-3.844-1.035-.298-1.176.07c-1.934.446-3.108.225-4.914.245l-1.053-.28s-.843-.035-1-.035z" fill="#e4dcc8"/&gt;&lt;path d="M4.708 2.514c-.947.022-1.475.03-1.808 1.194-.061.43.13.923.439 1.228.415.386 1.612.462 2.264.738.249.037.546.14.755 0 .277-.202.345-.987.473-1.37.003-.511-.243-1.192-.649-1.597-.477-.294-.98-.212-1.474-.193zm7.065.1c-.2.002-.405.024-.613.036-.518-.066-.748.086-.983.526-.343.738-.604 2.514.21 2.878.915.34 1.406-.481 2.001-.824.271-.149.585-.198.878-.299.049-1.108.161-1.483-.51-2.018-.322-.249-.648-.301-.983-.298z" fill="#f9f2b3"/&gt;&lt;path d="M2.49.713V10l-1.516.143a.334.334 0 10.063.666l1.453-.138v.59l-1.483.288a.334.334 0 10.127.656l1.356-.263v3.349H13.88v-4.025h1.032a.334.334 0 100-.67h-1.032v-.64l1.054-.108a.334.334 0 10-.067-.665l-.987.101V.713H2.49zm.905.905h9.579v2.411a1.607 1.607 0 00-.088-.224c-.315-.63-.738-.878-1.277-.857-.636.001-1.105.415-1.342 1.009-.152.398-.113.704-.09 1.082.016.24.4.593.692.537.453-.088 1.18-.482 1.757-.765.18-.088.289-.19.348-.303v4.869l-2.427.246a.334.334 0 10.067.665l2.36-.24v.549h-2.405a.334.334 0 100 .669h2.405v3.12H3.395v-.677c.117.087.348.15.436.11.33-.153.357-.46.749-.83.182-.171.323-.42.599-.562.246-.126.727-.052 1.452-.207 1.346-.232 2.858-.122 3.97.085.707.134.891.457 1.033.776.11.248.07.353.247.558.137.16.505.353.716.169.168-.147 0-.502.182-.682.204-.204.28-.442.007-.745-.902-.485-1.542-.586-2.66-.737-.199-.02-.316-.245-.461-.38-.345-.32-.675-.483-1.103-.532.016-.055.037-.204.068-.244.695-.897 1.659-1.467 2.392-1.634.273-.062.157-.392.093-.431-.145-.088-.331-.093-.5-.093-.319.001-.633.08-.95.098-.952.054-1.783.082-2.651.006-.287-.025-.576-.058-.864-.046-.463.02-.554.254-.43.598.045.128.579.135.84.272.423.22.632.51 1.103 1.097.058.071.126.137.167.218.023.046.023.1.03.15-.514.002-.712.127-1.025.46-.363.38-.283.403-1.243.553-.22.034-.458.033-.678.069-.413.067-1.056.097-1.375.472-.062.073-.1.14-.143.208v-.719l2.476-.48a.334.334 0 10-.128-.657l-2.348.456v-.5l2.445-.231a.334.334 0 10-.063-.666l-2.382.225v-5.62c.2.094.516.16.657.221.442.194.737.484 1.025.634.18.094.866.282 1.016.147.222-.2.262-1.117.074-1.538a2.12 2.12 0 00-.651-.854c-.09-.072-.43-.153-.68-.148-.25.004-.556.053-.711.091-.315.079-.473.259-.683.505-.012.012-.031.05-.047.076z" fill="#1c0e01"/&gt;&lt;path d="M4.487 3.186c-.11.182-.05.382.062.533.094.125.222.226.36.298.222.11.36.162.484-.062.151-.264.091-.52-.112-.72-.23-.204-.581-.277-.794-.05zm7 .26c-.326.03-.478.33-.472.633a.91.91 0 00.162.385c.247-.037.604-.197.769-.36.093-.133.21-.369.149-.509-.152-.191-.403-.18-.608-.149z" fill="#fff"/&gt;',
        '&lt;path fill="#3b0000" d="M2.875 1.21h10.566v8.482H2.875z"/&gt;&lt;path fill="#6f0500" d="M11.093 1.21c-1.14.782-1.827 2.105-1.828 3.523 0 1.747 1.023 3.246 2.482 3.89v6.021h1.694V1.21zm-8.218 0v13.67h1.713V9.009a4.073 4.225 0 003.167-4.115A4.073 4.225 0 005.673 1.21z"/&gt;&lt;path fill="#882a0a" d="M6.35 6.339c.12.188.21.425.174.645-.245.565-.76 1.076-1.191 1.44-.73.668-1.442.894-2.433.993V4.002C4 4.79 5.58 5.269 6.35 6.339z"/&gt;&lt;path fill="#a39b87" d="M4.332 8.389c-.158 0-.79.316-.79.316l-.65.561h-.07l-.034 3.3.333.28.562-.105c.37-.073.72-.394 1.106-.368 0 0-.368.375-.457.614-.177.595-.124 1.405.334 1.79.25.201.612.202.93.246 1.464-.037 4.222.01 5.74.035.626-.22.74-.879.841-1.422.07-.409.049-.903-.193-1.21-.215-.265-.877-.527-.877-.527s1.117.332 1.68.482c.2.054.601.15.601.15l.123-3.844-1.035-.298-1.176.07c-1.934.446-3.108.225-4.914.245l-1.053-.28s-.843-.035-1-.035z"/&gt;&lt;path fill="#b8b172" d="M4.708 2.514c-.947.022-1.475.03-1.808 1.194-.061.43.13.923.439 1.228.415.386 1.612.462 2.264.738.249.037.546.14.755 0 .277-.202.345-.987.473-1.37.003-.511-.243-1.192-.649-1.597-.477-.294-.98-.212-1.474-.193zm7.065.1c-.2.002-.405.024-.613.036-.518-.066-.748.086-.983.526-.343.738-.604 2.514.21 2.878.915.34 1.406-.481 2.001-.824.271-.149.585-.198.878-.299.049-1.108.161-1.483-.51-2.018-.322-.249-.648-.301-.983-.298z"/&gt;&lt;path fill="#1f0f01" d="M2.49.713V10l-1.516.143a.334.334 0 10.063.666l1.453-.138v.59l-1.483.288a.334.334 0 10.127.656l1.356-.263v3.349h11.39v-4.025h1.032a.334.334 0 100-.67H13.88v-.64l1.054-.108a.334.334 0 10-.067-.665l-.987.101V.713H2.49zm.905.905h9.579v2.411a1.607 1.607 0 00-.088-.224c-.315-.63-.738-.878-1.277-.857-.636.001-1.105.415-1.342 1.009-.152.398-.113.704-.09 1.082.016.24.4.593.692.537.453-.088 1.18-.482 1.757-.765.18-.088.289-.19.348-.303v4.869l-2.427.246a.334.334 0 10.067.665l2.36-.24v.549h-2.405a.334.334 0 100 .669h2.405v3.12H3.395v-.677c.117.087.348.15.436.11.33-.153.357-.46.749-.83.182-.171.323-.42.599-.562.246-.126.727-.052 1.452-.207 1.346-.232 2.858-.122 3.97.085.707.134.891.457 1.033.776.11.248.07.353.247.558.137.16.505.353.716.169.168-.147 0-.502.182-.682.204-.204.28-.442.007-.745-.902-.485-1.542-.586-2.66-.737-.199-.02-.316-.245-.461-.38-.345-.32-.675-.483-1.103-.532.016-.055.037-.204.068-.244.695-.897 1.659-1.467 2.392-1.634.273-.062.157-.392.093-.431-.145-.088-.331-.093-.5-.093-.319.001-.633.08-.95.098-.952.054-1.783.082-2.651.006-.287-.025-.576-.058-.864-.046-.463.02-.554.254-.43.598.045.128.579.135.84.272.423.22.632.51 1.103 1.097.058.071.126.137.167.218.023.046.023.1.03.15-.514.002-.712.127-1.025.46-.363.38-.283.403-1.243.553-.22.034-.458.033-.678.069-.413.067-1.056.097-1.375.472-.062.073-.1.14-.143.208v-.719l2.476-.48a.334.334 0 10-.128-.657l-2.348.456v-.5l2.445-.231a.334.334 0 10-.063-.666l-2.382.225v-5.62c.2.094.516.16.657.221.442.194.737.484 1.025.634.18.094.866.282 1.016.147.222-.2.262-1.117.074-1.538a2.12 2.12 0 00-.651-.854c-.09-.072-.43-.153-.68-.148-.25.004-.556.053-.711.091-.315.079-.473.259-.683.505-.012.012-.031.05-.047.076z"/&gt;&lt;path fill="#fff" d="M4.487 3.186c-.11.182-.05.382.062.533.094.125.222.226.36.298.222.11.36.162.484-.062.151-.264.091-.52-.112-.72-.23-.204-.581-.277-.794-.05zm7 .26c-.326.03-.478.33-.472.633a.91.91 0 00.162.385c.247-.037.604-.197.769-.36.093-.133.21-.369.149-.509-.152-.191-.403-.18-.608-.149z"/&gt;',
        '&lt;path d="M2.875 1.21h10.566v8.482H2.875z" fill="#7c2504"/&gt;&lt;path d="M11.093 1.21c-1.14.782-1.827 2.105-1.828 3.523 0 1.747 1.023 3.246 2.482 3.89v6.021h1.694V1.21zm-8.218 0V14.88h1.713V9.009a4.073 4.225 0 003.167-4.115A4.073 4.225 0 005.673 1.21z" fill="#b04620"/&gt;&lt;path d="M6.35 6.339c.12.188.21.425.174.645-.245.565-.76 1.076-1.191 1.44-.73.668-1.442.894-2.433.993V4.002C4 4.79 5.58 5.269 6.35 6.339z" fill="#c96b4b"/&gt;&lt;path d="M4.332 8.389c-.158 0-.79.316-.79.316l-.65.561h-.07l-.034 3.3.333.28.562-.105c.37-.073.72-.394 1.106-.368 0 0-.368.375-.457.614-.177.595-.124 1.405.334 1.79.25.201.612.202.93.246 1.464-.037 4.222.01 5.74.035.626-.22.74-.879.841-1.422.07-.409.049-.903-.193-1.21-.215-.265-.877-.527-.877-.527s1.117.332 1.68.482c.2.054.601.15.601.15l.123-3.844-1.035-.298-1.176.07c-1.934.446-3.108.225-4.914.245l-1.053-.28s-.843-.035-1-.035z" fill="#e4dcc8"/&gt;&lt;path d="M4.708 2.514c-.947.022-1.475.03-1.808 1.194-.061.43.13.923.439 1.228.415.386 1.612.462 2.264.738.249.037.546.14.755 0 .277-.202.345-.987.473-1.37.003-.511-.243-1.192-.649-1.597-.477-.294-.98-.212-1.474-.193zm7.065.1c-.2.002-.405.024-.613.036-.518-.066-.748.086-.983.526-.343.738-.604 2.514.21 2.878.915.34 1.406-.481 2.001-.824.271-.149.585-.198.878-.299.049-1.108.161-1.483-.51-2.018-.322-.249-.648-.301-.983-.298z" fill="#f9f2b3"/&gt;&lt;path d="M2.49.713V10l-1.516.143a.334.334 0 10.063.666l1.453-.138v.59l-1.483.288a.334.334 0 10.127.656l1.356-.263v3.349H13.88v-4.025h1.032a.334.334 0 100-.67h-1.032v-.64l1.054-.108a.334.334 0 10-.067-.665l-.987.101V.713H2.49zm.905.905h9.579v2.411a1.607 1.607 0 00-.088-.224c-.315-.63-.738-.878-1.277-.857-.636.001-1.105.415-1.342 1.009-.152.398-.113.704-.09 1.082.016.24.4.593.692.537.453-.088 1.18-.482 1.757-.765.18-.088.289-.19.348-.303v4.869l-2.427.246a.334.334 0 10.067.665l2.36-.24v.549h-2.405a.334.334 0 100 .669h2.405v3.12H3.395v-.677c.117.087.348.15.436.11.33-.153.357-.46.749-.83.182-.171.323-.42.599-.562.246-.126.727-.052 1.452-.207 1.346-.232 2.858-.122 3.97.085.707.134.891.457 1.033.776.11.248.07.353.247.558.137.16.505.353.716.169.168-.147 0-.502.182-.682.204-.204.28-.442.007-.745-.902-.485-1.542-.586-2.66-.737-.199-.02-.316-.245-.461-.38-.345-.32-.675-.483-1.103-.532.016-.055.037-.204.068-.244.695-.897 1.659-1.467 2.392-1.634.273-.062.157-.392.093-.431-.145-.088-.331-.093-.5-.093-.319.001-.633.08-.95.098-.952.054-1.783.082-2.651.006-.287-.025-.576-.058-.864-.046-.463.02-.554.254-.43.598.045.128.579.135.84.272.423.22.632.51 1.103 1.097.058.071.126.137.167.218.023.046.023.1.03.15-.514.002-.712.127-1.025.46-.363.38-.283.403-1.243.553-.22.034-.458.033-.678.069-.413.067-1.056.097-1.375.472-.062.073-.1.14-.143.208v-.719l2.476-.48a.334.334 0 10-.128-.657l-2.348.456v-.5l2.445-.231a.334.334 0 10-.063-.666l-2.382.225v-5.62c.2.094.516.16.657.221.442.194.737.484 1.025.634.18.094.866.282 1.016.147.222-.2.262-1.117.074-1.538a2.12 2.12 0 00-.651-.854c-.09-.072-.43-.153-.68-.148-.25.004-.556.053-.711.091-.315.079-.473.259-.683.505-.012.012-.031.05-.047.076z" fill="#1c0e01"/&gt;&lt;path d="M4.487 3.186c-.11.182-.05.382.062.533.094.125.222.226.36.298.222.11.36.162.484-.062.151-.264.091-.52-.112-.72-.23-.204-.581-.277-.794-.05zm7 .26c-.326.03-.478.33-.472.633a.91.91 0 00.162.385c.247-.037.604-.197.769-.36.093-.133.21-.369.149-.509-.152-.191-.403-.18-.608-.149z" fill="#fff"/&gt;',
        '&lt;path d="M2.875 1.21h10.566v8.482H2.875z" fill="#b45d3c"/&gt;&lt;path d="M11.093 1.21c-1.14.782-1.827 2.105-1.828 3.523 0 1.747 1.023 3.246 2.482 3.89v6.021h1.694V1.21zm-8.218 0v13.67h1.713V9.009a4.073 4.225 0 003.167-4.115A4.073 4.225 0 005.673 1.21z" fill="#e87e58"/&gt;&lt;path d="M6.35 6.339c.12.188.21.425.174.645-.245.565-.76 1.076-1.191 1.44-.73.668-1.442.894-2.433.993V4.002C4 4.79 5.58 5.269 6.35 6.339z" fill="#ffa383"/&gt;&lt;path d="M4.332 8.389c-.158 0-.79.316-.79.316l-.65.561h-.07l-.034 3.3.333.28.562-.105c.37-.073.72-.394 1.106-.368 0 0-.368.375-.457.614-.177.595-.124 1.405.334 1.79.25.201.612.202.93.246 1.464-.037 4.222.01 5.74.035.626-.22.74-.879.841-1.422.07-.409.049-.903-.193-1.21-.215-.265-.877-.527-.877-.527s1.117.332 1.68.482c.2.054.601.15.601.15l.123-3.844-1.035-.298-1.176.07c-1.934.446-3.108.225-4.914.245l-1.053-.28s-.843-.035-1-.035z" fill="#fff"/&gt;&lt;path d="M4.708 2.514c-.947.022-1.475.03-1.808 1.194-.061.43.13.923.439 1.228.415.386 1.612.462 2.264.738.249.037.546.14.755 0 .277-.202.345-.987.473-1.37.003-.511-.243-1.192-.649-1.597-.477-.294-.98-.212-1.474-.193zm7.065.1c-.2.002-.405.024-.613.036-.518-.066-.748.086-.983.526-.343.738-.604 2.514.21 2.878.915.34 1.406-.481 2.001-.824.271-.149.585-.198.878-.299.049-1.108.161-1.483-.51-2.018-.322-.249-.648-.301-.983-.298z" fill="#ffffeb"/&gt;&lt;path d="M2.49.713V10l-1.516.143a.334.334 0 10.063.666l1.453-.138v.59l-1.483.288a.334.334 0 10.127.656l1.356-.263v3.349h11.39v-4.025h1.032a.334.334 0 100-.67H13.88v-.64l1.054-.108a.334.334 0 10-.067-.665l-.987.101V.713H2.49zm.905.905h9.579v2.411a1.607 1.607 0 00-.088-.224c-.315-.63-.738-.878-1.277-.857-.636.001-1.105.415-1.342 1.009-.152.398-.113.704-.09 1.082.016.24.4.593.692.537.453-.088 1.18-.482 1.757-.765.18-.088.289-.19.348-.303v4.869l-2.427.246a.334.334 0 10.067.665l2.36-.24v.549h-2.405a.334.334 0 100 .669h2.405v3.12H3.395v-.677c.117.087.348.15.436.11.33-.153.357-.46.749-.83.182-.171.323-.42.599-.562.246-.126.727-.052 1.452-.207 1.346-.232 2.858-.122 3.97.085.707.134.891.457 1.033.776.11.248.07.353.247.558.137.16.505.353.716.169.168-.147 0-.502.182-.682.204-.204.28-.442.007-.745-.902-.485-1.542-.586-2.66-.737-.199-.02-.316-.245-.461-.38-.345-.32-.675-.483-1.103-.532.016-.055.037-.204.068-.244.695-.897 1.659-1.467 2.392-1.634.273-.062.157-.392.093-.431-.145-.088-.331-.093-.5-.093-.319.001-.633.08-.95.098-.952.054-1.783.082-2.651.006-.287-.025-.576-.058-.864-.046-.463.02-.554.254-.43.598.045.128.579.135.84.272.423.22.632.51 1.103 1.097.058.071.126.137.167.218.023.046.023.1.03.15-.514.002-.712.127-1.025.46-.363.38-.283.403-1.243.553-.22.034-.458.033-.678.069-.413.067-1.056.097-1.375.472-.062.073-.1.14-.143.208v-.719l2.476-.48a.334.334 0 10-.128-.657l-2.348.456v-.5l2.445-.231a.334.334 0 10-.063-.666l-2.382.225v-5.62c.2.094.516.16.657.221.442.194.737.484 1.025.634.18.094.866.282 1.016.147.222-.2.262-1.117.074-1.538a2.12 2.12 0 00-.651-.854c-.09-.072-.43-.153-.68-.148-.25.004-.556.053-.711.091-.315.079-.473.259-.683.505-.012.012-.031.05-.047.076z" fill="#4d4d4d"/&gt;&lt;path d="M4.487 3.186c-.11.182-.05.382.062.533.094.125.222.226.36.298.222.11.36.162.484-.062.151-.264.091-.52-.112-.72-.23-.204-.581-.277-.794-.05zm7 .26c-.326.03-.478.33-.472.633a.91.91 0 00.162.385c.247-.037.604-.197.769-.36.093-.133.21-.369.149-.509-.152-.191-.403-.18-.608-.149z" fill="#fff"/&gt;'
    ];

    public static goto: string[] = [
        '&lt;path d="M0 7v2h2V7zm4 0v2h2V7z" fill="#424242"/&gt;',
        '&lt;path d="M0 7v2h2V7zm4 0v2h2V7z" fill="#c5c5c5"/&gt;',
        '&lt;path d="M2 4v9h11V4zm1 1h9v7H3z" fill="#424242"/&gt;',
        '&lt;path d="M2 4v9h11V4zm1 1h9v7H3z" fill="#c5c5c5"/&gt;',
        '&lt;path d="M11.925 6v5H16V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M11.925 6v5H16V6zm1 1h2.076v3h-2.076z" fill="#42a5f5"/&gt;',
        '&lt;path d="M6.258 2.893l-.104.05-4.633 2.27v2.025c-.01.004-.022.004-.033.008-.72.24-1.264.914-1.42 1.893v.007l-.002.006c-.186 1.454.105 2.893 1.055 4.012a9.644 9.644 0 01-.736.457l.486.875a9.359 9.359 0 001.047-.664c.47.29.963.467 1.441.656l.368-.927c-.4-.159-.738-.282-1.038-.432.014-.015.029-.028.041-.043l.012-.014.012-.013c.225-.31.619-.689 1.02-1.108l2.484 1.217H16V2.893H6.258zm.232 1H15v8.275H6.49l-3.969-1.945V8.127c.283.015.613.075.963.16a1.222 1.222 0 001.194.965A1.222 1.222 0 005.9 8.032a1.222 1.222 0 00-1.222-1.223 1.222 1.222 0 00-.983.498 6.288 6.288 0 00-1.074-.186c-.034-.002-.066.003-.1.002V5.838l3.97-1.945zM1.521 8.334v2.514l1.307.64c-.302.303-.607.61-.861.953-.024.029-.055.055-.08.082-.747-.874-.986-1.985-.828-3.232.086-.534.237-.8.462-.957z" fill="#424242"/&gt;',
        '&lt;path d="M6.258 2.893l-.104.05-4.633 2.27v2.025c-.01.004-.022.004-.033.008-.72.24-1.264.914-1.42 1.893v.007l-.002.006c-.186 1.454.105 2.893 1.055 4.012a9.644 9.644 0 01-.736.457l.486.875a9.359 9.359 0 001.047-.664c.47.29.963.467 1.441.656l.368-.927c-.4-.159-.738-.282-1.038-.432.014-.015.029-.028.041-.043l.012-.014.012-.013c.225-.31.619-.689 1.02-1.108l2.484 1.217H16V2.893H6.258zm.232 1H15v8.275H6.49l-3.969-1.945V8.127c.283.015.613.075.963.16a1.222 1.222 0 001.194.965A1.222 1.222 0 005.9 8.032a1.222 1.222 0 00-1.222-1.223 1.222 1.222 0 00-.983.498 6.288 6.288 0 00-1.074-.186c-.034-.002-.066.003-.1.002V5.838l3.97-1.945zM1.521 8.334v2.514l1.307.64c-.302.303-.607.61-.861.953-.024.029-.055.055-.08.082-.747-.874-.986-1.985-.828-3.232.086-.534.237-.8.462-.957z" fill="#c5c5c5"/&gt;'
    ];

}
</t>
<t tx="felix.20220128232146.1"></t>
<t tx="felix.20220131234257.1">/**
 * * Sets the leoID setting for immediate use, and in next activation
 */
public setIdSetting(p_leoID: string): Promise&lt;unknown&gt; {
    const w_changes: ConfigSetting[] = [{
        code: "leoID",
        value: p_leoID
    }];
    g.app.leoID = p_leoID;
    if (g.app.nodeIndices) {
        g.app.nodeIndices.defaultId = p_leoID;
        g.app.nodeIndices.userId = p_leoID;
    }
    return this.config.setLeojsSettings(w_changes);
}

</t>
<t tx="felix.20220131235418.1">/**
 * * Returns the leoID from the leojs settings
 */
public getIdFromSetting(): string {
    return this.config.leoID;
}

</t>
<t tx="felix.20220201194319.1">/**
 * * Command to get the LeoID from dialog, save it to user settings.
 * Start leojs if the ID is valid, and not already started.
 */
public setLeoIDCommand(): void {
    utils.getIdFromDialog().then((p_id) =&gt; {
        p_id = p_id.trim();
        p_id = g.app.cleanLeoID(p_id, '');
        if (p_id &amp;&amp; p_id.length &gt;= 3 &amp;&amp; utils.isAlphaNumeric(p_id)) {
            // valid id: set in config settings
            this.setIdSetting(p_id);
        } else {
            // Canceled or invalid: (re)warn user.
            this.showLeoIDMessage();
        }
    });
}

</t>
<t tx="felix.20220201195806.1">export function isAlphaNumeric(str: string): boolean {
    let code: number;
    let i: number;
    let len: number;
    for (i = 0, len = str.length; i &lt; len; i++) {
        code = str.charCodeAt(i);
        if (!(code &gt; 47 &amp;&amp; code &lt; 58) &amp;&amp; // numeric (0-9)
            !(code &gt; 64 &amp;&amp; code &lt; 91) &amp;&amp; // upper alpha (A-Z)
            !(code &gt; 96 &amp;&amp; code &lt; 123) // lower alpha (a-z)
        ) {
            return false;
        }
    }
    return true;
};
</t>
<t tx="felix.20220201225503.1">public ensure_commander_visible(c: Commands): void {
    // TODO !
    console.log("TODO ensure_commander_visible");
}

</t>
<t tx="felix.20220201230041.1">/**
 * Show info window about requiring leoID to start
 * and a button to perform the 'set leoID' command.
 */
public showLeoIDMessage(): void {
    vscode.window.showInformationMessage(
        Constants.USER_MESSAGES.SET_LEO_ID_MESSAGE,
        Constants.USER_MESSAGES.ENTER_LEO_ID
    ).then(p_chosenButton =&gt; {
        if (p_chosenButton === Constants.USER_MESSAGES.ENTER_LEO_ID) {
            vscode.commands.executeCommand(Constants.COMMANDS.SET_LEO_ID);
        }
    });
}

</t>
<t tx="felix.20220201235548.1">/**
 * * Set all remaining local objects, set ready flag(s) and refresh all panels
 */
public finishStartup(): void {

    // * Create a single data provider for both outline trees, Leo view and Explorer view
    this._leoTreeProvider = new LeoOutlineProvider(this.nodeIcons, this);
    this._leoTreeView = vscode.window.createTreeView(Constants.TREEVIEW_ID, { showCollapseAll: false, treeDataProvider: this._leoTreeProvider });
    this._leoTreeView.onDidExpandElement((p_event =&gt; this._onChangeCollapsedState(p_event, true, this._leoTreeView)));
    this._leoTreeView.onDidCollapseElement((p_event =&gt; this._onChangeCollapsedState(p_event, false, this._leoTreeView)));
    this._leoTreeView.onDidChangeVisibility((p_event =&gt; this._onTreeViewVisibilityChanged(p_event, false))); // * Trigger 'show tree in Leo's view'
    this._leoTreeExView = vscode.window.createTreeView(Constants.TREEVIEW_EXPLORER_ID, { showCollapseAll: false, treeDataProvider: this._leoTreeProvider });
    this._leoTreeExView.onDidExpandElement((p_event =&gt; this._onChangeCollapsedState(p_event, true, this._leoTreeExView)));
    this._leoTreeExView.onDidCollapseElement((p_event =&gt; this._onChangeCollapsedState(p_event, false, this._leoTreeExView)));
    this._leoTreeExView.onDidChangeVisibility((p_event =&gt; this._onTreeViewVisibilityChanged(p_event, true))); // * Trigger 'show tree in explorer view'
    if (this.config.treeInExplorer) {
        this._lastTreeView = this._leoTreeExView;
    } else {
        this._lastTreeView = this._leoTreeView;
    }

    // * Create Leo Opened Documents Treeview Providers and tree views
    this._leoDocumentsProvider = new LeoDocumentsProvider(this.leoStates, this);
    this._leoDocuments = vscode.window.createTreeView(Constants.DOCUMENTS_ID, { showCollapseAll: false, treeDataProvider: this._leoDocumentsProvider });
    this._leoDocuments.onDidChangeVisibility((p_event =&gt; this._onDocTreeViewVisibilityChanged(p_event, false)));
    this._leoDocumentsExplorer = vscode.window.createTreeView(Constants.DOCUMENTS_EXPLORER_ID, { showCollapseAll: false, treeDataProvider: this._leoDocumentsProvider });
    this._leoDocumentsExplorer.onDidChangeVisibility((p_event =&gt; this._onDocTreeViewVisibilityChanged(p_event, true)));
    this._lastLeoDocuments = this._leoDocumentsExplorer;

    // * Create '@buttons' Treeview Providers and tree views
    this._leoButtonsProvider = new LeoButtonsProvider(this.leoStates, this.buttonIcons);
    this._leoButtons = vscode.window.createTreeView(Constants.BUTTONS_ID, { showCollapseAll: false, treeDataProvider: this._leoButtonsProvider });
    this._leoButtons.onDidChangeVisibility((p_event =&gt; this._onButtonsTreeViewVisibilityChanged(p_event, false)));
    this._leoButtonsExplorer = vscode.window.createTreeView(Constants.BUTTONS_EXPLORER_ID, { showCollapseAll: false, treeDataProvider: this._leoButtonsProvider });
    this._leoButtonsExplorer.onDidChangeVisibility((p_event =&gt; this._onButtonsTreeViewVisibilityChanged(p_event, true)));
    this._lastLeoButtons = this._leoButtonsExplorer;

    // * Create Undos Treeview Providers and tree views
    this._leoUndosProvider = new LeoUndosProvider(this.leoStates, this);
    this._leoUndos = vscode.window.createTreeView(Constants.UNDOS_ID, { showCollapseAll: false, treeDataProvider: this._leoUndosProvider });
    this._leoUndos.onDidChangeVisibility((p_event =&gt; this._onUndosTreeViewVisibilityChanged(p_event, false)));
    this._leoUndosExplorer = vscode.window.createTreeView(Constants.UNDOS_EXPLORER_ID, { showCollapseAll: false, treeDataProvider: this._leoUndosProvider });
    this._leoUndosExplorer.onDidChangeVisibility((p_event =&gt; this._onUndosTreeViewVisibilityChanged(p_event, true)));
    this._lastLeoUndos = this._leoUndosExplorer;

    // * Create Body Pane
    this._leoFileSystem = new LeoBodyProvider(this);
    this._bodyMainSelectionColumn = 1;

    // * Create Status bar Entry
    // this._leoStatusBar = new LeoStatusBar(_context, this);

    // * Leo Find Panel
    // this._leoFindPanelProvider = new LeoFindPanelProvider(
    //     _context.extensionUri,
    //     _context,
    //     this
    // );
    // this._context.subscriptions.push(
    //     vscode.window.registerWebviewViewProvider(
    //         Constants.FIND_ID,
    //         this._leoFindPanelProvider,
    //         { webviewOptions: { retainContextWhenHidden: true } }
    //     )
    // );
    // this._context.subscriptions.push(
    //     vscode.window.registerWebviewViewProvider(
    //         Constants.FIND_EXPLORER_ID,
    //         this._leoFindPanelProvider,
    //         { webviewOptions: { retainContextWhenHidden: true } }
    //     )
    // );

    // * Configuration / Welcome webview
    // this.leoSettingsWebview = new LeoSettingsProvider(_context, this);



    // * React to change in active panel/text editor (window.activeTextEditor) - also fires when the active editor becomes undefined
    // vscode.window.onDidChangeActiveTextEditor((p_editor) =&gt;
    //     this._onActiveEditorChanged(p_editor)
    // );

    // * React to change in selection, cursor position and scroll position
    // vscode.window.onDidChangeTextEditorSelection((p_event) =&gt;
    //     this._onChangeEditorSelection(p_event)
    // );
    // vscode.window.onDidChangeTextEditorVisibleRanges((p_event) =&gt;
    //     this._onChangeEditorScroll(p_event)
    // );

    // * Triggers when a different text editor/vscode window changed focus or visibility, or dragged
    // This is also what triggers after drag and drop, see '_onChangeEditorViewColumn'
    // vscode.window.onDidChangeTextEditorViewColumn((p_columnChangeEvent) =&gt;
    //     this._changedTextEditorViewColumn(p_columnChangeEvent)
    // ); // Also triggers after drag and drop
    // vscode.window.onDidChangeVisibleTextEditors((p_editors) =&gt;
    //     this._changedVisibleTextEditors(p_editors)
    // ); // Window.visibleTextEditors changed
    // vscode.window.onDidChangeWindowState((p_windowState) =&gt;
    //     this._changedWindowState(p_windowState)
    // ); // Focus state of the current window changes

    // * React when typing and changing body pane
    // vscode.workspace.onDidChangeTextDocument((p_textDocumentChange) =&gt;
    //     this._onDocumentChanged(p_textDocumentChange)
    // );

    // * React to configuration settings events
    vscode.workspace.onDidChangeConfiguration((p_configChange) =&gt;
        this._onChangeConfiguration(p_configChange)
    );

    // * React to opening of any file in vscode
    // vscode.workspace.onDidOpenTextDocument((p_document) =&gt;
    //     this._onDidOpenTextDocument(p_document)
    // );

    // * Debounced refresh flags and UI parts, other than the tree and body, when operation(s) are done executing
    this.getStates = debounce(
        this._triggerGetStates,
        Constants.STATES_DEBOUNCE_DELAY,
        { leading: false, trailing: true }
    );
    this.refreshDocumentsPane = debounce(
        this._refreshDocumentsPane,
        Constants.DOCUMENTS_DEBOUNCE_DELAY,
        { leading: false, trailing: true }
    );
    this.refreshUndoPane = debounce(
        this._refreshUndoPane,
        Constants.UNDOS_DEBOUNCE_DELAY,
        { leading: false, trailing: true }
    );
    // Immediate 'throttled' and debounced
    this.launchRefresh = debounce(
        this._launchRefresh,
        Constants.REFRESH_DEBOUNCE_DELAY,
        { leading: false, trailing: true }
    );

    this.leoStates.leoReady = true;

    if (!this.leoStates.fileOpenedReady &amp;&amp; g.app.windowList.length) {
        this._setupOpenedLeoDocument();
        this.leoStates.qLastContextChange.then(() =&gt; {
            this.getStates();
        });
    }

    // * Old startup method
    // setTimeout(() =&gt; {
    //     this._setupRefresh(true,
    //         { tree: true, body: true, documents: true, buttons: true, states: true }
    //     );
    //     this.launchRefresh();
    // }, 10);
}

</t>
<t tx="felix.20220204224240.1">/**
 * Null gui class.
 */
export class NullGui {

    private clipboardContent: string = "";
    public preventRefresh: boolean = false;

    public launchRefresh(): void { }

    public replaceClipboardWith(s: string): Thenable&lt;void&gt; {
        this.clipboardContent = s; // also set immediate clipboard string
        return Promise.resolve();
    }

    public asyncGetTextFromClipboard(): Thenable&lt;string&gt; {
        return Promise.resolve(this.clipboardContent);
    }

    public getTextFromClipboard(): string {
        return this.clipboardContent;
    }

    public getFullVersion(): string {
        return "LeoJS NullGui";
    }

    public addLogPaneEntry(...args: any[]): void {
        console.log(...args);
    }

    public runOpenFileDialog(
        c: Commands,
        title: string,
        filetypes: [string, string][],
        defaultExtension: string,
        multiple?: boolean
    ): Thenable&lt;string[]&gt; {
        return Promise.resolve([]);
    }

    public runSaveFileDialog(
        c: Commands,
        title: string,
        filetypes: [string, string][],
        defaultExtension: string,
    ): Thenable&lt;string&gt; {
        return Promise.resolve("");
    }

    public runAskOkDialog(
        c: Commands,
        title: string,
        message: string,
        buttonText?: string
    ): Thenable&lt;unknown&gt; {
        return Promise.resolve("");
    }

    public runAskYesNoDialog(
        c: Commands,
        title: string,
        message: string
    ): Thenable&lt;string&gt; {
        return Promise.resolve("");
    }

    public runAskYesNoCancelDialog(
        c: Commands,
        title: string,
        message: string
    ): Thenable&lt;string&gt; {
        return Promise.resolve("");
    }

    public showLeoIDMessage(): void {
        vscode.window.showInformationMessage(
            "Leo ID not found. Please enter an id that identifies you uniquely.",
            "Set Leo ID"
        ).then(p_chosenButton =&gt; {
            if (p_chosenButton === "Set Leo ID") {
                vscode.commands.executeCommand(Constants.COMMANDS.SET_LEO_ID);
            }
        });
    }

    public setIdSetting(p_id: string): void { };

    public getIdFromSetting(): string {
        return "";
    }

    public getIdFromDialog(): Thenable&lt;string&gt; {
        return Promise.resolve("");
    }

    public ensure_commander_visible(c: Commands): void {
    }

    public isTextWidget(w: any): boolean {
        return false;
    }

    public isTextWrapper(w: any): boolean {
        return false;
    }
}

</t>
<t tx="felix.20220417151556.1">export function getIdFromDialog(): Thenable&lt;string&gt; {
    return vscode.window.showInputBox({
        title: Constants.USER_MESSAGES.ENTER_LEO_ID,
        prompt: Constants.USER_MESSAGES.GET_LEO_ID_PROMPT

    }).then((p_id) =&gt; {
        if (p_id) {
            return p_id;
        }
        return '';
    });
}

</t>
<t tx="felix.20220417155704.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Position } from "./core/leoNodes";
import { LeoButtonNode } from "./leoButtons";
import { LeoOutlineNode } from "./leoOutline";
import { LeoUI } from "./leoUI";
import { ReqRefresh } from "./types";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20220417155732.1">/**
 * * Make all command/key bindings 
 */
export function makeAllBindings(p_leoUI: LeoUI, p_context: vscode.ExtensionContext): void {
    // Shortcut pointers for readability
    const U = undefined;
    const CMD = Constants.COMMANDS;
    const LEOCMD = Constants.LEO_COMMANDS;

    const NO_REFRESH: ReqRefresh = {};
    const REFRESH_NODE_BODY: ReqRefresh = {
        node: true, // Reveal the returned 'selected position' without changes to the tree
        body: true, // Goto/select another node needs the body pane refreshed
        states: true
    };
    const REFRESH_TREE: ReqRefresh = {
        tree: true,
        states: true
    };
    const REFRESH_TREE_BODY: ReqRefresh = {
        tree: true,
        body: true,
        states: true
    };
    const REFRESH_ALL: ReqRefresh = {
        tree: true,
        body: true,
        states: true,
        documents: true,
        buttons: true
    };

    const w_commands: [string, (...args: any[]) =&gt; any][] = [

        &lt;&lt; Define entries for all commands &gt;&gt;
    ];

    w_commands.map(function (p_command) {
        p_context.subscriptions.push(vscode.commands.registerCommand(...p_command));
    });
}

</t>
<t tx="felix.20220417215549.1">/** 
 * Make all key and commands bindings
 */
public makeAllBindings(): void {
    commandBindings.makeAllBindings(this, this._context);
}

</t>
<t tx="felix.20220419210727.1">/**
 * * Adds a message string to leoInteg's log pane. Used when leoBridge receives an async 'log' command.
 * @param p_message The string to be added in the log
 */
public addLogPaneEntry(p_message: string): void {
    this._leoLogPane.appendLine(p_message);
}

</t>
<t tx="felix.20220505215916.1"></t>
<t tx="felix.20220505215916.2">/**
 * Opens the Nav tab and focus on nav text input
 */
public findQuick(p_string?: string): Thenable&lt;unknown&gt; {
    let w_panelID = '';
    let w_panel: vscode.WebviewView | undefined;
    if (this._lastTreeView === this._leoTreeExView) {
        w_panelID = Constants.FIND_EXPLORER_ID;
        w_panel = this._findPanelWebviewExplorerView;
    } else {
        w_panelID = Constants.FIND_ID;
        w_panel = this._findPanelWebviewView;
    }
    vscode.commands.executeCommand(w_panelID + '.focus').then((p_result) =&gt; {
        if (w_panel &amp;&amp; w_panel.show &amp;&amp; !w_panel.visible) {
            w_panel.show(false);
        }
        const w_message: { [key: string]: string } = { type: 'selectNav' };
        if (p_string &amp;&amp; p_string?.trim()) {
            w_message["text"] = p_string.trim();
        }
        w_panel?.webview.postMessage(w_message);
    });
    return Promise.resolve();
}

</t>
<t tx="felix.20220505215916.3">/**
 * Opens the Nav tab with the selected text as the search string
 */
public findQuickSelected(): Thenable&lt;unknown&gt; {
    if (vscode.window.activeTextEditor) {
        const editor = vscode.window.activeTextEditor;
        const selection = editor.selection;
        if (!selection.isEmpty) {
            const text = editor.document.getText(selection);
            return this.findQuick(text);
        }
    }
    return this.findQuick();
}

</t>
<t tx="felix.20220505215916.4">/**
 * Lists all nodes in reversed gnx order, newest to oldest
 */
public findQuickTimeline(): Thenable&lt;unknown&gt; {
    // return this.sendAction(Constants.LEOBRIDGE.FIND_QUICK_TIMELINE)
    //     .then((p_result: LeoBridgePackage) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         return this.findQuickGoAnywhere(); // Finish by opening and focussing nav pane
    //     });
    return vscode.window.showInformationMessage("TODO: findQuickTimeline");
}

</t>
<t tx="felix.20220505215916.5">/**
 * Lists all nodes that are changed (aka "dirty") since last save.
 */
public findQuickChanged(): Thenable&lt;unknown&gt; {
    // return this.sendAction(Constants.LEOBRIDGE.FIND_QUICK_CHANGED)
    //     .then((p_result: LeoBridgePackage) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         return this.findQuickGoAnywhere(); // Finish by opening and focussing nav pane
    //     });
    return vscode.window.showInformationMessage("TODO: findQuickChanged");

}

</t>
<t tx="felix.20220505215916.6">/**
 * Lists nodes from c.nodeHistory.
 */
public findQuickHistory(): Thenable&lt;unknown&gt; {
    // return this.sendAction(Constants.LEOBRIDGE.FIND_QUICK_HISTORY)
    //     .then((p_result: LeoBridgePackage) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         return this.findQuickGoAnywhere(); // Finish by opening and focussing nav pane
    //     });
    return vscode.window.showInformationMessage("TODO: findQuickHistory");

}

</t>
<t tx="felix.20220505215916.7">/**
 * List all marked nodes.
 */
public findQuickMarked(): Thenable&lt;unknown&gt; {
    // return this.sendAction(Constants.LEOBRIDGE.FIND_QUICK_MARKED)
    //     .then((p_result: LeoBridgePackage) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         return this.findQuickGoAnywhere(); // Finish by opening and focussing nav pane
    //     });
    return vscode.window.showInformationMessage("TODO: findQuickMarked");

}

</t>
<t tx="felix.20220505215916.8">/**
 * Opens goto and focus in depending on passed options
 */
public findQuickGoAnywhere(p_options?: { preserveFocus?: boolean }): Thenable&lt;unknown&gt; {
    let w_panel = "";

    if (this._lastTreeView === this._leoTreeExView) {
        w_panel = Constants.GOTO_EXPLORER_ID;
    } else {
        w_panel = Constants.GOTO_ID;
    }

    vscode.commands.executeCommand(w_panel + '.focus', p_options);

    return Promise.resolve();
}

</t>
<t tx="felix.20220505215916.9">public gotoNavEntry(p_node: LeoGotoNode): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: gotoNavEntry");

    // if (p_node.entryType === 'tag') {

    //     return this._isBusyTriggerSave(false, true)
    //         .then((p_saveResult) =&gt; {

    //             let w_string: string = p_node.label as string;

    //             let w_panelID = '';
    //             let w_panel: vscode.WebviewView | undefined;
    //             if (this._lastTreeView === this._leoTreeExView) {
    //                 w_panelID = Constants.FIND_EXPLORER_ID;
    //                 w_panel = this._findPanelWebviewExplorerView;
    //             } else {
    //                 w_panelID = Constants.FIND_ID;
    //                 w_panel = this._findPanelWebviewView;
    //             }
    //             vscode.commands.executeCommand(w_panelID + '.focus').then((p_result) =&gt; {
    //                 if (w_panel &amp;&amp; w_panel.show &amp;&amp; !w_panel.visible) {
    //                     w_panel.show(false);
    //                 }
    //                 const w_message: { [key: string]: string } = { type: 'selectNav' };
    //                 if (w_string &amp;&amp; w_string?.trim()) {
    //                     w_message["text"] = w_string.trim();
    //                 }
    //                 return w_panel!.webview.postMessage(w_message);
    //             }).then(() =&gt; {
    //                 // Do search
    //                 setTimeout(() =&gt; {
    //                     this.sendAction(
    //                         Constants.LEOBRIDGE.NAV_SEARCH
    //                     ).then((p_package) =&gt; {
    //                         this._leoGotoProvider.refreshTreeRoot();
    //                         this.findQuickGoAnywhere({ preserveFocus: true }); // show but dont change focus
    //                         return p_package;
    //                     });
    //                 }, 10);

    //             });
    //         });

    // }

    // // Was not a tag
    // if (p_node.entryType !== 'generic' &amp;&amp; p_node.entryType !== 'parent') {
    //     return this._isBusyTriggerSave(false, true)
    //         .then((p_saveResult) =&gt; {
    //             return this.sendAction(
    //                 Constants.LEOBRIDGE.GOTO_NAV_ENTRY,
    //                 JSON.stringify({ key: p_node.key })
    //             );
    //         })
    //         .then((p_navEntryResult: LeoBridgePackage) =&gt; {
    //             if (!p_navEntryResult.focus) {
    //                 vscode.window.showInformationMessage('Not found');
    //             } else {
    //                 let w_focusOnOutline = false;
    //                 const w_focus = p_navEntryResult.focus.toLowerCase();

    //                 if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                     // tree
    //                     w_focusOnOutline = true;
    //                 }
    //                 this.launchRefresh(
    //                     {
    //                         tree: true,
    //                         body: true,
    //                         scroll: !w_focusOnOutline,
    //                         documents: false,
    //                         buttons: false,
    //                         states: true,
    //                     },
    //                     w_focusOnOutline
    //                 );
    //             }
    //         });
    // }
    // return Promise.resolve();
}
</t>
<t tx="felix.20220505215924.1"></t>
<t tx="felix.20220505215924.10">/**
 * * Find / Replace All
 * @returns Promise of LeoBridgePackage from execution or undefined if cancelled
 */
public findAll(p_replace: boolean): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: findAll");

    // const w_action: string = p_replace
    //     ? Constants.LEOBRIDGE.REPLACE_ALL
    //     : Constants.LEOBRIDGE.FIND_ALL;

    // let w_searchString: string = this._lastSettingsUsed!.findText;
    // let w_replaceString: string = this._lastSettingsUsed!.replaceText;

    // return this._isBusyTriggerSave(false, true)
    //     .then((p_saveResult) =&gt; {
    //         return this._inputFindPattern()
    //             .then((p_findString) =&gt; {
    //                 if (!p_findString) {
    //                     return true; // Cancelled with escape or empty string.
    //                 }
    //                 w_searchString = p_findString;
    //                 if (p_replace) {
    //                     return this._inputFindPattern(true).then((p_replaceString) =&gt; {
    //                         if (p_replaceString === undefined) {
    //                             return true;
    //                         }
    //                         w_replaceString = p_replaceString;
    //                         return false;
    //                     });
    //                 }
    //                 return false;
    //             });
    //     })
    //     .then((p_cancelled: boolean) =&gt; {
    //         if (this._lastSettingsUsed &amp;&amp; !p_cancelled) {
    //             this._lastSettingsUsed.findText = w_searchString;
    //             this._lastSettingsUsed.replaceText = w_replaceString;
    //             this.saveSearchSettings(this._lastSettingsUsed); // No need to wait, will be stacked.
    //             return this.sendAction(w_action)
    //                 .then((p_findResult: LeoBridgePackage) =&gt; {
    //                     let w_focusOnOutline = false;
    //                     const w_focus = p_findResult.focus!.toLowerCase();
    //                     if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                         // tree
    //                         w_focusOnOutline = true;
    //                     }
    //                     this.loadSearchSettings();
    //                     this.launchRefresh(
    //                         { tree: true, body: true, documents: false, buttons: false, states: true },
    //                         w_focusOnOutline
    //                     );
    //                 });
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.11">/**
 * * Clone Find All / Marked / Flattened
 * @param p_marked flag for finding marked nodes
 * @param p_flat flag to get flattened results
 * @returns Promise of LeoBridgePackage from execution or undefined if cancelled
 */
public cloneFind(p_marked: boolean, p_flat: boolean): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: cloneFind");

    // let w_searchString: string = this._lastSettingsUsed!.findText;
    // let w_action: string;
    // if (p_marked) {
    //     w_action = p_flat
    //         ? Constants.LEOBRIDGE.CLONE_FIND_FLATTENED_MARKED
    //         : Constants.LEOBRIDGE.CLONE_FIND_MARKED;
    // } else {
    //     w_action = p_flat
    //         ? Constants.LEOBRIDGE.CLONE_FIND_ALL_FLATTENED
    //         : Constants.LEOBRIDGE.CLONE_FIND_ALL;
    // }

    // if (p_marked) {
    //     // don't use find methods.
    //     return this.nodeCommand({
    //         action: w_action,
    //         node: undefined,
    //         refreshType: { tree: true, body: true, states: true },
    //         fromOutline: false,
    //     }) || Promise.resolve();
    // }

    // return this._isBusyTriggerSave(false, true)
    //     .then(() =&gt; {
    //         return this._inputFindPattern()
    //             .then((p_findString) =&gt; {
    //                 if (!p_findString) {
    //                     return true; // Cancelled with escape or empty string.
    //                 }
    //                 w_searchString = p_findString;
    //                 return false;
    //             });
    //     })
    //     .then((p_cancelled: boolean) =&gt; {
    //         if (this._lastSettingsUsed &amp;&amp; !p_cancelled) {
    //             this._lastSettingsUsed.findText = w_searchString;
    //             this.saveSearchSettings(this._lastSettingsUsed); // No need to wait, will be stacked.
    //             return this.sendAction(w_action)
    //                 .then((p_cloneFindResult: LeoBridgePackage) =&gt; {
    //                     let w_focusOnOutline = false;
    //                     const w_focus = p_cloneFindResult.focus!.toLowerCase();
    //                     if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                         // tree
    //                         w_focusOnOutline = true;
    //                     }
    //                     this.loadSearchSettings();
    //                     this.launchRefresh(
    //                         { tree: true, body: true, documents: false, buttons: false, states: true },
    //                         w_focusOnOutline
    //                     );
    //                 });
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.12">/**
 * * Set search setting in the search webview
 * @param p_id string id of the setting name
 */
public setSearchSetting(p_id: string): void {
    this._findPanelWebviewExplorerView!.webview.postMessage({ type: 'setSearchSetting', id: p_id });
    this._findPanelWebviewView!.webview.postMessage({ type: 'setSearchSetting', id: p_id });
}

</t>
<t tx="felix.20220505215924.13">/**
 * * Gets the search settings from Leo, and applies them to the find panel webviews
 */
public loadSearchSettings(): void {
    vscode.window.showInformationMessage("TODO: loadSearchSettings");

    // this.sendAction(Constants.LEOBRIDGE.GET_SEARCH_SETTINGS).then(
    //     (p_result: LeoBridgePackage) =&gt; {
    //         const w_searchSettings: LeoGuiFindTabManagerSettings = p_result.searchSettings!;
    //         const w_settings: LeoSearchSettings = {
    //             isTag: w_searchSettings.is_tag,
    //             navText: w_searchSettings.nav_text,
    //             showParents: w_searchSettings.show_parents,
    //             searchOptions: w_searchSettings.search_options,
    //             //Find/change strings...
    //             findText: w_searchSettings.find_text,
    //             replaceText: w_searchSettings.change_text,
    //             // Find options...
    //             wholeWord: w_searchSettings.whole_word,
    //             ignoreCase: w_searchSettings.ignore_case,
    //             regExp: w_searchSettings.pattern_match,
    //             markFinds: w_searchSettings.mark_finds,
    //             markChanges: w_searchSettings.mark_changes,
    //             searchHeadline: w_searchSettings.search_headline,
    //             searchBody: w_searchSettings.search_body,
    //             // 0, 1 or 2 for outline, sub-outline, or node.
    //             searchScope:
    //                 0 +
    //                 (w_searchSettings.suboutline_only ? 1 : 0) +
    //                 (w_searchSettings.node_only ? 2 : 0),
    //         };
    //         if (w_settings.searchScope &gt; 2) {
    //             console.error('searchScope SHOULD BE 0, 1, 2 only: ', w_settings.searchScope);
    //         }
    //         this._lastSettingsUsed = w_settings;
    //         if (this._findPanelWebviewExplorerView) {
    //             this._findPanelWebviewExplorerView.webview.postMessage({
    //                 type: 'setSettings',
    //                 value: w_settings,
    //             });
    //         }
    //         if (this._findPanelWebviewView) {
    //             this._findPanelWebviewView.webview.postMessage({
    //                 type: 'setSettings',
    //                 value: w_settings,
    //             });
    //         }
    //     }
    // );
}

</t>
<t tx="felix.20220505215924.14">/**
 * * Send the settings to the Leo Bridge Server
 * @param p_settings the search settings to be set server side to affect next results
 * @returns the promise from the server call
 */
public saveSearchSettings(p_settings: LeoSearchSettings): Thenable&lt;unknown&gt; {

    return vscode.window.showInformationMessage("TODO: saveSearchSettings");

    // this._lastSettingsUsed = p_settings;
    // // convert to LeoGuiFindTabManagerSettings
    // const w_settings: LeoGuiFindTabManagerSettings = {
    //     // Nav settings
    //     is_tag: p_settings.isTag,
    //     nav_text: p_settings.navText,
    //     show_parents: p_settings.showParents,
    //     search_options: p_settings.searchOptions,
    //     // Find/change strings...
    //     find_text: p_settings.findText,
    //     change_text: p_settings.replaceText,
    //     // Find options...
    //     ignore_case: p_settings.ignoreCase,
    //     mark_changes: p_settings.markChanges,
    //     mark_finds: p_settings.markFinds,
    //     node_only: !!(p_settings.searchScope === 2),
    //     pattern_match: p_settings.regExp,
    //     search_body: p_settings.searchBody,
    //     search_headline: p_settings.searchHeadline,
    //     suboutline_only: !!(p_settings.searchScope === 1),
    //     whole_word: p_settings.wholeWord,
    // };
    // return this.sendAction(
    //     Constants.LEOBRIDGE.SET_SEARCH_SETTINGS,
    //     JSON.stringify({ searchSettings: w_settings })
    // );
}

</t>
<t tx="felix.20220505215924.15">/**
 * * Goto Global Line
 */
public gotoGlobalLine(): void {
    vscode.window.showInformationMessage("TODO: gotoGlobalLine");

    // this.triggerBodySave(false)
    //     .then((p_saveResult: boolean) =&gt; {
    //         return vscode.window.showInputBox({
    //             title: Constants.USER_MESSAGES.TITLE_GOTO_GLOBAL_LINE,
    //             placeHolder: Constants.USER_MESSAGES.PLACEHOLDER_GOTO_GLOBAL_LINE,
    //             prompt: Constants.USER_MESSAGES.PROMPT_GOTO_GLOBAL_LINE,
    //         });
    //     })
    //     .then((p_inputResult?: string) =&gt; {
    //         if (p_inputResult) {
    //             const w_line = parseInt(p_inputResult);
    //             if (!isNaN(w_line)) {
    //                 this.sendAction(
    //                     Constants.LEOBRIDGE.GOTO_GLOBAL_LINE,
    //                     JSON.stringify({ line: w_line })
    //                 ).then((p_resultGoto: LeoBridgePackage) =&gt; {
    //                     if (!p_resultGoto.found) {
    //                         // Not found
    //                     }
    //                     this.launchRefresh(
    //                         {
    //                             tree: true,
    //                             body: true,
    //                             documents: false,
    //                             buttons: false,
    //                             states: true,
    //                         },
    //                         false
    //                     );
    //                 });
    //             }
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.16">/**
 * * Tag Children
 */
public tagChildren(): void {
    vscode.window.showInformationMessage("TODO: tagChildren");

    // this.triggerBodySave(false)
    //     .then((p_saveResult: boolean) =&gt; {
    //         return vscode.window.showInputBox({
    //             title: Constants.USER_MESSAGES.TITLE_TAG_CHILDREN,
    //             placeHolder: Constants.USER_MESSAGES.PLACEHOLDER_TAG,
    //             prompt: Constants.USER_MESSAGES.PROMPT_TAG,
    //         });
    //     })
    //     .then((p_inputResult?: string) =&gt; {
    //         if (p_inputResult &amp;&amp; p_inputResult.trim()) {
    //             p_inputResult = p_inputResult.trim();
    //             // check for special chars first
    //             if (p_inputResult.split(/(&amp;|\||-|\^)/).length &gt; 1) {
    //                 vscode.window.showInformationMessage('Cannot add tags containing any of these characters: &amp;|^-');
    //                 return;
    //             }
    //             this.sendAction(
    //                 Constants.LEOBRIDGE.TAG_CHILDREN,
    //                 JSON.stringify({ tag: p_inputResult })
    //             ).then((p_resultTag: LeoBridgePackage) =&gt; {
    //                 this.launchRefresh(
    //                     {
    //                         tree: true,
    //                         body: false,
    //                         documents: false,
    //                         buttons: false,
    //                         states: true,
    //                     },
    //                     false
    //                 );
    //             });
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.17">/**
 * * Tag Node
 */
public tagNode(): void {
    vscode.window.showInformationMessage("TODO: tagNode");

    // this.triggerBodySave(false)
    //     .then((p_saveResult: boolean) =&gt; {
    //         return vscode.window.showInputBox({
    //             title: Constants.USER_MESSAGES.TITLE_TAG_NODE,
    //             placeHolder: Constants.USER_MESSAGES.PLACEHOLDER_TAG,
    //             prompt: Constants.USER_MESSAGES.PROMPT_TAG,
    //         });
    //     })
    //     .then((p_inputResult?: string) =&gt; {

    //         if (p_inputResult &amp;&amp; p_inputResult.trim()) {
    //             p_inputResult = p_inputResult.trim();
    //             // check for special chars first
    //             if (p_inputResult.split(/(&amp;|\||-|\^)/).length &gt; 1) {
    //                 vscode.window.showInformationMessage('Cannot add tags containing any of these characters: &amp;|^-');
    //                 return;
    //             }
    //             this.sendAction(
    //                 Constants.LEOBRIDGE.TAG_NODE,
    //                 JSON.stringify({ tag: p_inputResult })
    //             ).then((p_resultTag: LeoBridgePackage) =&gt; {
    //                 this.launchRefresh(
    //                     {
    //                         tree: true,
    //                         body: false,
    //                         documents: false,
    //                         buttons: false,
    //                         states: true,
    //                     },
    //                     false
    //                 );
    //             });
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.18">/**
 * * Remove single Tag on selected node
 */
public removeTag(): void {
    vscode.window.showInformationMessage("TODO: removeTag");

    // if (this.lastSelectedNode &amp;&amp; this.lastSelectedNode.u &amp;&amp;
    //     this.lastSelectedNode.u.__node_tags &amp;&amp; this.lastSelectedNode.u.__node_tags.length) {
    //     this.triggerBodySave(false)
    //         .then((p_saveResult: boolean) =&gt; {
    //             return vscode.window.showQuickPick(this.lastSelectedNode!.u.__node_tags, {
    //                 title: Constants.USER_MESSAGES.TITLE_REMOVE_TAG,
    //                 placeHolder: Constants.USER_MESSAGES.PLACEHOLDER_TAG,
    //                 canPickMany: false
    //                 // prompt: Constants.USER_MESSAGES.PROMPT_TAG,
    //             });
    //         })
    //         .then((p_inputResult?: string) =&gt; {
    //             if (p_inputResult &amp;&amp; p_inputResult.trim()) {
    //                 this.sendAction(
    //                     Constants.LEOBRIDGE.REMOVE_TAG,
    //                     JSON.stringify({ tag: p_inputResult.trim() })
    //                 ).then((p_resultTag: LeoBridgePackage) =&gt; {
    //                     this.launchRefresh(
    //                         {
    //                             tree: true,
    //                             body: false,
    //                             documents: false,
    //                             buttons: false,
    //                             states: true,
    //                         },
    //                         false
    //                     );
    //                 });
    //             }
    //         });
    // } else if (this.lastSelectedNode) {
    //     vscode.window.showInformationMessage("No tags on node: " + this.lastSelectedNode.label);
    // } else {
    //     return;
    // }

}

</t>
<t tx="felix.20220505215924.19">/**
 * * Remove all tags on selected node
 */
public removeTags(): void {
    vscode.window.showInformationMessage("TODO: removeTags");

    // if (this.lastSelectedNode &amp;&amp; this.lastSelectedNode.u &amp;&amp;
    //     this.lastSelectedNode.u.__node_tags &amp;&amp; this.lastSelectedNode.u.__node_tags.length) {
    //     this.triggerBodySave(false)
    //         .then((p_saveResult: boolean) =&gt; {
    //             this.sendAction(
    //                 Constants.LEOBRIDGE.REMOVE_TAGS
    //             ).then((p_resultTag: LeoBridgePackage) =&gt; {
    //                 this.launchRefresh(
    //                     {
    //                         tree: true,
    //                         body: false,
    //                         documents: false,
    //                         buttons: false,
    //                         states: true,
    //                     },
    //                     false
    //                 );
    //             });
    //         });
    // } else if (this.lastSelectedNode) {
    //     vscode.window.showInformationMessage("No tags on node: " + this.lastSelectedNode.label);
    // } else {
    //     return;
    // }
}

</t>
<t tx="felix.20220505215924.2">
public navEnter(): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: navEnter");

    // return this._isBusyTriggerSave(false, true).then(() =&gt; {

    //     return this.sendAction(
    //         Constants.LEOBRIDGE.NAV_SEARCH
    //     ).then((p_package) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         this.findQuickGoAnywhere({ preserveFocus: true }); // show but dont change focus
    //         return p_package;
    //     });

    // });
</t>
<t tx="felix.20220505215924.20">/**
 * * Clone Find Tag
 */
public cloneFindTag(): void {
    vscode.window.showInformationMessage("TODO: cloneFindTag");

    // this.triggerBodySave(false)
    //     .then((p_saveResult: boolean) =&gt; {
    //         return vscode.window.showInputBox({
    //             title: Constants.USER_MESSAGES.TITLE_FIND_TAG,
    //             placeHolder: Constants.USER_MESSAGES.PLACEHOLDER_CLONE_FIND_TAG,
    //             prompt: Constants.USER_MESSAGES.PROMPT_CLONE_FIND_TAG,
    //         });
    //     })
    //     .then((p_inputResult?: string) =&gt; {
    //         if (p_inputResult &amp;&amp; p_inputResult.trim()) {
    //             this.sendAction(
    //                 Constants.LEOBRIDGE.CLONE_FIND_TAG,
    //                 JSON.stringify({ tag: p_inputResult.trim() })
    //             ).then((p_resultFind: LeoBridgePackage) =&gt; {
    //                 if (!p_resultFind.found) {
    //                     // Not found
    //                 }
    //                 this.launchRefresh(
    //                     {
    //                         tree: true,
    //                         body: true,
    //                         documents: false,
    //                         buttons: false,
    //                         states: true,
    //                     },
    //                     false
    //                 );
    //             });
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.3">
}

public navTextChange(): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: navTextChange");

    // return this._isBusyTriggerSave(false, true).then(() =&gt; {

    //     return this.sendAction(
    //         Constants.LEOBRIDGE.NAV_HEADLINE_SEARCH
    //     ).then((p_package) =&gt; {
    //         this._leoGotoProvider.refreshTreeRoot();
    //         this.findQuickGoAnywhere({ preserveFocus: true }); // show but dont change focus
    //         return p_package;
    //     });

    // });

}

</t>
<t tx="felix.20220505215924.4">/**
 * * Opens the find panel and selects all &amp; focuses on the find field.
 */
public startSearch(): void {
    let w_panelID = '';
    let w_panel: vscode.WebviewView | undefined;
    if (this._lastTreeView === this._leoTreeExView) {
        w_panelID = Constants.FIND_EXPLORER_ID;
        w_panel = this._findPanelWebviewExplorerView;
    } else {
        w_panelID = Constants.FIND_ID;
        w_panel = this._findPanelWebviewView;
    }
    vscode.commands.executeCommand(w_panelID + '.focus').then((p_result) =&gt; {
        if (w_panel &amp;&amp; w_panel.show &amp;&amp; !w_panel.visible) {
            w_panel.show(false);
        }
        w_panel?.webview.postMessage({ type: 'selectFind' });
    });
}

</t>
<t tx="felix.20220505215924.5"></t>
<t tx="felix.20220505215924.6">/**
 * * Get a find pattern string input from the user
 * @param p_replace flag for doing a 'replace' instead of a 'find'
 * @returns Promise of string or undefined if cancelled
 */
private _inputFindPattern(p_replace?: boolean): Thenable&lt;string | undefined&gt; {
    return vscode.window.showInputBox({
        title: p_replace ? "Replace with" : "Search for",
        prompt: p_replace ? "Type text to replace with and press enter." : "Type text to search for and press enter.",
        placeHolder: p_replace ? "Replace pattern here" : "Find pattern here",
    });
}

</t>
<t tx="felix.20220505215924.7">/**
 * * Find next / previous commands
 * @param p_fromOutline
 * @param p_reverse
 * @returns Promise that resolves when the "launch refresh" is started
 */
public find(p_fromOutline: boolean, p_reverse: boolean): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: find");

    // const w_action: string = p_reverse
    //     ? Constants.LEOBRIDGE.FIND_PREVIOUS
    //     : Constants.LEOBRIDGE.FIND_NEXT;
    // return this._isBusyTriggerSave(false, true)
    //     .then((p_saveResult) =&gt; {
    //         return this.sendAction(w_action, JSON.stringify({ fromOutline: !!p_fromOutline }));
    //     })
    //     .then((p_findResult: LeoBridgePackage) =&gt; {
    //         if (!p_findResult.found || !p_findResult.focus) {
    //             vscode.window.showInformationMessage('Not found');
    //         } else {
    //             let w_focusOnOutline = false;
    //             const w_focus = p_findResult.focus.toLowerCase();
    //             if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                 // tree
    //                 w_focusOnOutline = true;
    //             }
    //             this.launchRefresh(
    //                 {
    //                     tree: true,
    //                     body: true,
    //                     scroll: p_findResult.found &amp;&amp; !w_focusOnOutline,
    //                     documents: false,
    //                     buttons: false,
    //                     states: true,
    //                 },
    //                 w_focusOnOutline
    //             );
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.8">/**
 * * find-var or find-def commands
 * @param p_def find-def instead of find-var
 * @returns Promise that resolves when the "launch refresh" is started
 */
public findSymbol(p_def: boolean): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: findSymbol");

    // const w_action: string = p_def
    //     ? Constants.LEOBRIDGE.FIND_DEF
    //     : Constants.LEOBRIDGE.FIND_VAR;
    // return this._isBusyTriggerSave(false, true)
    //     .then((p_saveResult) =&gt; {
    //         return this.sendAction(w_action, JSON.stringify({ fromOutline: false }));
    //     })
    //     .then((p_findResult: LeoBridgePackage) =&gt; {
    //         if (!p_findResult.found || !p_findResult.focus) {
    //             vscode.window.showInformationMessage('Not found');
    //         } else {
    //             let w_focusOnOutline = false;
    //             const w_focus = p_findResult.focus.toLowerCase();
    //             if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                 // tree
    //                 w_focusOnOutline = true;
    //             }
    //             this.loadSearchSettings();
    //             this.launchRefresh(
    //                 {
    //                     tree: true,
    //                     body: true,
    //                     scroll: p_findResult.found &amp;&amp; !w_focusOnOutline,
    //                     documents: false,
    //                     buttons: false,
    //                     states: true,
    //                 },
    //                 w_focusOnOutline
    //             );
    //         }
    //     });
}

</t>
<t tx="felix.20220505215924.9">/**
 * * Replace / Replace-Then-Find commands
 * @param p_fromOutline
 * @param p_thenFind
 * @returns Promise that resolves when the "launch refresh" is started
 */
public replace(p_fromOutline: boolean, p_thenFind: boolean): Thenable&lt;unknown&gt; {
    return vscode.window.showInformationMessage("TODO: replace");

    // const w_action: string = p_thenFind
    //     ? Constants.LEOBRIDGE.REPLACE_THEN_FIND
    //     : Constants.LEOBRIDGE.REPLACE;
    // return this._isBusyTriggerSave(false, true)
    //     .then((p_saveResult) =&gt; {
    //         return this.sendAction(w_action, JSON.stringify({ fromOutline: !!p_fromOutline }));
    //     })
    //     .then((p_replaceResult: LeoBridgePackage) =&gt; {
    //         if (!p_replaceResult.found || !p_replaceResult.focus) {
    //             vscode.window.showInformationMessage('Not found');
    //         } else {
    //             let w_focusOnOutline = false;
    //             const w_focus = p_replaceResult.focus.toLowerCase();
    //             if (w_focus.includes('tree') || w_focus.includes('head')) {
    //                 // tree
    //                 w_focusOnOutline = true;
    //             }
    //             this.launchRefresh(
    //                 {
    //                     tree: true,
    //                     body: true,
    //                     scroll: true,
    //                     documents: false,
    //                     buttons: false,
    //                     states: true,
    //                 },
    //                 w_focusOnOutline
    //             );
    //         }
    //     });
}

</t>
<t tx="felix.20220505220527.1">export type TGotoTypes = "tag" | "headline" | "body" | "parent" | "generic";

</t>
<t tx="felix.20220505220532.1">export interface LeoGoto {
    key: number; // id from python
    h: string;
    t: TGotoTypes;
}

</t>
<t tx="felix.20220505220537.1">/**
 * * LeoInteg's Enum type for the search scope radio buttons of the find panel.
 */
export const enum LeoSearchScope {
    entireOutline = 0,
    subOutlineOnly,
    nodeOnly
}

</t>
<t tx="felix.20220505220544.1">/**
 * * LeoInteg search settings structure for use with the 'find' webview
 */
export interface LeoSearchSettings {
    // Nav options
    navText: string;
    isTag: boolean;
    showParents: boolean;
    searchOptions: number;
    // Find/change strings...
    findText: string;
    replaceText: string;
    // Find options...
    wholeWord: boolean;
    ignoreCase: boolean;
    regExp: boolean;
    markFinds: boolean;
    markChanges: boolean;
    searchHeadline: boolean;
    searchBody: boolean;
    searchScope: LeoSearchScope; // 0, 1 or 2 for outline, sub-outline, or node.
}

</t>
<t tx="felix.20220505220550.1">/**
 * * Leo's GUI search settings internal structure
 */
export interface LeoGuiFindTabManagerSettings {
    // Nav options
    nav_text: string;
    is_tag: boolean;
    show_parents: boolean;
    search_options: number;
    //Find/change strings...
    find_text: string,
    change_text: string,
    // Find options...
    ignore_case: boolean,
    mark_changes: boolean,
    mark_finds: boolean,
    node_only: boolean,
    pattern_match: boolean,
    search_body: boolean,
    search_headline: boolean,
    suboutline_only: boolean,
    whole_word: boolean
}

</t>
<t tx="felix.20220505220619.1">/**
 * * LeoBody virtual file time information object
 */
export interface BodyTimeInfo {
    ctime: number;
    mtime: number;
}

</t>
<t tx="felix.20220505220626.1">/**
 * * Body position
 * Used in BodySelectionInfo interface
 */
export interface BodyPosition {
    line: number;
    col: number;
}

</t>
<t tx="felix.20220505220630.1">/**
 * * LeoBody cursor active position and text selection state, along with gnx
 */
export interface BodySelectionInfo {
    gnx: string;
    // scroll is stored as-is as the 'scrollBarSpot' in Leo
    // ! TEST scroll as single number only (for Leo vertical scroll value)
    scroll: number;
    // scroll: {
    //     start: BodyPosition;
    //     end: BodyPosition;
    // }
    insert: BodyPosition;
    start: BodyPosition;
    end: BodyPosition;
}

</t>
<t tx="felix.20220505220706.1">/**
 * * Used to select a button's rclick by index
 */
export interface ChooseRClickItem extends vscode.QuickPickItem {
    index: number;
    rclick?: RClick;
}

</t>
<t tx="felix.20220505220722.1">/**
 * * Returned from Leo with buttons data
 */
export interface RClick {
    name: string;
    children: RClick[];
}

</t>
<t tx="felix.20220505221929.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { LeoUI } from "./leoUI";
import { LeoGoto, TGotoTypes } from "./types";
import * as utils from "./utils";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20220505222045.1">/**
 * * Opened Leo documents shown as a list with this TreeDataProvider implementation
 */
export class LeoGotoProvider implements vscode.TreeDataProvider&lt;LeoGotoNode&gt; {

    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoGotoNode | undefined&gt; = new vscode.EventEmitter&lt;LeoGotoNode | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;LeoGotoNode | undefined&gt; = this._onDidChangeTreeData.event;

    private _lastGotoView: vscode.TreeView&lt;LeoGotoNode&gt; | undefined;

    private _topNode: LeoGotoNode | undefined;

    constructor(private _leoUI: LeoUI) { }

    public showGotoPanel(): Thenable&lt;void&gt; {
        if (this._lastGotoView &amp;&amp; this._topNode) {
            return this._lastGotoView.reveal(this._topNode, { select: false, focus: false });
        }
        return Promise.resolve();
    }

    public setLastGotoView(p_view: vscode.TreeView&lt;LeoGotoNode&gt;): void {
        this._lastGotoView = p_view;
    }

    /**
     * * Refresh the whole outline
     */
    public refreshTreeRoot(): void {
        this._onDidChangeTreeData.fire(undefined);
    }

    public getTreeItem(element: LeoGotoNode): Thenable&lt;LeoGotoNode&gt; | LeoGotoNode {
        return element;
    }

    public getChildren(element?: LeoGotoNode): Thenable&lt;LeoGotoNode[]&gt; {

        // if called with element, or not ready, give back empty array as there won't be any children
        if (this._leoUI.leoStates.fileOpenedReady &amp;&amp; !element) {

            // TODO !
            return Promise.resolve([]);

            /* 

            // call action to get get list, and convert to LeoButtonNode(s) array
            return this._leoUI.sendAction(Constants.LEOBRIDGE.GET_GOTO_PANEL).then(p_package =&gt; {
                if (p_package &amp;&amp; p_package.navList) {

                    const w_list: LeoGotoNode[] = [];
                    this._topNode = undefined;
                    const w_navList: LeoGoto[] = p_package.navList;
                    if (w_navList &amp;&amp; w_navList.length) {
                        w_navList.forEach((p_goto: LeoGoto) =&gt; {
                            const w_newNode = new LeoGotoNode(this._leoUI, p_goto, p_package.navOptions!);
                            if (!this._topNode) {
                                this._topNode = w_newNode;
                            }
                            w_list.push(w_newNode);
                        });
                    }
                    return w_list;
                } else {
                    return [];
                }
            });

            */

        } else {
            return Promise.resolve([]); // Defaults to an empty list of children
        }
    }

    public getParent(element: LeoGotoNode): vscode.ProviderResult&lt;LeoGotoNode&gt; | null {
        // Leo documents are just a list, as such, entries are always child of root, so return null
        return null;
    }

}
</t>
<t tx="felix.20220505222101.1">/**
 * * Opened Leo documents tree view node item implementation for usage in a TreeDataProvider
 */
export class LeoGotoNode extends vscode.TreeItem {

    // Context string is checked in package.json with 'when' clauses
    public entryType: TGotoTypes;
    private _id: string;
    private _description: string | boolean;
    private _headline: string;
    private _iconIndex: number; // default to tag
    private _leoUI: LeoUI;
    public key: number; // id from python

    constructor(
        p_leoUI: LeoUI,
        p_gotoEntry: LeoGoto,
        p_navOptions: { isTag: boolean, showParents: boolean },

    ) {
        let w_spacing = "";
        if (p_navOptions.showParents &amp;&amp; !p_navOptions.isTag) {
            w_spacing = "    ";
        }
        let w_label = "";
        if (["tag", "headline"].includes(p_gotoEntry.t)) {
            w_label = w_spacing + p_gotoEntry.h;
        }
        super(w_label);

        // Setup this instance
        this._leoUI = p_leoUI;
        this._id = utils.getUniqueId();
        this.entryType = p_gotoEntry.t;
        this.key = p_gotoEntry.key;
        this._headline = p_gotoEntry.h.trim();

        this._description = false;
        if (this.entryType === 'body') {
            this._iconIndex = 2;
            if (p_navOptions.showParents) {
                this._description = "    " + this._headline;
            } else {
                this._description = "  " + this._headline;
            }
        } else if (this.entryType === 'parent') {
            this._iconIndex = 0;
            this._description = this._headline.trim();
        } else if (this.entryType === 'generic') {
            this._iconIndex = 4;
            this._description = this._headline;
        } else if (this.entryType === 'headline') {
            this._iconIndex = 1;
        } else {
            this._iconIndex = 3; // tag
        }

        this.command = {
            command: Constants.COMMANDS.GOTO_NAV_ENTRY,
            title: '',
            arguments: [this]
        };

    }

    // @ts-ignore
    public get tooltip(): string {
        if (this.entryType !== "generic") {
            return this.entryType.charAt(0).toUpperCase() + this.entryType.slice(1);
        }
        return this._headline;
    }

    // @ts-ignore
    public get description(): string | boolean {
        return this._description;
    }

    // @ts-ignore
    public get iconPath(): Icon | vscode.ThemeIcon | string {
        if (this._iconIndex &lt; 4) {
            return this._leoUI.gotoIcons[this._iconIndex];
        }
        // else return undefined for generic text without icon
        return undefined;
    }

    // @ts-ignore
    public get id(): string {
        // Add prefix and suffix salt to numeric index to prevent accidental duplicates
        // Should be unique when refreshed
        return "g" + this._id + "o";
    }

}
</t>
<t tx="felix.20220505222504.1">/**
 * * Capture instance for further calls on find panel webview
 * @param p_panel The panel (usually that got the latest onDidReceiveMessage)
 */
public setFindPanel(p_panel: vscode.WebviewView): void {
    if (this._lastTreeView === this._leoTreeExView) {
        this._findPanelWebviewExplorerView = p_panel;
    } else {
        this._findPanelWebviewView = p_panel;
    }
}

</t>
<t tx="felix.20220505225023.1">/**
 * * Get new uniqueID
 */
export function getUniqueId(): string {
    const id = uniqueId++;
    return id.toString();
}

</t>
<t tx="felix.20220505225030.1">/**
 * * Unique numeric Id
 */
var uniqueId: number = 0;

</t>
<t tx="felix.20220505225236.1">/**
 * * Build all possible strings for the goto panel
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the goto anywhere tree view
 */
export function buildGotoIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[0]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[1]}${Constants.GUI.SVG_CLOSE}`
            })
        },
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[2]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[3]}${Constants.GUI.SVG_CLOSE}`
            })
        },
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[4]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[5]}${Constants.GUI.SVG_CLOSE}`
            })
        },
        {
            light: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[6]}${Constants.GUI.SVG_CLOSE}`
            }),
            dark: vscode.Uri.from({
                scheme: Constants.GUI.SVG_SHEME,
                path: `${Constants.GUI.SVG_OPEN}${IconConstants.goto[7]}${Constants.GUI.SVG_CLOSE}`
            })
        },
    ];
}

</t>
<t tx="felix.20220508201944.1">/**
 * Redo operation available state
 */
private _leoCanGoBack: boolean = false;
get leoCanGoBack(): boolean {
    return this._leoCanGoBack;
}
set leoCanGoBack(p_value: boolean) {
    this._leoCanGoBack = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_BACK, p_value);
}

</t>
<t tx="felix.20220508201944.2">/**
 * Redo operation available state
 */
private _leoCanGoNext: boolean = false;
get leoCanGoNext(): boolean {
    return this._leoCanGoNext;
}
set leoCanGoNext(p_value: boolean) {
    this._leoCanGoNext = p_value;
    this.qLastContextChange = utils.setContext(Constants.CONTEXT_FLAGS.LEO_CAN_NEXT, p_value);
}

</t>
<t tx="felix.20220508225045.1">{
  "command": "leojs.prevDisabled",
  "when": "false"
},
{
  "command": "leojs.nextDisabled",
  "when": "false"
},
{
  "command": "leojs.promoteDisabled",
  "when": "false"
},
{
  "command": "leojs.demoteDisabled",
  "when": "false"
},
{
  "command": "leojs.hoistDisabled",
  "when": "false"
},
{
  "command": "leojs.deHoistDisabled",
  "when": "false"
},
{
  "command": "leojs.undoDisabled",
  "when": "false"
},
{
  "command": "leojs.redoDisabled",
  "when": "false"
},
</t>
<t tx="felix.20220510214213.1">/** 
 * * Save dirty body pane text to its VNode's 'b' content.
 * @returns Promise that resolves when body is saved in its node's v.b.
 */
public _triggerSave(): Promise&lt;unknown&gt; {
    // TODO: Save dirty body pane text to its VNode's 'b' content.
    return Promise.resolve();
}

</t>
<t tx="felix.20220512205007.1"></t>
<t tx="felix.20220516005841.1">public runAskYesNoCancelDialog(
    c: Commands,
    title: string,
    message: string

): Thenable&lt;string&gt; {
    return vscode.window
        .showInformationMessage(
            title,
            {
                modal: true,
                detail: message
            },
            ...[
                Constants.USER_MESSAGES.YES,
                Constants.USER_MESSAGES.NO
                // Already shows a 'cancel' 
            ]
        )
        .then((answer) =&gt; {
            if (answer === Constants.USER_MESSAGES.YES) {
                return Constants.USER_MESSAGES.YES.toLowerCase();
            } else if (answer === Constants.USER_MESSAGES.NO) {
                return Constants.USER_MESSAGES.NO.toLowerCase();
            } else {
                return Constants.USER_MESSAGES.CANCEL.toLowerCase();
            }
        });
}

</t>
<t tx="felix.20220517002104.1">/**
* * Creates a new Leo file
* @returns the promise started after it's done creating the frame and commander
*/
public async newLeoFile(): Promise&lt;unknown&gt; {

</t>
<t tx="felix.20220517202245.1">{
  "command": "leojs.saveLeoFileFromOutline",
  "when": "viewItem =~ /^leojsDocumentSelectedTitled/",
  "group": "inline@1"
},
{
  "command": "leojs.saveAsLeoFile",
  "when": "viewItem =~ /^leojsDocumentSelectedUntitled/",
  "group": "inline@1"
},
{
  "command": "leojs.saveAsLeoJsFile",
  "when": "viewItem =~ /^leojsDocumentSelectedUntitled/",
  "group": "inline@1"
},
{
  "command": "leojs.closeLeoFile",
  "when": "viewItem =~ /^leojsDocumentSelected/",
  "group": "inline@2"
},
</t>
<t tx="felix.20220517203332.1">{
  "command": "leojs.removeButton",
  "when": "leojsTreeOpened &amp;&amp; viewItem =~ /^leojsButtonNode/",
  "group": "leojsButtonContext1@1"
},
{
  "command": "leojs.gotoScript",
  "when": "leojsTreeOpened &amp;&amp; viewItem =~ /^leojsButtonNode/",
  "group": "leojsButtonContext1@2"
}
</t>
<t tx="felix.20220517212706.1">/**
 * * Show input window to select
 */
private _handleRClicks(p_rclicks: any[], topLevelName?: string): Thenable&lt;any&gt; {
    // private _handleRClicks(p_rclicks: RClick[], topLevelName?: string): Thenable&lt;ChooseRClickItem&gt; {
    /* 
    const w_choices: ChooseRClickItem[] = [];
    let w_index = 0;
    if (topLevelName) {
        w_choices.push(
            { label: topLevelName, picked: true, alwaysShow: true, index: w_index++ }
        );
    }
    w_choices.push(
        ...p_rclicks.map((p_rclick): ChooseRClickItem =&gt; { return { label: p_rclick.name, index: w_index++, rclick: p_rclick }; })
    );

    const w_options: vscode.QuickPickOptions = {
        placeHolder: Constants.USER_MESSAGES.CHOOSE_BUTTON
    };
    return vscode.window.showQuickPick(w_choices, w_options).then((p_picked) =&gt; {
        if (p_picked) {
            this._rclickSelected.push(p_picked.index);
            if (topLevelName &amp;&amp; p_picked.index === 0) {
                return Promise.resolve(p_picked);
            }
            if (p_picked.rclick &amp;&amp; p_picked.rclick.children &amp;&amp; p_picked.rclick.children.length) {
                return this._handleRClicks(p_picked.rclick.children);
            } else {
                return Promise.resolve(p_picked);
            }
        }
        // Escaped
        return Promise.reject();
    });
    */
    return Promise.resolve();
}
</t>
<t tx="felix.20220517212718.1">/**
 * * Finds and goes to the script of an at-button. Used by '@buttons' treeview.
 * @param p_node the node of the at-buttons panel that was right-clicked
 * @returns the launchRefresh promise started after it's done finding the node
 */
public gotoScript(p_node: LeoButtonNode): Promise&lt;boolean&gt; {
    return Promise.resolve(true);
    /* 
    return this._isBusyTriggerSave(false)
        .then((p_saveResult) =&gt; {
            return this.sendAction(
                Constants.LEOBRIDGE.GOTO_SCRIPT,
                JSON.stringify({ index: p_node.button.index })
            );
        })
        .then((p_gotoScriptResult: LeoBridgePackage) =&gt; {
            return this.sendAction(Constants.LEOBRIDGE.DO_NOTHING);
        })
        .then((p_package) =&gt; {
            // refresh and reveal selection
            this.launchRefresh({ tree: true, body: true, states: true, buttons: false, documents: false }, false, p_package.node);
            return Promise.resolve(true); // TODO launchRefresh should be a returned promise
        });
    */
}
</t>
<t tx="felix.20220519232002.1">public resolveTreeItem(item: LeoOutlineNode, element: Position, token: vscode.CancellationToken): vscode.ProviderResult&lt;LeoOutlineNode&gt; {
    if (Object.keys(element.v.u).length) {
        item.tooltip = item.label + "\n" +
            JSON.stringify(element.v.u, undefined, 2); // user attributes as JSON text tooltip
    } else {
        item.tooltip = item.label; // * Whole headline as tooltip
    }
    return item;
}

</t>
</tnodes>
</leo_file>
