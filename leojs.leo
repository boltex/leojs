<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20201209145256.1"><vh>Startup</vh>
<v t="ekr.20201214084854.1"><vh>@file scripts.txt</vh></v>
</v>
<v t="felix.20201208214250.2"><vh>Documentation</vh>
<v t="felix.20201208214319.1"><vh>@clean README.md</vh></v>
<v t="felix.20201208214506.1"><vh>@clean CHANGELOG.md</vh></v>
<v t="felix.20201208224703.1"><vh>@clean CONTRIBUTING.md</vh></v>
</v>
<v t="ekr.20210103163408.1"><vh>Code</vh>
<v t="felix.20201208214449.1"><vh>@clean package.json</vh>
<v t="ekr.20201210033824.1"><vh>&lt;&lt; contributes &gt;&gt;</vh>
<v t="felix.20201208222541.1"><vh>views</vh></v>
<v t="felix.20201208221211.1"><vh>viewsWelcome</vh></v>
<v t="felix.20201208220441.1"><vh>commands</vh>
<v t="ekr.20201213060317.97"><vh>cloneFindAll</vh></v>
<v t="ekr.20201213060317.98"><vh>cloneFindAllFlattened</vh></v>
<v t="ekr.20201213060317.100"><vh>cloneFindFlattenedMarked</vh></v>
<v t="ekr.20201213060317.99"><vh>cloneFindMarked</vh></v>
<v t="ekr.20201213060317.110"><vh>cloneMarkedNodes</vh></v>
<v t="ekr.20201213060317.66"><vh>cloneNode</vh></v>
<v t="ekr.20201213060317.67"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213060317.68"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.13"><vh>closeLeoFile</vh></v>
<v t="ekr.20201213060317.23"><vh>contractAll</vh></v>
<v t="ekr.20201213060317.24"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213060317.86"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213060317.101"><vh>copyMarked</vh></v>
<v t="ekr.20201213060317.34"><vh>copyNode</vh></v>
<v t="ekr.20201213060317.35"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213060317.36"><vh>cutNode</vh></v>
<v t="ekr.20201213060317.37"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213060317.38"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.91"><vh>deHoist</vh></v>
<v t="ekr.20201213060317.92"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213060317.45"><vh>delete</vh></v>
<v t="ekr.20201213060317.111"><vh>deleteMarkedNodes</vh></v>
<v t="ekr.20201213060317.46"><vh>deleteSelection</vh></v>
<v t="ekr.20201213060317.47"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.72"><vh>demote</vh></v>
<v t="ekr.20201213060317.73"><vh>demoteSelection</vh></v>
<v t="ekr.20201213060317.74"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.102"><vh>diffMarkedNodes</vh></v>
<v t="ekr.20201213060317.25"><vh>editHeadline</vh></v>
<v t="ekr.20201213060317.26"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213060317.27"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213060317.3"><vh>executeScript</vh></v>
<v t="ekr.20201213060317.87"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213060317.48"><vh>extract</vh></v>
<v t="ekr.20201213060317.49"><vh>extractNames</vh></v>
<v t="ekr.20201213060317.20"><vh>gitDiff</vh></v>
<v t="ekr.20201213060317.79"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213060317.83"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213060317.80"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213060317.104"><vh>gotoNextClone</vh></v>
<v t="ekr.20201213060317.105"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213060317.106"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.103"><vh>gotoNextMarked</vh></v>
<v t="ekr.20201213060317.84"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213060317.85"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213060317.88"><vh>hoistNode</vh></v>
<v t="ekr.20201213060317.89"><vh>hoistSelection</vh></v>
<v t="ekr.20201213060317.90"><vh>hoistSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.62"><vh>insertNode</vh></v>
<v t="ekr.20201213060317.63"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213060317.64"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.65"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213060317.28"><vh>mark</vh></v>
<v t="ekr.20201213060317.107"><vh>markChangedItems</vh></v>
<v t="ekr.20201213060317.29"><vh>markSelection</vh></v>
<v t="ekr.20201213060317.30"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.108"><vh>markSubheads</vh></v>
<v t="ekr.20201213060317.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213060317.112"><vh>moveMarkedNodes</vh></v>
<v t="ekr.20201213060317.50"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213060317.51"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213060317.52"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.53"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213060317.54"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213060317.55"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.56"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213060317.57"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213060317.58"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.59"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213060317.60"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213060317.61"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.12"><vh>newLeoFile</vh></v>
<v t="ekr.20201213060317.22"><vh>openAside</vh></v>
<v t="ekr.20201213060317.9"><vh>openLeoFile</vh></v>
<v t="ekr.20201213060317.82"><vh>pageDown</vh></v>
<v t="ekr.20201213060317.81"><vh>pageUp</vh></v>
<v t="ekr.20201213060317.39"><vh>pasteNode</vh></v>
<v t="ekr.20201213060317.42"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213060317.43"><vh>pasteNodeAsCloneAtSelection</vh></v>
<v t="ekr.20201213060317.44"><vh>pasteNodeAsCloneAtSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.40"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213060317.41"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.69"><vh>promote</vh></v>
<v t="ekr.20201213060317.70"><vh>promoteSelection</vh></v>
<v t="ekr.20201213060317.71"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.10"><vh>recentLeoFiles</vh></v>
<v t="ekr.20201213060317.95"><vh>redo</vh></v>
<v t="ekr.20201213060317.96"><vh>redoFromOutline</vh></v>
<v t="ekr.20201213060317.17"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213060317.18"><vh>refreshFromDiskSelection</vh></v>
<v t="ekr.20201213060317.19"><vh>refreshFromDiskSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.5"><vh>removeButton</vh></v>
<v t="ekr.20201213060317.16"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213060317.14"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213060317.15"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213060317.21"><vh>selectTreeNode</vh></v>
<v t="ekr.20201213060317.6"><vh>showBody</vh></v>
<v t="ekr.20201213060317.8"><vh>showLogPane</vh></v>
<v t="ekr.20201213060317.7"><vh>showOutline</vh></v>
<v t="ekr.20201213060317.75"><vh>sortChildrenSelection</vh></v>
<v t="ekr.20201213060317.76"><vh>sortChildrenSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.77"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213060317.78"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.11"><vh>switchLeoFile</vh></v>
<v t="ekr.20201213060317.2"><vh>test</vh></v>
<v t="ekr.20201213060317.93"><vh>undo</vh></v>
<v t="ekr.20201213060317.94"><vh>undoFromOutline</vh></v>
<v t="ekr.20201213060317.31"><vh>unmark</vh></v>
<v t="ekr.20201213060317.109"><vh>unmarkAll</vh></v>
<v t="ekr.20201213060317.32"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213060317.33"><vh>unmarkSelectionFromOutline</vh></v>
</v>
<v t="felix.20201208221448.1"><vh>menus</vh>
<v t="felix.20201208221652.1"><vh>commandPalette</vh>
<v t="ekr.20201213064703.41"><vh>cloneFindAll</vh></v>
<v t="ekr.20201213064703.42"><vh>cloneFindAllFlattened</vh></v>
<v t="ekr.20201213064703.44"><vh>cloneFindFlattenedMarked</vh></v>
<v t="ekr.20201213064703.43"><vh>cloneFindMarked</vh></v>
<v t="ekr.20201213064703.52"><vh>cloneMarkedNodes</vh></v>
<v t="ekr.20201213064703.91"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.29"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213064703.92"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.10"><vh>closeLeoFile</vh></v>
<v t="ekr.20201213064703.15"><vh>contractAll</vh></v>
<v t="ekr.20201213064703.64"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213064703.105"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213064703.47"><vh>copyMarked</vh></v>
<v t="ekr.20201213064703.71"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.19"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213064703.72"><vh>cutNode</vh></v>
<v t="ekr.20201213064703.20"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213064703.73"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.38"><vh>deHoist</vh></v>
<v t="ekr.20201213064703.111"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213064703.78"><vh>delete</vh></v>
<v t="ekr.20201213064703.53"><vh>deleteMarkedNodes</vh></v>
<v t="ekr.20201213064703.23"><vh>deleteSelection</vh></v>
<v t="ekr.20201213064703.79"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.95"><vh>demote</vh></v>
<v t="ekr.20201213064703.31"><vh>demoteSelection</vh></v>
<v t="ekr.20201213064703.96"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.48"><vh>diffMarkedNodes</vh></v>
<v t="ekr.20201213064703.65"><vh>editHeadline</vh></v>
<v t="ekr.20201213064703.16"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213064703.66"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213064703.3"><vh>executeScript</vh></v>
<v t="ekr.20201213064703.106"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213064703.45"><vh>extract</vh></v>
<v t="ekr.20201213064703.46"><vh>extractNames</vh></v>
<v t="ekr.20201213064703.14"><vh>gitDiff</vh></v>
<v t="ekr.20201213064703.100"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213064703.102"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213064703.101"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213064703.98"><vh>gotoNextClone</vh></v>
<v t="ekr.20201213064703.36"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213064703.99"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.35"><vh>gotoNextMarked</vh></v>
<v t="ekr.20201213064703.103"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213064703.104"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213064703.109"><vh>hoistNode</vh></v>
<v t="ekr.20201213064703.37"><vh>hoistSelection</vh></v>
<v t="ekr.20201213064703.110"><vh>hoistSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.88"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.28"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213064703.89"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.90"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213064703.67"><vh>mark</vh></v>
<v t="ekr.20201213064703.49"><vh>markChangedItems</vh></v>
<v t="ekr.20201213064703.17"><vh>markSelection</vh></v>
<v t="ekr.20201213064703.68"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.50"><vh>markSubheads</vh></v>
<v t="ekr.20201213064703.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213064703.54"><vh>moveMarkedNodes</vh></v>
<v t="ekr.20201213064703.80"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213064703.24"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213064703.81"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.82"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213064703.25"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213064703.83"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.84"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213064703.26"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213064703.85"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.86"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213064703.27"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213064703.87"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.9"><vh>newLeoFile</vh></v>
<v t="ekr.20201213064703.63"><vh>openAside</vh></v>
<v t="ekr.20201213064703.6"><vh>openLeoFile</vh></v>
<v t="ekr.20201213064703.108"><vh>pageDown</vh></v>
<v t="ekr.20201213064703.107"><vh>pageUp</vh></v>
<v t="ekr.20201213064703.74"><vh>pasteNode</vh></v>
<v t="ekr.20201213064703.76"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213064703.22"><vh>pasteNodeAsCloneAtSelection</vh></v>
<v t="ekr.20201213064703.77"><vh>pasteNodeAsCloneAtSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.21"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213064703.75"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.93"><vh>promote</vh></v>
<v t="ekr.20201213064703.30"><vh>promoteSelection</vh></v>
<v t="ekr.20201213064703.94"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.7"><vh>recentLeoFiles</vh></v>
<v t="ekr.20201213064703.40"><vh>redo</vh></v>
<v t="ekr.20201213064703.113"><vh>redoFromOutline</vh></v>
<v t="ekr.20201213064703.60"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213064703.13"><vh>refreshFromDiskSelection</vh></v>
<v t="ekr.20201213064703.61"><vh>refreshFromDiskSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.56"><vh>removeButton</vh></v>
<v t="ekr.20201213064703.12"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213064703.11"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213064703.59"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213064703.62"><vh>selectTreeNode</vh></v>
<v t="ekr.20201213064703.57"><vh>showBody</vh></v>
<v t="ekr.20201213064703.5"><vh>showLogPane</vh></v>
<v t="ekr.20201213064703.58"><vh>showOutline</vh></v>
<v t="ekr.20201213064703.32"><vh>sortChildrenSelection</vh></v>
<v t="ekr.20201213064703.33"><vh>sortChildrenSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.34"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213064703.97"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.8"><vh>switchLeoFile</vh></v>
<v t="ekr.20201213064703.55"><vh>test</vh></v>
<v t="ekr.20201213064703.39"><vh>undo</vh></v>
<v t="ekr.20201213064703.112"><vh>undoFromOutline</vh></v>
<v t="ekr.20201213064703.69"><vh>unmark</vh></v>
<v t="ekr.20201213064703.51"><vh>unmarkAll</vh></v>
<v t="ekr.20201213064703.18"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213064703.70"><vh>unmarkSelectionFromOutline</vh></v>
</v>
<v t="felix.20201208221716.1"><vh>explorer/context</vh></v>
<v t="felix.20201208221809.1"><vh>view/title</vh>
<v t="ekr.20201213064703.124"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213064703.123"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213064703.118"><vh>newLeoFile</vh></v>
<v t="ekr.20201213064703.117"><vh>openLeoFile</vh></v>
<v t="ekr.20201213064703.122"><vh>redoFromOutline</vh></v>
<v t="ekr.20201213064703.120"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213064703.119"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213064703.121"><vh>undoFromOutline</vh></v>
</v>
<v t="felix.20201208221847.1"><vh>view/item/context</vh>
<v t="ekr.20201213064703.133"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.148"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.132"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.142"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.143"><vh>cutNode</vh></v>
<v t="ekr.20201213064703.138"><vh>deHoist</vh></v>
<v t="ekr.20201213064703.146"><vh>delete</vh></v>
<v t="ekr.20201213064703.126"><vh>editHeadline</vh></v>
<v t="ekr.20201213064703.149"><vh>gotoNextClone</vh></v>
<v t="ekr.20201213064703.137"><vh>hoistNode</vh></v>
<v t="ekr.20201213064703.127"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.147"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.134"><vh>mark</vh></v>
<v t="ekr.20201213064703.140"><vh>mark</vh></v>
<v t="ekr.20201213064703.128"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213064703.129"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213064703.130"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213064703.131"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213064703.136"><vh>openAside</vh></v>
<v t="ekr.20201213064703.144"><vh>pasteNode</vh></v>
<v t="ekr.20201213064703.145"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213064703.139"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213064703.135"><vh>unmark</vh></v>
<v t="ekr.20201213064703.141"><vh>unmark</vh></v>
</v>
</v>
<v t="felix.20201208221945.1"><vh>keybindings</vh>
<v t="ekr.20201213070431.2"><vh>executeScript</vh></v>
<v t="ekr.20201213070431.3"><vh>executeScript</vh></v>
<v t="ekr.20201213070431.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213070431.5"><vh>showOutline</vh></v>
<v t="ekr.20201213070431.6"><vh>showOutline</vh></v>
<v t="ekr.20201213070431.7"><vh>showBody</vh></v>
<v t="ekr.20201213070431.8"><vh>showBody</vh></v>
<v t="ekr.20201213070431.9"><vh>showBody</vh></v>
<v t="ekr.20201213070431.10"><vh>showBody</vh></v>
<v t="ekr.20201213070431.11"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213070431.12"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213070431.13"><vh>contractAll</vh></v>
<v t="ekr.20201213070431.14"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213070431.15"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213070431.16"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213070431.17"><vh>markSelection</vh></v>
<v t="ekr.20201213070431.18"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.19"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213070431.20"><vh>unmarkSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.21"><vh>extract</vh></v>
<v t="ekr.20201213070431.22"><vh>extract</vh></v>
<v t="ekr.20201213070431.23"><vh>extractNames</vh></v>
<v t="ekr.20201213070431.24"><vh>extractNames</vh></v>
<v t="ekr.20201213070431.25"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213070431.26"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213070431.27"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.28"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.29"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.30"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213070431.31"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213070431.32"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.33"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.34"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.35"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213070431.36"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213070431.37"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.38"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.39"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.40"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213070431.41"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213070431.42"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.43"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.44"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.45"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213070431.46"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.47"><vh>promoteSelection</vh></v>
<v t="ekr.20201213070431.48"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.49"><vh>demoteSelection</vh></v>
<v t="ekr.20201213070431.50"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.51"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213070431.52"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.53"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213070431.54"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213070431.55"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.56"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213070431.57"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.58"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213070431.59"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213070431.60"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213070431.61"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.62"><vh>deleteSelection</vh></v>
<v t="ekr.20201213070431.63"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.64"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213070431.65"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213070431.66"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213070431.67"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213070431.68"><vh>pageUp</vh></v>
<v t="ekr.20201213070431.69"><vh>pageDown</vh></v>
<v t="ekr.20201213070431.70"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.71"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213070431.72"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.73"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.74"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.75"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.76"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.77"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.78"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.79"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.80"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.81"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213070431.82"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213070431.83"><vh>expandAndGoRight</vh></v>
</v>
</v>
<v t="ekr.20201210033748.1"><vh>&lt;&lt; scripts &gt;&gt;</vh></v>
<v t="ekr.20201210033804.1"><vh>&lt;&lt; devDependencies &gt;&gt;</vh></v>
</v>
<v t="ekr.20201209145358.1"><vh>src</vh>
<v t="felix.20201208214322.1"><vh>@clean src/extension.ts</vh>
<v t="felix.20201208215613.1"><vh>activate</vh></v>
<v t="felix.20201208215619.1"><vh>deactivate</vh></v>
</v>
<v t="felix.20201208223531.1"><vh>@clean src/leojs.ts</vh></v>
<v t="felix.20201208223553.1"><vh>@clean src/leoOutline.ts</vh>
<v t="felix.20201209011931.1"><vh>class JsOutlineProvider</vh>
<v t="felix.20201209011931.2"><vh>constructor</vh></v>
<v t="felix.20201209011931.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20201209011931.4"><vh>getTreeItem</vh></v>
<v t="felix.20201209011931.5"><vh>getChildren</vh></v>
<v t="felix.20201209011931.6"><vh>getParent</vh></v>
<v t="felix.20201209011931.7"><vh>_buildNodeIconPaths</vh></v>
<v t="felix.20201209011931.8"><vh>_jsNodeArray</vh></v>
</v>
</v>
<v t="felix.20201208215536.1"><vh>@clean src/constants.ts</vh>
<v t="felix.20201208215536.2"><vh>class Constants</vh>
<v t="felix.20201208215536.3"><vh>general constants</vh></v>
<v t="felix.20201208215536.4"><vh>workbench interface panels</vh></v>
<v t="felix.20201208215536.5"><vh>user messages</vh></v>
<v t="felix.20201208215536.6"><vh>ask/save buttons</vh></v>
<v t="felix.20201208215536.10"><vh>context flags</vh></v>
<v t="felix.20201208235204.1"><vh>vscode commands</vh></v>
<v t="felix.20201208215536.16"><vh>commands strings</vh></v>
</v>
</v>
<v t="felix.20201208224407.1"><vh>@clean src/utils.ts</vh>
<v t="felix.20201208224407.2"><vh>padNumber2</vh></v>
<v t="felix.20201208224407.4"><vh>addFileToGlobal</vh></v>
<v t="felix.20201208224407.5"><vh>removeFileFromGlobal</vh></v>
<v t="felix.20201208224407.6"><vh>buildNodeIconPaths</vh></v>
<v t="felix.20201208224407.7"><vh>buildDocumentIconPaths</vh></v>
<v t="felix.20201208224407.8"><vh>buildButtonsIconPaths</vh></v>
<v t="felix.20201208224407.10"><vh>getDurationMilliseconds</vh></v>
<v t="felix.20201208224407.11"><vh>getFileFromPath</vh></v>
<v t="felix.20201208224407.12"><vh>isIconChangedByEdit</vh></v>
<v t="felix.20201208224407.14"><vh>strToLeoUri</vh></v>
<v t="felix.20201208224407.15"><vh>leoUriToStr</vh></v>
<v t="felix.20201208224407.16"><vh>setContext</vh></v>
</v>
<v t="felix.20201208224420.1"><vh>@clean src/types.d.ts</vh>
<v t="felix.20201209012321.1"><vh>PNode</vh></v>
<v t="felix.20201208224420.4"><vh>RevealType</vh></v>
<v t="felix.20201208224420.5"><vh>RefreshType</vh></v>
<v t="felix.20201208224420.6"><vh>UserCommand</vh></v>
<v t="felix.20201208224420.7"><vh>ShowBodyParam</vh></v>
<v t="felix.20201208224420.10"><vh>ArchivedPosition</vh></v>
<v t="felix.20201208224420.16"><vh>Icon</vh></v>
<v t="felix.20201208224420.20"><vh>showSaveAsDialogParameters</vh></v>
<v t="felix.20201208224420.21"><vh>runAskYesNoDialogParameters</vh></v>
<v t="felix.20201208224420.22"><vh>runWarnMessageDialogParameters</vh></v>
<v t="felix.20201208224420.23"><vh>runInfoMessageDialogParameters</vh></v>
<v t="felix.20201208224420.24"><vh>AskMessageItem</vh></v>
<v t="felix.20201208224420.25"><vh>ChooseDocumentItem</vh></v>
<v t="felix.20201208224420.26"><vh>MinibufferCommand</vh></v>
</v>
<v t="felix.20201208224441.1"><vh>@clean src/leoFileBrowser.ts</vh>
<v t="felix.20201208224441.2"><vh>class LeoFilesBrowser</vh>
<v t="felix.20201208224441.3"><vh>_getBestOpenFolderUri</vh></v>
<v t="felix.20201208224441.4"><vh>getLeoFileUrl</vh></v>
</v>
</v>
</v>
<v t="ekr.20210103080045.1"><vh>core*.py</vh>
<v t="ekr.20210101063433.2"><vh>@file src/ekr/coreApp.py</vh></v>
<v t="ekr.20210102120444.53"><vh>@file src/ekr/coreCommander.py</vh></v>
<v t="ekr.20210102120444.2"><vh>@file src/ekr/coreCommands.py</vh></v>
<v t="ekr.20210102145531.1"><vh>@file src/ekr/coreFind.py</vh></v>
<v t="ekr.20201227040845.1"><vh>@file src/ekr/coreGlobals.py</vh></v>
<v t="ekr.20210101064206.1"><vh>@file src/ekr/coreNodes.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20201209145256.1"></t>
<t tx="ekr.20201209145358.1"></t>
<t tx="ekr.20201210033748.1">"vscode:prepublish": "npm run package",
"compile": "webpack --devtool nosources-source-map --config ./build/node-extension.webpack.config.js",
"watch": "webpack --watch --devtool nosources-source-map --info-verbosity verbose --config ./build/node-extension.webpack.config.js",
"package": "webpack --mode production --config ./build/node-extension.webpack.config.js",
"test-compile": "tsc -p ./",
"test-watch": "tsc -watch -p ./",
"pretest": "npm run test-compile &amp;&amp; npm run lint",
"lint": "tslint -p ./",
"OldLint": "eslint src --ext ts",
"test": "node ./out/test/runTest.js"
</t>
<t tx="ekr.20201210033804.1">"@types/vscode": "^1.52.0",
"@types/glob": "^7.1.3",
"@types/mocha": "^8.0.0",
"@types/node": "^12.11.7",
"eslint": "^7.9.0",
"@typescript-eslint/eslint-plugin": "^4.1.1",
"@typescript-eslint/parser": "^4.1.1",
"glob": "^7.1.6",
"mocha": "^8.1.3",
"typescript": "^4.0.2",
"vscode-test": "^1.4.0",
"ts-loader": "^8.0.3",
"tslint": "^6.1.3",
"webpack": "^4.44.1",
"webpack-cli": "^3.3.12"
</t>
<t tx="ekr.20201210033824.1">@others
</t>
<t tx="ekr.20201213060317.10"></t>
<t tx="ekr.20201213060317.100"></t>
<t tx="ekr.20201213060317.101"></t>
<t tx="ekr.20201213060317.102"></t>
<t tx="ekr.20201213060317.103"></t>
<t tx="ekr.20201213060317.104"></t>
<t tx="ekr.20201213060317.105"></t>
<t tx="ekr.20201213060317.106"></t>
<t tx="ekr.20201213060317.107"></t>
<t tx="ekr.20201213060317.108"></t>
<t tx="ekr.20201213060317.109"></t>
<t tx="ekr.20201213060317.11"></t>
<t tx="ekr.20201213060317.110"></t>
<t tx="ekr.20201213060317.111"></t>
<t tx="ekr.20201213060317.112"></t>
<t tx="ekr.20201213060317.12"></t>
<t tx="ekr.20201213060317.13"></t>
<t tx="ekr.20201213060317.14"></t>
<t tx="ekr.20201213060317.15"></t>
<t tx="ekr.20201213060317.16"></t>
<t tx="ekr.20201213060317.17"></t>
<t tx="ekr.20201213060317.18"></t>
<t tx="ekr.20201213060317.19"></t>
<t tx="ekr.20201213060317.2"></t>
<t tx="ekr.20201213060317.20"></t>
<t tx="ekr.20201213060317.21"></t>
<t tx="ekr.20201213060317.22"></t>
<t tx="ekr.20201213060317.23"></t>
<t tx="ekr.20201213060317.24"></t>
<t tx="ekr.20201213060317.25"></t>
<t tx="ekr.20201213060317.26"></t>
<t tx="ekr.20201213060317.27"></t>
<t tx="ekr.20201213060317.28"></t>
<t tx="ekr.20201213060317.29"></t>
<t tx="ekr.20201213060317.3"></t>
<t tx="ekr.20201213060317.30"></t>
<t tx="ekr.20201213060317.31"></t>
<t tx="ekr.20201213060317.32"></t>
<t tx="ekr.20201213060317.33"></t>
<t tx="ekr.20201213060317.34"></t>
<t tx="ekr.20201213060317.35"></t>
<t tx="ekr.20201213060317.36"></t>
<t tx="ekr.20201213060317.37"></t>
<t tx="ekr.20201213060317.38"></t>
<t tx="ekr.20201213060317.39"></t>
<t tx="ekr.20201213060317.4"></t>
<t tx="ekr.20201213060317.40"></t>
<t tx="ekr.20201213060317.41"></t>
<t tx="ekr.20201213060317.42"></t>
<t tx="ekr.20201213060317.43"></t>
<t tx="ekr.20201213060317.44"></t>
<t tx="ekr.20201213060317.45"></t>
<t tx="ekr.20201213060317.46"></t>
<t tx="ekr.20201213060317.47"></t>
<t tx="ekr.20201213060317.48"></t>
<t tx="ekr.20201213060317.49"></t>
<t tx="ekr.20201213060317.5"></t>
<t tx="ekr.20201213060317.50"></t>
<t tx="ekr.20201213060317.51"></t>
<t tx="ekr.20201213060317.52"></t>
<t tx="ekr.20201213060317.53"></t>
<t tx="ekr.20201213060317.54"></t>
<t tx="ekr.20201213060317.55"></t>
<t tx="ekr.20201213060317.56"></t>
<t tx="ekr.20201213060317.57"></t>
<t tx="ekr.20201213060317.58"></t>
<t tx="ekr.20201213060317.59"></t>
<t tx="ekr.20201213060317.6"></t>
<t tx="ekr.20201213060317.60"></t>
<t tx="ekr.20201213060317.61"></t>
<t tx="ekr.20201213060317.62"></t>
<t tx="ekr.20201213060317.63"></t>
<t tx="ekr.20201213060317.64"></t>
<t tx="ekr.20201213060317.65"></t>
<t tx="ekr.20201213060317.66"></t>
<t tx="ekr.20201213060317.67"></t>
<t tx="ekr.20201213060317.68"></t>
<t tx="ekr.20201213060317.69"></t>
<t tx="ekr.20201213060317.7"></t>
<t tx="ekr.20201213060317.70"></t>
<t tx="ekr.20201213060317.71"></t>
<t tx="ekr.20201213060317.72"></t>
<t tx="ekr.20201213060317.73"></t>
<t tx="ekr.20201213060317.74"></t>
<t tx="ekr.20201213060317.75"></t>
<t tx="ekr.20201213060317.76"></t>
<t tx="ekr.20201213060317.77"></t>
<t tx="ekr.20201213060317.78"></t>
<t tx="ekr.20201213060317.79"></t>
<t tx="ekr.20201213060317.8"></t>
<t tx="ekr.20201213060317.80"></t>
<t tx="ekr.20201213060317.81"></t>
<t tx="ekr.20201213060317.82"></t>
<t tx="ekr.20201213060317.83"></t>
<t tx="ekr.20201213060317.84"></t>
<t tx="ekr.20201213060317.85"></t>
<t tx="ekr.20201213060317.86"></t>
<t tx="ekr.20201213060317.87"></t>
<t tx="ekr.20201213060317.88"></t>
<t tx="ekr.20201213060317.89"></t>
<t tx="ekr.20201213060317.9"></t>
<t tx="ekr.20201213060317.90"></t>
<t tx="ekr.20201213060317.91"></t>
<t tx="ekr.20201213060317.92"></t>
<t tx="ekr.20201213060317.93"></t>
<t tx="ekr.20201213060317.94"></t>
<t tx="ekr.20201213060317.95"></t>
<t tx="ekr.20201213060317.96"></t>
<t tx="ekr.20201213060317.97">{
  "command": "leojs.test",
  "category": "Leo",
  "title": "Test leojs"
},
{
  "command": "leojs.executeScript",
  "category": "Leo",
  "title": "Execute Script"
},
{
  "command": "leojs.minibuffer",
  "category": "Leo",
  "title": "Minibuffer"
},
{
  "command": "leojs.removeButton",
  "category": "Leo",
  "title": "Remove Button"
},
{
  "command": "leojs.showBody",
  "category": "Leo",
  "title": "Focus to Body"
},
{
  "command": "leojs.showOutline",
  "category": "Leo",
  "title": "Focus to Tree"
},
{
  "command": "leojs.showLogPane",
  "category": "Leo",
  "title": "Show Log Pane"
},
{
  "command": "leojs.openLeoFile",
  "title": "Open Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/folder.svg",
    "dark": "resources/dark/folder.svg"
  }
},
{
  "command": "leojs.recentLeoFiles",
  "category": "Leo",
  "title": "Recent Files"
},
{
  "command": "leojs.switchLeoFile",
  "title": "Switch Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/switch.svg",
    "dark": "resources/dark/switch.svg"
  }
},
{
  "command": "leojs.newLeoFile",
  "title": "New Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/new-file.svg",
    "dark": "resources/dark/new-file.svg"
  }
},
{
  "command": "leojs.closeLeoFile",
  "title": "Close Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
{
  "command": "leojs.saveLeoFile",
  "category": "Leo",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
{
  "command": "leojs.saveLeoFileFromOutline",
  "category": "Leo",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
{
  "command": "leojs.saveAsLeoFile",
  "category": "Leo",
  "title": "Save Leo File as...",
  "icon": {
    "light": "resources/light/save-as.svg",
    "dark": "resources/dark/save-as.svg"
  }
},
{
  "command": "leojs.refreshFromDisk",
  "category": "Leo",
  "title": "Refresh from Disk"
},
{
  "command": "leojs.refreshFromDiskSelection",
  "category": "Leo",
  "title": "Refresh from Disk"
},
{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "category": "Leo",
  "title": "Refresh from Disk"
},
{
  "command": "leojs.gitDiff",
  "category": "Leo",
  "title": "Git Diff"
},
{
  "command": "leojs.openAside",
  "category": "Leo",
  "title": "Open to the Side"
},
{
  "command": "leojs.contractAll",
  "category": "Leo",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
{
  "command": "leojs.contractAllFromOutline",
  "category": "Leo",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
{
  "command": "leojs.editHeadline",
  "category": "Leo",
  "title": "Edit Headline",
  "icon": {
    "light": "resources/light/edit.svg",
    "dark": "resources/dark/edit.svg"
  }
},
{
  "command": "leojs.editSelectedHeadline",
  "category": "Leo",
  "title": "Edit Headline"
},
{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "category": "Leo",
  "title": "Edit Headline"
},
{
  "command": "leojs.mark",
  "category": "Leo",
  "title": "Mark",
  "icon": {
    "light": "resources/light/mark.svg",
    "dark": "resources/dark/mark.svg"
  }
},
{
  "command": "leojs.markSelection",
  "category": "Leo",
  "title": "Mark"
},
{
  "command": "leojs.markSelectionFromOutline",
  "category": "Leo",
  "title": "Mark"
},
{
  "command": "leojs.unmark",
  "category": "Leo",
  "title": "Unmark",
  "icon": {
    "light": "resources/light/unmark.svg",
    "dark": "resources/dark/unmark.svg"
  }
},
{
  "command": "leojs.unmarkSelection",
  "category": "Leo",
  "title": "Unmark"
},
{
  "command": "leojs.unmarkSelectionFromOutline",
  "category": "Leo",
  "title": "Unmark"
},
{
  "command": "leojs.unmarkAll",
  "category": "Leo",
  "title": "Unmark All"
},
{
  "command": "leojs.copyNode",
  "category": "Leo",
  "title": "Copy Node",
  "icon": {
    "light": "resources/light/clipboard.svg",
    "dark": "resources/dark/clipboard.svg"
  }
},
{
  "command": "leojs.copyNodeSelection",
  "category": "Leo",
  "title": "Copy Node"
},
{
  "command": "leojs.cutNode",
  "category": "Leo",
  "title": "Cut Node"
},
{
  "command": "leojs.cutNodeSelection",
  "category": "Leo",
  "title": "Cut Node"
},
{
  "command": "leojs.cutNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Cut Node"
},
{
  "command": "leojs.pasteNode",
  "category": "Leo",
  "title": "Paste Node"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "category": "Leo",
  "title": "Paste Node"
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "category": "Leo",
  "title": "Paste Node"
},
{
  "command": "leojs.pasteNodeAsClone",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
{
  "command": "leojs.delete",
  "category": "Leo",
  "title": "Delete",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
{
  "command": "leojs.deleteSelection",
  "category": "Leo",
  "title": "Delete Node"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "category": "Leo",
  "title": "Delete Node"
},
{
  "command": "leojs.extract",
  "category": "Leo",
  "title": "Extract"
},
{
  "command": "leojs.extractNames",
  "category": "Leo",
  "title": "Extract Names"
},
{
  "command": "leojs.moveOutlineDown",
  "category": "Leo",
  "title": "Move Outline Down",
  "icon": {
    "light": "resources/light/arrow-down.svg",
    "dark": "resources/dark/arrow-down.svg"
  }
},
{
  "command": "leojs.moveOutlineDownSelection",
  "category": "Leo",
  "title": "Move Outline Down"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Down"
},
{
  "command": "leojs.moveOutlineLeft",
  "category": "Leo",
  "title": "Move Outline Left",
  "icon": {
    "light": "resources/light/arrow-left.svg",
    "dark": "resources/dark/arrow-left.svg"
  }
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "category": "Leo",
  "title": "Move Outline Left"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Left"
},
{
  "command": "leojs.moveOutlineRight",
  "category": "Leo",
  "title": "Move Outline Right",
  "icon": {
    "light": "resources/light/arrow-right.svg",
    "dark": "resources/dark/arrow-right.svg"
  }
},
{
  "command": "leojs.moveOutlineRightSelection",
  "category": "Leo",
  "title": "Move Outline Right"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Right"
},
{
  "command": "leojs.moveOutlineUp",
  "category": "Leo",
  "title": "Move Outline Up",
  "icon": {
    "light": "resources/light/arrow-up.svg",
    "dark": "resources/dark/arrow-up.svg"
  }
},
{
  "command": "leojs.moveOutlineUpSelection",
  "category": "Leo",
  "title": "Move Outline Up"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Up"
},
{
  "command": "leojs.insertNode",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertNodeSelection",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
{
  "command": "leojs.cloneNode",
  "category": "Leo",
  "title": "Clone Node",
  "icon": {
    "light": "resources/light/link.svg",
    "dark": "resources/dark/link.svg"
  }
},
{
  "command": "leojs.cloneNodeSelection",
  "category": "Leo",
  "title": "Clone Node"
},
{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Clone Node"
},
{
  "command": "leojs.promote",
  "category": "Leo",
  "title": "Promote Children"
},
{
  "command": "leojs.promoteSelection",
  "category": "Leo",
  "title": "Promote Children"
},
{
  "command": "leojs.promoteSelectionFromOutline",
  "category": "Leo",
  "title": "Promote Children"
},
{
  "command": "leojs.demote",
  "category": "Leo",
  "title": "Demote Siblings"
},
{
  "command": "leojs.demoteSelection",
  "category": "Leo",
  "title": "Demote Siblings"
},
{
  "command": "leojs.demoteSelectionFromOutline",
  "category": "Leo",
  "title": "Demote Siblings"
},
{
  "command": "leojs.sortChildrenSelection",
  "category": "Leo",
  "title": "Sort Children"
},
{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "category": "Leo",
  "title": "Sort Children"
},
{
  "command": "leojs.sortSiblingsSelection",
  "category": "Leo",
  "title": "Sort Siblings"
},
{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "category": "Leo",
  "title": "Sort Siblings"
},
{
  "command": "leojs.gotoFirstVisible",
  "category": "Leo",
  "title": "Goto First Visible"
},
{
  "command": "leojs.gotoLastVisible",
  "category": "Leo",
  "title": "Goto Last Visible"
},
{
  "command": "leojs.pageUp",
  "category": "Leo",
  "title": "Page Up"
},
{
  "command": "leojs.pageDown",
  "category": "Leo",
  "title": "Page Down"
},
{
  "command": "leojs.gotoLastSibling",
  "category": "Leo",
  "title": "Goto Last Sibling"
},
{
  "command": "leojs.gotoNextVisible",
  "category": "Leo",
  "title": "Goto Next Visible"
},
{
  "command": "leojs.gotoPrevVisible",
  "category": "Leo",
  "title": "Goto Prev Visible"
},
{
  "command": "leojs.contractOrGoLeft",
  "category": "Leo",
  "title": "Contract Or Go Left"
},
{
  "command": "leojs.expandAndGoRight",
  "category": "Leo",
  "title": "Expand And Go Right"
},
{
  "command": "leojs.gotoNextMarked",
  "category": "Leo",
  "title": "Goto Next Marked"
},
{
  "command": "leojs.gotoNextClone",
  "category": "Leo",
  "title": "Goto Next Clone"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "category": "Leo",
  "title": "Goto Next Clone"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "category": "Leo",
  "title": "Goto Next Clone"
},
{
  "command": "leojs.hoistNode",
  "category": "Leo",
  "title": "Hoist"
},
{
  "command": "leojs.hoistSelection",
  "category": "Leo",
  "title": "Hoist"
},
{
  "command": "leojs.hoistSelectionFromOutline",
  "category": "Leo",
  "title": "Hoist"
},
{
  "command": "leojs.deHoist",
  "category": "Leo",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
{
  "command": "leojs.deHoistFromOutline",
  "category": "Leo",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
{
  "command": "leojs.undo",
  "category": "Leo",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
{
  "command": "leojs.undoFromOutline",
  "category": "Leo",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
{
  "command": "leojs.redo",
  "category": "Leo",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
{
  "command": "leojs.redoFromOutline",
  "category": "Leo",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
{
  "command": "leojs.cloneFindAll",
  "category": "Leo",
  "title": "Clone Find All"
},
{
  "command": "leojs.cloneFindAllFlattened",
  "category": "Leo",
  "title": "Clone Find All Flattened"
},
{
  "command": "leojs.cloneFindMarked",
  "category": "Leo",
  "title": "Clone Find Marked"
},
{
  "command": "leojs.cloneFindFlattenedMarked",
  "category": "Leo",
  "title": "cffm - Clone Find Flattened Marked"
},
{
  "command": "leojs.copyMarked",
  "category": "Leo",
  "title": "Copy Marked"
},
{
  "command": "leojs.diffMarkedNodes",
  "category": "Leo",
  "title": "Diff Marked Nodes"
},
{
  "command": "leojs.markChangedItems",
  "category": "Leo",
  "title": "Mark Changed Items"
},
{
  "command": "leojs.markSubheads",
  "category": "Leo",
  "title": "Mark Subheads"
},
{
  "command": "leojs.cloneMarkedNodes",
  "category": "Leo",
  "title": "Clone Marked Nodes"
},
{
  "command": "leojs.deleteMarkedNodes",
  "category": "Leo",
  "title": "Delete Marked Nodes"
},
{
  "command": "leojs.moveMarkedNodes",
  "category": "Leo",
  "title": "Move Marked Nodes"
},
{
  "command": "leojs.enableLeoTreeNav",
  "category": "Leo",
  "title": "Enable Leo Tree Navigation",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showEditOnNodes",
  "category": "Leo",
  "title": "Show edit-headline",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showAddOnNodes",
  "category": "Leo",
  "title": "Show Add Node",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showArrowsOnNodes",
  "category": "Leo",
  "title": "Show move-commands",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showCopyOnNodes",
  "category": "Leo",
  "title": "Show Copy Node",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showCloneOnNodes",
  "category": "Leo",
  "title": "Show Clone Node",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.showMarkOnNodes",
  "category": "Leo",
  "title": "Show Mark/Unmark Node",
  "icon": {
    "light": "resources/light/no-check.svg",
    "dark": "resources/dark/no-check.svg"
  }
},
{
  "command": "leojs.disableLeoTreeNav",
  "category": "Leo",
  "title": "Disable Leo Tree Navigation",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideEditOnNodes",
  "category": "Leo",
  "title": "Hide edit-headline",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideAddOnNodes",
  "category": "Leo",
  "title": "Hide Add Node",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideArrowsOnNodes",
  "category": "Leo",
  "title": "Hide move-commands",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideCopyOnNodes",
  "category": "Leo",
  "title": "Hide Copy Node",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideCloneOnNodes",
  "category": "Leo",
  "title": "Hide Clone Node",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
},
{
  "command": "leojs.hideMarkOnNodes",
  "category": "Leo",
  "title": "Hide Mark/Unmark Node",
  "icon": {
    "light": "resources/light/check.svg",
    "dark": "resources/dark/check.svg"
  }
}
</t>
<t tx="ekr.20201213060317.98"></t>
<t tx="ekr.20201213060317.99"></t>
<t tx="ekr.20201213064703.10"></t>
<t tx="ekr.20201213064703.100"></t>
<t tx="ekr.20201213064703.101"></t>
<t tx="ekr.20201213064703.102"></t>
<t tx="ekr.20201213064703.103"></t>
<t tx="ekr.20201213064703.104"></t>
<t tx="ekr.20201213064703.105"></t>
<t tx="ekr.20201213064703.106"></t>
<t tx="ekr.20201213064703.107"></t>
<t tx="ekr.20201213064703.108"></t>
<t tx="ekr.20201213064703.109"></t>
<t tx="ekr.20201213064703.11"></t>
<t tx="ekr.20201213064703.110"></t>
<t tx="ekr.20201213064703.111"></t>
<t tx="ekr.20201213064703.112"></t>
<t tx="ekr.20201213064703.113"></t>
<t tx="ekr.20201213064703.117"></t>
<t tx="ekr.20201213064703.118"></t>
<t tx="ekr.20201213064703.119"></t>
<t tx="ekr.20201213064703.12"></t>
<t tx="ekr.20201213064703.120"></t>
<t tx="ekr.20201213064703.121"></t>
<t tx="ekr.20201213064703.122"></t>
<t tx="ekr.20201213064703.123"></t>
<t tx="ekr.20201213064703.124"></t>
<t tx="ekr.20201213064703.126"></t>
<t tx="ekr.20201213064703.127"></t>
<t tx="ekr.20201213064703.128"></t>
<t tx="ekr.20201213064703.129"></t>
<t tx="ekr.20201213064703.13"></t>
<t tx="ekr.20201213064703.130"></t>
<t tx="ekr.20201213064703.131"></t>
<t tx="ekr.20201213064703.132"></t>
<t tx="ekr.20201213064703.133"></t>
<t tx="ekr.20201213064703.134"></t>
<t tx="ekr.20201213064703.135"></t>
<t tx="ekr.20201213064703.136"></t>
<t tx="ekr.20201213064703.137"></t>
<t tx="ekr.20201213064703.138"></t>
<t tx="ekr.20201213064703.139"></t>
<t tx="ekr.20201213064703.14"></t>
<t tx="ekr.20201213064703.140"></t>
<t tx="ekr.20201213064703.141"></t>
<t tx="ekr.20201213064703.142"></t>
<t tx="ekr.20201213064703.143"></t>
<t tx="ekr.20201213064703.144"></t>
<t tx="ekr.20201213064703.145"></t>
<t tx="ekr.20201213064703.146"></t>
<t tx="ekr.20201213064703.147"></t>
<t tx="ekr.20201213064703.148"></t>
<t tx="ekr.20201213064703.149"></t>
<t tx="ekr.20201213064703.15"></t>
<t tx="ekr.20201213064703.16"></t>
<t tx="ekr.20201213064703.17"></t>
<t tx="ekr.20201213064703.18"></t>
<t tx="ekr.20201213064703.19"></t>
<t tx="ekr.20201213064703.20"></t>
<t tx="ekr.20201213064703.21"></t>
<t tx="ekr.20201213064703.22"></t>
<t tx="ekr.20201213064703.23"></t>
<t tx="ekr.20201213064703.24"></t>
<t tx="ekr.20201213064703.25"></t>
<t tx="ekr.20201213064703.26"></t>
<t tx="ekr.20201213064703.27"></t>
<t tx="ekr.20201213064703.28"></t>
<t tx="ekr.20201213064703.29"></t>
<t tx="ekr.20201213064703.3"></t>
<t tx="ekr.20201213064703.30"></t>
<t tx="ekr.20201213064703.31"></t>
<t tx="ekr.20201213064703.32"></t>
<t tx="ekr.20201213064703.33"></t>
<t tx="ekr.20201213064703.34"></t>
<t tx="ekr.20201213064703.35"></t>
<t tx="ekr.20201213064703.36"></t>
<t tx="ekr.20201213064703.37"></t>
<t tx="ekr.20201213064703.38"></t>
<t tx="ekr.20201213064703.39"></t>
<t tx="ekr.20201213064703.4"></t>
<t tx="ekr.20201213064703.40"></t>
<t tx="ekr.20201213064703.41">{
  "command": "leojs.executeScript",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.minibuffer",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.showLogPane",
  "when": "leoReady"
},
{
  "command": "leojs.openLeoFile",
  "when": "leoReady"
},
{
  "command": "leojs.recentLeoFiles",
  "when": "leoReady"
},
{
  "command": "leojs.switchLeoFile",
  "when": "leoReady &amp;&amp; leoTreeOpened"
},
{
  "command": "leojs.newLeoFile",
  "when": "leoReady"
},
{
  "command": "leojs.closeLeoFile",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.saveLeoFile",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.saveAsLeoFile",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.refreshFromDiskSelection",
  "when": "leoTreeOpened &amp;&amp; leoAtFile"
},
{
  "command": "leojs.gitDiff",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.contractAll",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.editSelectedHeadline",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.markSelection",
  "when": "leoTreeOpened &amp;&amp; !leoMarked"
},
{
  "command": "leojs.unmarkSelection",
  "when": "leoTreeOpened &amp;&amp; leoMarked"
},
{
  "command": "leojs.unmarkAll",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.copyNodeSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cutNodeSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.deleteSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.extract",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.extractNames",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.moveOutlineDownSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.moveOutlineLeftSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.moveOutlineRightSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.moveOutlineUpSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.insertNodeSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneNodeSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.promoteSelection",
  "when": "leoTreeOpened &amp;&amp; leoCanPromote"
},
{
  "command": "leojs.demoteSelection",
  "when": "leoTreeOpened &amp;&amp; leoCanDemote"
},
{
  "command": "leojs.sortChildrenSelection",
  "when": "leoTreeOpened &amp;&amp; leoChild"
},
{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "when": "leoTreeOpened &amp;&amp; leoChild"
},
{
  "command": "leojs.sortSiblingsSelection",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.gotoNextMarked",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "when": "leoTreeOpened &amp;&amp; leoCloned"
},
{
  "command": "leojs.hoistSelection",
  "when": "leoTreeOpened &amp;&amp; !leoRoot"
},
{
  "command": "leojs.deHoist",
  "when": "leoTreeOpened &amp;&amp; leoCanDehoist"
},
{
</t>
<t tx="ekr.20201213064703.42"></t>
<t tx="ekr.20201213064703.43"></t>
<t tx="ekr.20201213064703.44"></t>
<t tx="ekr.20201213064703.45"></t>
<t tx="ekr.20201213064703.46"></t>
<t tx="ekr.20201213064703.47"></t>
<t tx="ekr.20201213064703.48"></t>
<t tx="ekr.20201213064703.49"></t>
<t tx="ekr.20201213064703.5"></t>
<t tx="ekr.20201213064703.50"></t>
<t tx="ekr.20201213064703.51"></t>
<t tx="ekr.20201213064703.52"></t>
<t tx="ekr.20201213064703.53"></t>
<t tx="ekr.20201213064703.54"></t>
<t tx="ekr.20201213064703.55"></t>
<t tx="ekr.20201213064703.56"></t>
<t tx="ekr.20201213064703.57"></t>
<t tx="ekr.20201213064703.58"></t>
<t tx="ekr.20201213064703.59"></t>
<t tx="ekr.20201213064703.6"></t>
<t tx="ekr.20201213064703.60"></t>
<t tx="ekr.20201213064703.61"></t>
<t tx="ekr.20201213064703.62"></t>
<t tx="ekr.20201213064703.63"></t>
<t tx="ekr.20201213064703.64"></t>
<t tx="ekr.20201213064703.65"></t>
<t tx="ekr.20201213064703.66"></t>
<t tx="ekr.20201213064703.67"></t>
<t tx="ekr.20201213064703.68"></t>
<t tx="ekr.20201213064703.69"></t>
<t tx="ekr.20201213064703.7"></t>
<t tx="ekr.20201213064703.70"></t>
<t tx="ekr.20201213064703.71"></t>
<t tx="ekr.20201213064703.72"></t>
<t tx="ekr.20201213064703.73"></t>
<t tx="ekr.20201213064703.74"></t>
<t tx="ekr.20201213064703.75"></t>
<t tx="ekr.20201213064703.76"></t>
<t tx="ekr.20201213064703.77"></t>
<t tx="ekr.20201213064703.78"></t>
<t tx="ekr.20201213064703.79"></t>
<t tx="ekr.20201213064703.8"></t>
<t tx="ekr.20201213064703.80"></t>
<t tx="ekr.20201213064703.81"></t>
<t tx="ekr.20201213064703.82"></t>
<t tx="ekr.20201213064703.83"></t>
<t tx="ekr.20201213064703.84"></t>
<t tx="ekr.20201213064703.85"></t>
<t tx="ekr.20201213064703.86"></t>
<t tx="ekr.20201213064703.87"></t>
<t tx="ekr.20201213064703.88"></t>
<t tx="ekr.20201213064703.89"></t>
<t tx="ekr.20201213064703.9"></t>
<t tx="ekr.20201213064703.90"></t>
<t tx="ekr.20201213064703.91">  "command": "leojs.undo",
  "when": "leoTreeOpened &amp;&amp; leoCanUndo"
},
{
  "command": "leojs.redo",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneFindAll",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneFindAllFlattened",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneFindMarked",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneFindFlattenedMarked",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.copyMarked",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.diffMarkedNodes",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.markChangedItems",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.markSubheads",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.cloneMarkedNodes",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.deleteMarkedNodes",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.moveMarkedNodes",
  "when": "leoTreeOpened"
},
{
  "command": "leojs.test",
  "when": "false"
},
{
  "command": "leojs.removeButton",
  "when": "false"
},
{
  "command": "leojs.showBody",
  "when": "false"
},
{
  "command": "leojs.showOutline",
  "when": "false"
},
{
  "command": "leojs.saveLeoFileFromOutline",
  "when": "false"
},
{
  "command": "leojs.refreshFromDisk",
  "when": "false"
},
{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.openAside",
  "when": "false"
},
{
  "command": "leojs.contractAllFromOutline",
  "when": "false"
},
{
  "command": "leojs.editHeadline",
  "when": "false"
},
{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "when": "false"
},
{
  "command": "leojs.mark",
  "when": "false"
},
{
  "command": "leojs.markSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.unmark",
  "when": "false"
},
{
  "command": "leojs.unmarkSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.copyNode",
  "when": "false"
},
{
  "command": "leojs.cutNode",
  "when": "false"
},
{
  "command": "leojs.cutNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.pasteNode",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAsClone",
  "when": "false"
},
{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.delete",
  "when": "false"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineDown",
  "when": "false"
},
{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineLeft",
  "when": "false"
},
{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineRight",
  "when": "false"
},
{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.moveOutlineUp",
  "when": "false"
},
{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.insertNode",
  "when": "false"
},
{
  "command": "leojs.insertNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.insertNodeSelectionInterrupt",
  "when": "false"
},
{
  "command": "leojs.cloneNode",
  "when": "false"
},
{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.promote",
  "when": "false"
},
{
  "command": "leojs.promoteSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.demote",
  "when": "false"
},
{
  "command": "leojs.demoteSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.gotoNextClone",
  "when": "false"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.gotoFirstVisible",
  "when": "false"
},
{
  "command": "leojs.gotoLastVisible",
  "when": "false"
},
{
  "command": "leojs.gotoLastSibling",
  "when": "false"
},
{
  "command": "leojs.gotoNextVisible",
  "when": "false"
},
{
  "command": "leojs.gotoPrevVisible",
  "when": "false"
},
{
  "command": "leojs.contractOrGoLeft",
  "when": "false"
},
{
  "command": "leojs.expandAndGoRight",
  "when": "false"
},
{
  "command": "leojs.pageUp",
  "when": "false"
},
{
  "command": "leojs.pageDown",
  "when": "false"
},
{
  "command": "leojs.hoistNode",
  "when": "false"
},
{
  "command": "leojs.hoistSelectionFromOutline",
  "when": "false"
},
{
  "command": "leojs.deHoistFromOutline",
  "when": "false"
},
{
  "command": "leojs.undoFromOutline",
  "when": "false"
},
{
  "command": "leojs.redoFromOutline",
  "when": "false"
}
</t>
<t tx="ekr.20201213064703.92"></t>
<t tx="ekr.20201213064703.93"></t>
<t tx="ekr.20201213064703.94"></t>
<t tx="ekr.20201213064703.95"></t>
<t tx="ekr.20201213064703.96"></t>
<t tx="ekr.20201213064703.97"></t>
<t tx="ekr.20201213064703.98"></t>
<t tx="ekr.20201213064703.99"></t>
<t tx="ekr.20201213070431.10"></t>
<t tx="ekr.20201213070431.11"></t>
<t tx="ekr.20201213070431.12"></t>
<t tx="ekr.20201213070431.13"></t>
<t tx="ekr.20201213070431.14"></t>
<t tx="ekr.20201213070431.15"></t>
<t tx="ekr.20201213070431.16"></t>
<t tx="ekr.20201213070431.17"></t>
<t tx="ekr.20201213070431.18"></t>
<t tx="ekr.20201213070431.19"></t>
<t tx="ekr.20201213070431.2"></t>
<t tx="ekr.20201213070431.20"></t>
<t tx="ekr.20201213070431.21"></t>
<t tx="ekr.20201213070431.22"></t>
<t tx="ekr.20201213070431.23"></t>
<t tx="ekr.20201213070431.24"></t>
<t tx="ekr.20201213070431.25">  "command": "leojs.moveOutlineDownSelection",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.26">{
  "command": "leojs.moveOutlineDownSelection",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.27">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.28">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+down",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.29">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.3"></t>
<t tx="ekr.20201213070431.30">{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.31">{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.32">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.33">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+left",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.34">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.35">{
  "command": "leojs.moveOutlineRightSelection",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.36">{
  "command": "leojs.moveOutlineRightSelection",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.37">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.38">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+right",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.39">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.4"></t>
<t tx="ekr.20201213070431.40">{
  "command": "leojs.moveOutlineUpSelection",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.41">{
  "command": "leojs.moveOutlineUpSelection",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.42">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.43">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+up",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.44">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.45">{
  "command": "leojs.sortSiblingsSelection",
  "key": "alt+a",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.46">{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "key": "alt+a",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.47">{
  "command": "leojs.promoteSelection",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.48">{
  "command": "leojs.promoteSelectionFromOutline",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.49">{
  "command": "leojs.demoteSelection",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.5"></t>
<t tx="ekr.20201213070431.50">{
  "command": "leojs.demoteSelectionFromOutline",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.51">{
  "command": "leojs.insertNodeSelection",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.52">{
  "command": "leojs.insertNodeSelectionFromOutline",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.53">{
  "command": "leojs.insertNodeSelectionInterrupt",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
},
</t>
<t tx="ekr.20201213070431.54">{
  "command": "leojs.cloneNodeSelection",
  "key": "ctrl+[Backquote]",
  "win": "ctrl+oem_7",
  "linux": "ctrl+'",
  "mac": "cmd+[Backquote]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.55">{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "key": "ctrl+[Backquote]",
  "win": "ctrl+oem_7",
  "linux": "ctrl+'",
  "mac": "cmd+[Backquote]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.56">{
  "command": "leojs.cutNodeSelection",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.57">{
  "command": "leojs.cutNodeSelectionFromOutline",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
</t>
<t tx="ekr.20201213070431.58">{
  "command": "leojs.copyNodeSelection",
  "key": "ctrl+shift+c",
  "mac": "cmd+shift+c",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.59">{
  "command": "leojs.copyNodeSelection",
  "key": "ctrl+shift+c",
  "mac": "cmd+shift+c",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.pasteNodeAtSelection",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.deleteSelection",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.deleteSelectionFromOutline",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoFirstVisible",
  "key": "alt+home",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoLastSibling",
  "key": "alt+end",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoFirstVisible",
  "key": "home",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoLastVisible",
  "key": "end",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.pageUp",
  "key": "pageup",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.pageDown",
  "key": "pagedown",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "key": "alt+n",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoNextCloneSelection",
  "key": "alt+n",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "down",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
},
{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "up",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
},
{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection  &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "left",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
},
{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "right",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
},
{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
}
</t>
<t tx="ekr.20201213070431.6"></t>
<t tx="ekr.20201213070431.60"></t>
<t tx="ekr.20201213070431.61"></t>
<t tx="ekr.20201213070431.62"></t>
<t tx="ekr.20201213070431.63"></t>
<t tx="ekr.20201213070431.64"></t>
<t tx="ekr.20201213070431.65"></t>
<t tx="ekr.20201213070431.66"></t>
<t tx="ekr.20201213070431.67"></t>
<t tx="ekr.20201213070431.68"></t>
<t tx="ekr.20201213070431.69"></t>
<t tx="ekr.20201213070431.7"></t>
<t tx="ekr.20201213070431.70"></t>
<t tx="ekr.20201213070431.71"></t>
<t tx="ekr.20201213070431.72"></t>
<t tx="ekr.20201213070431.73"></t>
<t tx="ekr.20201213070431.74"></t>
<t tx="ekr.20201213070431.75"></t>
<t tx="ekr.20201213070431.76"></t>
<t tx="ekr.20201213070431.77"></t>
<t tx="ekr.20201213070431.78"></t>
<t tx="ekr.20201213070431.79"></t>
<t tx="ekr.20201213070431.8"></t>
<t tx="ekr.20201213070431.80"></t>
<t tx="ekr.20201213070431.81"></t>
<t tx="ekr.20201213070431.82"></t>
<t tx="ekr.20201213070431.83"></t>
<t tx="ekr.20201213070431.9"></t>
<t tx="ekr.20210101163201.1"></t>
<t tx="ekr.20210101163219.1">// leojs.src.ekr.test.leo.js

// node --experimental-import-meta-resolve leo.js

import { test2 } from "./app.js";

@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210101163253.1">function test(info) {
    console.log("leo.js:test")
    test2(info)
}

export {test};
</t>
<t tx="ekr.20210101163301.1">// leojs.src.ekr.test.app.js

@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210101163315.1">function test2(info) {
    console.log("app.js:test2")
}

export {test2};
</t>
<t tx="ekr.20210101163328.1"></t>
<t tx="ekr.20210101163328.2">// leojs.src.ekr.test.node.leo.js

app = require("./app")

function test() {
    console.log("leo.js:test");
    app.test2();
}

test();

// export {test};

@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210101163328.4">// leojs.src.ekr.test.node.app.js

exports.test2 = function() {
    console.log("app.js:test2");
}

// export {test2};
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210102064957.1">ekr-alphabetize: alphabetizes package.json/contributes.

ekr-tests: my work.</t>
<t tx="ekr.20210102065706.1"></t>
<t tx="ekr.20210102065724.1">// leojs/src/ekr/test-ts/leo.js

import { test2 } from "./app";

export function test() {
    console.log("leo.ts:test");
    test2();
}
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210102065742.1">// leojs/src/ekr/test-ts/app.ts

export function test2() {
    console.log("app.ts:test2");
}

// export {test2};
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20210103075353.1"></t>
<t tx="ekr.20210103080045.1"></t>
<t tx="ekr.20210103080232.1">@language rest
@wrap

- Work on coreFind.py.

pytest tests for all .py files:
- look at existing pytests.

</t>
<t tx="ekr.20210103163408.1"># Don't change this headline. write-leojs uses it.
</t>
<t tx="felix.20201208214250.2"></t>
<t tx="felix.20201208214319.1"># leojs

Literate Editor with Outline _in Typescript_ version 0.1.00

**Enjoy!**
</t>
<t tx="felix.20201208214322.1">import * as vscode from 'vscode';
import * as utils from "./utils";
import { ReqRefresh } from "./types";
import { LeoUI } from './leoUI';
import { Constants } from './constants';
import { LeoButtonNode } from './leoButtonNode';
import { LeoOutlineNode } from './leoOutlineNode';

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201208214449.1">@language json
@tabwidth -2
{
  "name": "leojs",
  "displayName": "Leo Editor for Visual Studio Code",
  "description": "Leo, the literate editor with outline extension for Visual Studio Code.",
  "version": "0.1.0",
  "publisher": "boltex",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/boltex/leointeg"
  },
  "engines": {
    "vscode": "^1.52.0"
  },
  "keywords": [
    "leo",
    "literate",
    "editor",
    "outline",
    "programming"
  ],
  "categories": [
    "Other"
  ],
  "icon": "resources/leoapp128px.png",
  "galleryBanner": {
    "color": "#fffbdc",
    "theme": "light"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "leojsView",
          "title": "Leo",
          "icon": "resources/icon.svg"
        }
      ]
    },
    &lt;&lt; contributes &gt;&gt;
  },
  "scripts": {
    &lt;&lt; scripts &gt;&gt;
  },
  "devDependencies": {
    &lt;&lt; devDependencies &gt;&gt;
  },
  "dependencies": {
    "@types/debounce": "^1.2.0",
    "debounce": "^1.2.0",
    "axios": "^0.19.0"
  }
}
</t>
<t tx="felix.20201208214506.1"># Change Log

## 0.1.00 12.9.2020.

- Initial state
</t>
<t tx="felix.20201208215536.1">import * as vscode from "vscode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208215536.10">/**
 * Used in 'when' clauses, set with vscode.commands.executeCommand("setContext",...)
 */
public static CONTEXT_FLAGS = {
    // Main flags for connection and opened file
    LEO_READY: "leoReady", // Extension activated and classes created and ready
    TREE_OPENED: "leoTreeOpened", // At least one Leo file opened
    TREE_TITLED: "leoTreeTitled", // Tree is a Leo file and not a new untitled document
    SERVER_STARTED: "leoServerStarted", // Auto-start or manually started
    // 'states' flags for currently opened tree view
    LEO_CHANGED: "leoChanged",
    LEO_CAN_UNDO: "leoCanUndo",
    LEO_CAN_REDO: "leoCanRedo",
    LEO_CAN_DEMOTE: "leoCanDemote",
    LEO_CAN_PROMOTE: "leoCanPromote",
    LEO_CAN_DEHOIST: "leoCanDehoist",
    // 'states' flags about current selection, for visibility and commands availability
    SELECTED_MARKED: "leoMarked", // no need for unmarked here, use !leoMarked
    SELECTED_CLONE: "leoCloned",
    SELECTED_DIRTY: "leoDirty",
    SELECTED_EMPTY: "leoEmpty",
    SELECTED_CHILD: "leoChild", // Has children
    SELECTED_ATFILE: "LeoAtFile", // Can be refreshed
    SELECTED_ROOT: "leoRoot", // ! Computed by hand
    // Statusbar Flag 'keybindings in effect'
    LEO_SELECTED: "leoObjectSelected", // keybindings "On": Outline or body has focus
    // Context Flags for 'when' clauses, used concatenated, for each outline node
    NODE_MARKED: "leoNodeMarked",  // Selected node is marked
    NODE_UNMARKED: "leoNodeUnmarked", // Selected node is unmarked (Needed for regexp)
    NODE_ATFILE: "leoNodeAtFile", // Selected node is an @file or @clean, etc...
    NODE_CLONED: "leoNodeCloned",
    NODE_ROOT: "leoNodeRoot",
    NODE_NOT_ROOT: "leoNodeNotRoot",
    // Flags for Leo documents tree view icons and hover node command buttons
    DOCUMENT_SELECTED_TITLED: "leoDocumentSelectedTitled",
    DOCUMENT_TITLED: "leoDocumentTitled",
    DOCUMENT_SELECTED_UNTITLED: "leoDocumentSelectedUntitled",
    DOCUMENT_UNTITLED: "leoDocumentUntitled",
    // UI
    LEO_TREE_BROWSE: "leoTreeBrowse", // Override vscode's tree behavior with Leo's own
    SHOW_EDIT: "showEditOnNodes",
    SHOW_ARROWS: "showArrowsOnNodes",
    SHOW_ADD: "showAddOnNodes",
    SHOW_MARK: "showMarkOnNodes",
    SHOW_CLONE: "showCloneOnNodes",
    SHOW_COPY: "showCopyOnNodes",
};

</t>
<t tx="felix.20201208215536.16">/**
 * All commands this expansion exposes to the user via GUI/keybindings in package.json
 */
public static COMMANDS = {
    // Toggle UI Settings
    ENABLE_LEO_TREE_NAV: Constants.NAME + ".enableLeoTreeNav",
    SHOW_EDIT_ON_NODES: Constants.NAME + ".showEditOnNodes",
    SHOW_ADD_ON_NODES: Constants.NAME + ".showAddOnNodes",
    SHOW_ARROWS_ON_NODES: Constants.NAME + ".showArrowsOnNodes",
    SHOW_COPY_ON_NODES: Constants.NAME + ".showCopyOnNodes",
    SHOW_CLONE_ON_NODES: Constants.NAME + ".showCloneOnNodes",
    SHOW_MARK_ON_NODES: Constants.NAME + ".showMarkOnNodes",
    DISABLE_LEO_TREE_NAV: Constants.NAME + ".disableLeoTreeNav",
    HIDE_EDIT_ON_NODES: Constants.NAME + ".hideEditOnNodes",
    HIDE_ADD_ON_NODES: Constants.NAME + ".hideAddOnNodes",
    HIDE_ARROWS_ON_NODES: Constants.NAME + ".hideArrowsOnNodes",
    HIDE_COPY_ON_NODES: Constants.NAME + ".hideCopyOnNodes",
    HIDE_CLONE_ON_NODES: Constants.NAME + ".hideCloneOnNodes",
    HIDE_MARK_ON_NODES: Constants.NAME + ".hideMarkOnNodes",
    // Leo Documents
    SET_OPENED_FILE: Constants.NAME + ".setOpenedFile",
    OPEN_FILE: Constants.NAME + ".openLeoFile", // sets focus on BODY
    RECENT_FILES: Constants.NAME + ".recentLeoFiles", // shows recent Leo files, opens one on selection
    SWITCH_FILE: Constants.NAME + ".switchLeoFile",
    NEW_FILE: Constants.NAME + ".newLeoFile",
    SAVE_FILE: Constants.NAME + ".saveLeoFile",
    SAVE_FILE_FO: Constants.NAME + ".saveLeoFileFromOutline",
    SAVE_AS_FILE: Constants.NAME + ".saveAsLeoFile",
    CLOSE_FILE: Constants.NAME + ".closeLeoFile",
    MINIBUFFER: Constants.NAME + ".minibuffer",
    GIT_DIFF: Constants.NAME + ".gitDiff",
    // At-buttons
    CLICK_BUTTON: Constants.NAME + ".clickButton",
    REMOVE_BUTTON: Constants.NAME + ".removeButton",
    // Outline Node User Interaction
    SELECT_NODE: Constants.NAME + ".selectTreeNode",
    OPEN_ASIDE: Constants.NAME + ".openAside", // selects and opens body splitting the workspace
    // Goto operations that always finish with focus in outline
    PAGE_UP: Constants.NAME + ".pageUp",
    PAGE_DOWN: Constants.NAME + ".pageDown",
    GOTO_FIRST_VISIBLE: Constants.NAME + ".gotoFirstVisible",
    GOTO_LAST_VISIBLE: Constants.NAME + ".gotoLastVisible",
    GOTO_LAST_SIBLING: Constants.NAME + ".gotoLastSibling",
    GOTO_NEXT_VISIBLE: Constants.NAME + ".gotoNextVisible",
    GOTO_PREV_VISIBLE: Constants.NAME + ".gotoPrevVisible",
    GOTO_NEXT_MARKED: Constants.NAME + ".gotoNextMarked",
    GOTO_NEXT_CLONE: Constants.NAME + ".gotoNextClone",
    GOTO_NEXT_CLONE_SELECTION: Constants.NAME + ".gotoNextCloneSelection",
    GOTO_NEXT_CLONE_SELECTION_FO: Constants.NAME + ".gotoNextCloneSelectionFromOutline",
    CONTRACT_OR_GO_LEFT: Constants.NAME + ".contractOrGoLeft",
    EXPAND_AND_GO_RIGHT: Constants.NAME + ".expandAndGoRight",
    // Leo Operations
    UNDO: Constants.NAME + ".undo", // From command Palette
    UNDO_FO: Constants.NAME + ".undoFromOutline", // from button, return focus on OUTLINE
    REDO: Constants.NAME + ".redo", // From command Palette
    REDO_FO: Constants.NAME + ".redoFromOutline", // from button, return focus on OUTLINE
    EXECUTE: Constants.NAME + ".executeScript",
    SHOW_BODY: Constants.NAME + ".showBody",
    SHOW_OUTLINE: Constants.NAME + ".showOutline",
    SHOW_LOG: Constants.NAME + ".showLogPane",
    SORT_CHILDREN: Constants.NAME + ".sortChildrenSelection",
    SORT_CHILDREN_FO: Constants.NAME + ".sortChildrenSelectionFromOutline",
    SORT_SIBLING: Constants.NAME + ".sortSiblingsSelection",
    SORT_SIBLING_FO: Constants.NAME + ".sortSiblingsSelectionFromOutline",
    CONTRACT_ALL: Constants.NAME + ".contractAll", // From command Palette
    CONTRACT_ALL_FO: Constants.NAME + ".contractAllFromOutline", // from button, return focus on OUTLINE
    // Commands from tree panel buttons or context: focus on OUTLINE
    MARK: Constants.NAME + ".mark",
    UNMARK: Constants.NAME + ".unmark",
    COPY: Constants.NAME + ".copyNode",
    CUT: Constants.NAME + ".cutNode",
    PASTE: Constants.NAME + ".pasteNode",
    PASTE_CLONE: Constants.NAME + ".pasteNodeAsClone",
    DELETE: Constants.NAME + ".delete",
    HEADLINE: Constants.NAME + ".editHeadline",
    MOVE_DOWN: Constants.NAME + ".moveOutlineDown",
    MOVE_LEFT: Constants.NAME + ".moveOutlineLeft",
    MOVE_RIGHT: Constants.NAME + ".moveOutlineRight",
    MOVE_UP: Constants.NAME + ".moveOutlineUp",
    INSERT: Constants.NAME + ".insertNode",
    CLONE: Constants.NAME + ".cloneNode",
    PROMOTE: Constants.NAME + ".promote",
    DEMOTE: Constants.NAME + ".demote",
    REFRESH_FROM_DISK: Constants.NAME + ".refreshFromDisk",
    // Commands from keyboard, while focus on BODY (command-palette returns to BODY for now)
    MARK_SELECTION: Constants.NAME + ".markSelection",
    UNMARK_SELECTION: Constants.NAME + ".unmarkSelection",
    COPY_SELECTION: Constants.NAME + ".copyNodeSelection", // Nothing to refresh/focus so no "FO" version
    CUT_SELECTION: Constants.NAME + ".cutNodeSelection",
    PASTE_SELECTION: Constants.NAME + ".pasteNodeAtSelection",
    PASTE_CLONE_SELECTION: Constants.NAME + ".pasteNodeAsCloneAtSelection",
    DELETE_SELECTION: Constants.NAME + ".deleteSelection",
    HEADLINE_SELECTION: Constants.NAME + ".editSelectedHeadline",
    MOVE_DOWN_SELECTION: Constants.NAME + ".moveOutlineDownSelection",
    MOVE_LEFT_SELECTION: Constants.NAME + ".moveOutlineLeftSelection",
    MOVE_RIGHT_SELECTION: Constants.NAME + ".moveOutlineRightSelection",
    MOVE_UP_SELECTION: Constants.NAME + ".moveOutlineUpSelection",
    INSERT_SELECTION: Constants.NAME + ".insertNodeSelection", // Can be interrupted
    INSERT_SELECTION_INTERRUPT: Constants.NAME + ".insertNodeSelectionInterrupt", // Interrupted version
    CLONE_SELECTION: Constants.NAME + ".cloneNodeSelection",
    PROMOTE_SELECTION: Constants.NAME + ".promoteSelection",
    DEMOTE_SELECTION: Constants.NAME + ".demoteSelection",
    REFRESH_FROM_DISK_SELECTION: Constants.NAME + ".refreshFromDiskSelection",
    // Commands from keyboard, while focus on OUTLINE (no need for COPY_SELECTION)
    MARK_SELECTION_FO: Constants.NAME + ".markSelectionFromOutline",
    UNMARK_SELECTION_FO: Constants.NAME + ".unmarkSelectionFromOutline",
    CUT_SELECTION_FO: Constants.NAME + ".cutNodeSelectionFromOutline",
    PASTE_SELECTION_FO: Constants.NAME + ".pasteNodeAtSelectionFromOutline",
    PASTE_CLONE_SELECTION_FO: Constants.NAME + ".pasteNodeAsCloneAtSelectionFromOutline",
    DELETE_SELECTION_FO: Constants.NAME + ".deleteSelectionFromOutline",
    HEADLINE_SELECTION_FO: Constants.NAME + ".editSelectedHeadlineFromOutline",
    MOVE_DOWN_SELECTION_FO: Constants.NAME + ".moveOutlineDownSelectionFromOutline",
    MOVE_LEFT_SELECTION_FO: Constants.NAME + ".moveOutlineLeftSelectionFromOutline",
    MOVE_RIGHT_SELECTION_FO: Constants.NAME + ".moveOutlineRightSelectionFromOutline",
    MOVE_UP_SELECTION_FO: Constants.NAME + ".moveOutlineUpSelectionFromOutline",
    INSERT_SELECTION_FO: Constants.NAME + ".insertNodeSelectionFromOutline",
    CLONE_SELECTION_FO: Constants.NAME + ".cloneNodeSelectionFromOutline",
    PROMOTE_SELECTION_FO: Constants.NAME + ".promoteSelectionFromOutline",
    DEMOTE_SELECTION_FO: Constants.NAME + ".demoteSelectionFromOutline",
    REFRESH_FROM_DISK_SELECTION_FO: Constants.NAME + ".refreshFromDiskSelectionFromOutline",
    HOIST: Constants.NAME + ".hoistNode",
    HOIST_SELECTION: Constants.NAME + ".hoistSelection",
    HOIST_SELECTION_FO: Constants.NAME + ".hoistSelectionFromOutline",
    DEHOIST: Constants.NAME + ".deHoist",
    DEHOIST_FO: Constants.NAME + ".deHoistFromOutline",
    EXTRACT: Constants.NAME + ".extract",
    EXTRACT_NAMES: Constants.NAME + ".extractNames",
    COPY_MARKED: Constants.NAME + ".copyMarked",
    DIFF_MARKED_NODES: Constants.NAME + ".diffMarkedNodes",
    MARK_CHANGED_ITEMS: Constants.NAME + ".markChangedItems",
    MARK_SUBHEADS: Constants.NAME + ".markSubheads",
    UNMARK_ALL: Constants.NAME + ".unmarkAll",
    CLONE_MARKED_NODES: Constants.NAME + ".cloneMarkedNodes",
    DELETE_MARKED_NODES: Constants.NAME + ".deleteMarkedNodes",
    MOVE_MARKED_NODES: Constants.NAME + ".moveMarkedNodes",
    CLONE_FIND_ALL: Constants.NAME + ".cloneFindAll",
    CLONE_FIND_ALL_FLATTENED: Constants.NAME + ".cloneFindAllFlattened",
    CLONE_FIND_MARKED: Constants.NAME + ".cloneFindMarked",
    CLONE_FIND_FLATTENED_MARKED: Constants.NAME + ".cloneFindFlattenedMarked",
};

/**
 * Leo command names that are called from vscode's gui/menu/buttons/keybindings triggers
 */
public static LEO_COMMANDS = {
    EXECUTE_SCRIPT: "executeScript",
    REFRESH_FROM_DISK: "refreshFromDisk",
    GIT_DIFF: "gitDiff",
    // Goto operations
    PAGE_UP: "pageUp",
    PAGE_DOWN: "pageDown",
    GOTO_FIRST_VISIBLE: "goToFirstVisibleNode",
    GOTO_LAST_VISIBLE: "goToLastVisibleNode",
    GOTO_LAST_SIBLING: "goToLastSibling",
    GOTO_NEXT_VISIBLE: "selectVisNext",
    GOTO_PREV_VISIBLE: "selectVisBack",
    GOTO_NEXT_MARKED: "goToNextMarkedHeadline",
    GOTO_NEXT_CLONE: "goToNextClone",
    CONTRACT_OR_GO_LEFT: "contractNodeOrGoToParent",
    EXPAND_AND_GO_RIGHT: "expandNodeAndGoToFirstChild",
    CONTRACT_ALL: "contractAllHeadlines",
    // Leo Operations
    MARK_PNODE: "markPNode",
    UNMARK_PNODE: "unmarkPNode",
    COPY_PNODE: "copyOutline",
    CUT_PNODE: "cutPNode",
    PASTE_PNODE: "pasteOutline",
    PASTE_CLONE_PNODE: "pasteOutlineRetainingClones",
    DELETE_PNODE: "deletePNode",
    MOVE_PNODE_DOWN: "moveOutlineDown",
    MOVE_PNODE_LEFT: "moveOutlineLeft",
    MOVE_PNODE_RIGHT: "moveOutlineRight",
    MOVE_PNODE_UP: "moveOutlineUp",
    INSERT_PNODE: "insertPNode",
    INSERT_NAMED_PNODE: "insertNamedPNode",
    CLONE_PNODE: "clonePNode",
    PROMOTE_PNODE: "promote",
    DEMOTE_PNODE: "demote",
    REFRESH_FROM_DISK_PNODE: "refreshFromDisk",
    SORT_CHILDREN: "sortChildren",
    SORT_SIBLINGS: "sortSiblings",
    UNDO: "undo",
    REDO: "redo",
    GET_STATES: "getStates",
    HOIST_PNODE: "hoist",
    DEHOIST: "dehoist",
    EXTRACT: "extract",
    EXTRACT_NAMES: "extractNames",
    COPY_MARKED: "copyMarked",
    DIFF_MARKED_NODES: "deleteMarked",
    MARK_CHANGED_ITEMS: "markChangedHeadlines",
    MARK_SUBHEADS: "markSubheads",
    UNMARK_ALL: "unmarkAll",
    CLONE_MARKED_NODES: "cloneMarked",
    DELETE_MARKED_NODES: "deleteMarked",
    MOVE_MARKED_NODES: "moveMarked",
    // Clone-find functionality
    CLONE_FIND_ALL: "cloneFindAll",
    CLONE_FIND_ALL_FLATTENED: "cloneFindAllFlattened",
    CLONE_FIND_MARKED: "cloneFindMarked",
    CLONE_FIND_FLATTENED_MARKED: "cloneFindFlattenedMarked",
};

</t>
<t tx="felix.20201208215536.2">/**
 * Text and numeric constants used throughout leojs
 */
export class Constants {

    @others
}
</t>
<t tx="felix.20201208215536.3">public static NAME: string = "leojs";

public static TREEVIEW_ID: string = "leojs";
public static TREEVIEW_EXPLORER_ID: string = "leojsExplorer";

public static DOCUMENTS_ID: string = "leoDocuments";
public static DOCUMENTS_EXPLORER_ID: string = "leoDocumentsExplorer";

public static BUTTONS_ID: string = "leoButtons";
public static BUTTONS_EXPLORER_ID: string = "leoButtonsExplorer";

public static FILE_EXTENSION: string = "leo";
public static URI_LEO_SCHEME: string = "leo";
public static URI_FILE_SCHEME: string = "file";
public static URI_SCHEME_HEADER: string = "leo:/";
public static FILE_OPEN_FILTER_MESSAGE: string = "Leo Files";
public static UNTITLED_FILE_NAME: string = "untitled";
public static RECENT_FILES_KEY: string = "leoRecentFiles";
public static LAST_FILES_KEY: string = "leoLastFiles";

public static REFRESH_DEBOUNCE_DELAY: number = 50;
public static STATES_DEBOUNCE_DELAY: number = 100;
public static DOCUMENTS_DEBOUNCE_DELAY: number = 100;

</t>
<t tx="felix.20201208215536.4">/**
 * Strings used in the workbench interface panels (not for messages or dialogs)
 */
public static GUI = {
    ICON_LIGHT_DOCUMENT: "resources/light/document.svg",
    ICON_DARK_DOCUMENT: "resources/dark/document.svg",
    ICON_LIGHT_DOCUMENT_DIRTY: "resources/light/document-dirty.svg",
    ICON_DARK_DOCUMENT_DIRTY: "resources/dark/document-dirty.svg",
    ICON_LIGHT_BUTTON: "resources/light/button.svg",
    ICON_DARK_BUTTON: "resources/dark/button.svg",
    ICON_LIGHT_BUTTON_ADD: "resources/light/button-add.svg",
    ICON_DARK_BUTTON_ADD: "resources/dark/button-add.svg",
    ICON_LIGHT_PATH: "resources/light/box",
    ICON_DARK_PATH: "resources/dark/box",
    ICON_FILE_EXT: ".svg",
    STATUSBAR_INDICATOR: "$(keyboard) ",
    STATUSBAR_COLOR: "fb7c47",
    QUICK_OPEN_LEO_COMMANDS: "&gt;leo: ",
    EXPLORER_TREEVIEW_PREFIX: "LEO ",
    TREEVIEW_TITLE: "OUTLINE",
    BODY_TITLE: "LEO BODY",
    LOG_PANE_TITLE: "Leo Log Window",
    THEME_STATUSBAR: "statusBar.foreground"
};

</t>
<t tx="felix.20201208215536.5">/**
 * Basic user messages strings for messages and dialogs
 */
public static USER_MESSAGES = {
    SCRIPT_BUTTON: "Creates a button from selected node's script",
    SCRIPT_BUTTON_TOOLTIP:
        "The 'Script Button' button creates a new button.\n" +
        "Its name will be the headline of the presently selected node\n" +
        "Hitting this newly created button executes the button's script.\n" +
        "\n" +
        "For example, to run a script on any part of an outline:\n" +
        "\n" +
        "1.  Select the node containing a script. (Ex.: \"g.es(p.h)\")\n" +
        "2.  Press 'Script Button'. This will create a new button.\n" +
        "3.  Select a node on which you want to run the script.\n" +
        "4.  Press the *new* button.",
    SAVE_CHANGES: "Save changes to",
    BEFORE_CLOSING: "before closing?",
    CANCEL: "Cancel",
    OPEN_WITH_LEOJS: "Open this Leo file with leojs?",
    OPEN_RECENT_FILE: "Open Recent Leo File",
    RIGHT_CLICK_TO_OPEN: "Right-click Leo files to open with leojs",
    FILE_ALREADY_OPENED: "Leo file already opened",
    CHOOSE_OPENED_FILE: "Select an opened Leo File",
    FILE_NOT_OPENED: "No files opened.",
    PROMPT_EDIT_HEADLINE: "Edit Headline",
    PROMPT_INSERT_NODE: "Insert Node",
    DEFAULT_HEADLINE: "New Headline",
    CLOSE_ERROR: "Cannot close: No files opened.",
    YES: "Yes",
    NO: "No",
    YES_ALL: "Yes to all",
    NO_ALL: "No to all",
    MINIBUFFER_PROMPT: "Minibuffer Full Command",
    CHANGES_DETECTED: "Changes to external files were detected.",
    REFRESHED: " Nodes refreshed.", // with voluntary leading space
    IGNORED: " They were ignored.", // with voluntary leading space
    TOO_FAST: "Leo is busy! ", // with voluntary trailing space
    STATUSBAR_TOOLTIP_ON: "Leo Key Bindings are in effect",
    STATUSBAR_TOOLTIP_OFF: "Leo Key Bindings off",
};

/**
 * * Strings used in 'at-button' panel display in LeoButtonNode
 */
public static BUTTON_STRINGS = {
    NULL_WIDGET: "nullButtonWidget",
    SCRIPT_BUTTON: "script-button",
    ADD_BUTTON: "leoButtonAdd",
    NORMAL_BUTTON: "leoButtonNode"
};

</t>
<t tx="felix.20201208215536.6">/**
 * Choices offered when about to lose current changes to a Leo Document
 */
public static ASK_SAVE_CHANGES_BUTTONS: vscode.MessageItem[] = [
    {
        title: Constants.USER_MESSAGES.YES,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.NO,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.CANCEL,
        isCloseAffordance: true
    }
];

</t>
<t tx="felix.20201208215613.1">export function activate(p_context: vscode.ExtensionContext) {

    const w_leo: LeoUI = new LeoUI(p_context);

    // Shortcut pointers for readability
    const U = undefined;
    const CMD = Constants.COMMANDS;
    const LEOCMD = Constants.LEO_COMMANDS;
    const CTX = Constants.CONTEXT_FLAGS;

    const NO_REFRESH: ReqRefresh = {};
    const REFRESH_NODE_BODY: ReqRefresh = {
        node: true, // Reveal the returned 'selected position' without changes to the tree
        body: true, // Goto/select another node needs the body pane refreshed
        states: true
    };
    const REFRESH_TREE: ReqRefresh = {
        tree: true,
        states: true
    };
    const REFRESH_TREE_BODY: ReqRefresh = {
        tree: true,
        body: true,
        states: true
    };

    const w_commands: [string, (...args: any[]) =&gt; any][] = [

        // ! REMOVE TESTS ENTRIES FROM PACKAGE.JSON FOR MASTER BRANCH RELEASES !
        ["leointeg.test", () =&gt; w_leo.test()], // Test function useful when debugging

        [CMD.ENABLE_LEO_TREE_NAV, () =&gt; w_leo.toggleSetting(CTX.LEO_TREE_BROWSE, true)],
        [CMD.SHOW_EDIT_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_EDIT, true)],
        [CMD.SHOW_ADD_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_ADD, true)],
        [CMD.SHOW_ARROWS_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_ARROWS, true)],
        [CMD.SHOW_COPY_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_COPY, true)],
        [CMD.SHOW_CLONE_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_CLONE, true)],
        [CMD.SHOW_MARK_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_MARK, true)],

        [CMD.DISABLE_LEO_TREE_NAV, () =&gt; w_leo.toggleSetting(CTX.LEO_TREE_BROWSE, false)],
        [CMD.HIDE_EDIT_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_EDIT, false)],
        [CMD.HIDE_ADD_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_ADD, false)],
        [CMD.HIDE_ARROWS_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_ARROWS, false)],
        [CMD.HIDE_COPY_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_COPY, false)],
        [CMD.HIDE_CLONE_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_CLONE, false)],
        [CMD.HIDE_MARK_ON_NODES, () =&gt; w_leo.toggleSetting(CTX.SHOW_MARK, false)],

        [CMD.EXECUTE, () =&gt; w_leo.command(LEOCMD.EXECUTE_SCRIPT, U, REFRESH_TREE_BODY, false)],

        [CMD.MINIBUFFER, () =&gt; w_leo.minibuffer()], // Is referenced in package.json

        [CMD.CLICK_BUTTON, (p_node: LeoButtonNode) =&gt; w_leo.clickAtButton(p_node)], // Not referenced in package.json
        [CMD.REMOVE_BUTTON, (p_node: LeoButtonNode) =&gt; w_leo.removeAtButton(p_node)],
        [CMD.CLOSE_FILE, () =&gt; w_leo.closeLeoFile()],
        [CMD.NEW_FILE, () =&gt; w_leo.newLeoFile()],

        [CMD.OPEN_FILE, (p_uri?: vscode.Uri) =&gt; w_leo.openLeoFile(p_uri)],

        [CMD.RECENT_FILES, () =&gt; w_leo.showRecentLeoFiles()],
        [CMD.SAVE_AS_FILE, () =&gt; w_leo.saveAsLeoFile()],
        [CMD.SAVE_FILE, () =&gt; w_leo.saveLeoFile()],
        [CMD.SAVE_FILE_FO, () =&gt; w_leo.saveLeoFile(true)],
        [CMD.SWITCH_FILE, () =&gt; w_leo.switchLeoFile()],

        [CMD.SET_OPENED_FILE, (p_index: number) =&gt; w_leo.selectOpenedLeoDocument(p_index)],

        [CMD.REFRESH_FROM_DISK, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.REFRESH_FROM_DISK, p_node, REFRESH_TREE_BODY, false)],

        [CMD.REFRESH_FROM_DISK_SELECTION, () =&gt; w_leo.command(LEOCMD.REFRESH_FROM_DISK, U, REFRESH_TREE_BODY, false)],

        [CMD.REFRESH_FROM_DISK_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.REFRESH_FROM_DISK, U, REFRESH_TREE_BODY, true)],

        [CMD.GIT_DIFF, () =&gt; w_leo.command(LEOCMD.GIT_DIFF, U, REFRESH_TREE_BODY, false)],
        [CMD.HEADLINE, (p_node: LeoOutlineNode) =&gt; w_leo.editHeadline(p_node, true)],
        [CMD.HEADLINE_SELECTION, () =&gt; w_leo.editHeadline(U, false)],
        [CMD.HEADLINE_SELECTION_FO, () =&gt; w_leo.editHeadline(U, true)],
        // cut/copy/paste/delete given node.
        [CMD.COPY, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.COPY_PNODE, p_node, NO_REFRESH, true, true)],
        [CMD.CUT, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.CUT_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.DELETE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.DELETE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.PASTE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.PASTE_PNODE, p_node, REFRESH_TREE_BODY, true, false)],
        [CMD.PASTE_CLONE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.PASTE_CLONE_PNODE, p_node, REFRESH_TREE_BODY, true, false)],

        // cut/copy/paste/delete current selection (self.commander.p)
        [CMD.COPY_SELECTION, () =&gt; w_leo.command(LEOCMD.COPY_PNODE, U, NO_REFRESH, false)],
        [CMD.CUT_SELECTION, () =&gt; w_leo.command(LEOCMD.CUT_PNODE, U, REFRESH_TREE_BODY, false)],
        [CMD.CUT_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.CUT_PNODE, U, REFRESH_TREE_BODY, true)],
        [CMD.DELETE_SELECTION, () =&gt; w_leo.command(LEOCMD.DELETE_PNODE, U, REFRESH_TREE_BODY, false)],
        [CMD.DELETE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.DELETE_PNODE, U, REFRESH_TREE_BODY, true)],
        [CMD.PASTE_CLONE_SELECTION, () =&gt; w_leo.command(LEOCMD.PASTE_CLONE_PNODE, U, REFRESH_TREE_BODY, false)],
        [CMD.PASTE_CLONE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.PASTE_CLONE_PNODE, U, REFRESH_TREE_BODY, true)],
        [CMD.PASTE_SELECTION, () =&gt; w_leo.command(LEOCMD.PASTE_PNODE, U, REFRESH_TREE_BODY, false)],
        [CMD.PASTE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.PASTE_PNODE, U, REFRESH_TREE_BODY, true)],
        // Called by nodes in the tree when selected either by mouse, or with enter
        [CMD.SELECT_NODE, (p_node: LeoOutlineNode) =&gt; w_leo.selectTreeNode(p_node, false, false)],
        [CMD.OPEN_ASIDE, (p_node: LeoOutlineNode) =&gt; w_leo.selectTreeNode(p_node, false, true)],

        [CMD.CONTRACT_ALL, () =&gt; w_leo.command(LEOCMD.CONTRACT_ALL, U, REFRESH_TREE_BODY, false)],
        [CMD.CONTRACT_ALL_FO, () =&gt; w_leo.command(LEOCMD.CONTRACT_ALL, U, REFRESH_TREE_BODY, true)],

        [CMD.CONTRACT_OR_GO_LEFT, () =&gt; w_leo.command(LEOCMD.CONTRACT_OR_GO_LEFT, U, REFRESH_TREE_BODY, true)],
        [CMD.EXPAND_AND_GO_RIGHT, () =&gt; w_leo.command(LEOCMD.EXPAND_AND_GO_RIGHT, U, REFRESH_TREE_BODY, true)],
        [CMD.GOTO_NEXT_CLONE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.GOTO_NEXT_CLONE, p_node, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_NEXT_CLONE_SELECTION, () =&gt; w_leo.command(LEOCMD.GOTO_NEXT_CLONE, U, REFRESH_NODE_BODY, false)],
        [CMD.GOTO_NEXT_CLONE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.GOTO_NEXT_CLONE, U, REFRESH_NODE_BODY, true)],

        [CMD.GOTO_NEXT_MARKED, () =&gt; w_leo.command(LEOCMD.GOTO_NEXT_MARKED, U, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_FIRST_VISIBLE, () =&gt; w_leo.command(LEOCMD.GOTO_FIRST_VISIBLE, U, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_LAST_SIBLING, () =&gt; w_leo.command(LEOCMD.GOTO_LAST_SIBLING, U, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_LAST_VISIBLE, () =&gt; w_leo.command(LEOCMD.GOTO_LAST_VISIBLE, U, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_NEXT_VISIBLE, () =&gt; w_leo.command(LEOCMD.GOTO_NEXT_VISIBLE, U, REFRESH_NODE_BODY, true)],
        [CMD.GOTO_PREV_VISIBLE, () =&gt; w_leo.command(LEOCMD.GOTO_PREV_VISIBLE, U, REFRESH_NODE_BODY, true)],

        [CMD.PAGE_UP, () =&gt; w_leo.command(LEOCMD.PAGE_UP, U, REFRESH_NODE_BODY, true)],
        [CMD.PAGE_DOWN, () =&gt; w_leo.command(LEOCMD.PAGE_DOWN, U, REFRESH_NODE_BODY, true)],
        [CMD.DEHOIST, () =&gt; w_leo.command(LEOCMD.DEHOIST, U, REFRESH_TREE_BODY, false)],
        [CMD.DEHOIST_FO, () =&gt; w_leo.command(LEOCMD.DEHOIST, U, REFRESH_TREE_BODY, true)],
        [CMD.HOIST, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.HOIST_PNODE, p_node, REFRESH_TREE_BODY, true)],
        [CMD.HOIST_SELECTION, () =&gt; w_leo.command(LEOCMD.HOIST_PNODE, U, REFRESH_TREE, false)],
        [CMD.HOIST_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.HOIST_PNODE, U, REFRESH_TREE, true)],
        [CMD.INSERT, (p_node: LeoOutlineNode) =&gt; w_leo.insertNode(p_node, true)],
        [CMD.INSERT_SELECTION, () =&gt; w_leo.insertNode(U, false)],
        [CMD.INSERT_SELECTION_FO, () =&gt; w_leo.insertNode(U, true)],
        // Special command for when inserting rapidly more than one node without
        // even specifying a headline label, e.g. spamming CTRL+I rapidly.
        [CMD.INSERT_SELECTION_INTERRUPT, () =&gt; w_leo.insertNode(U, false, true)],

        [CMD.CLONE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.CLONE_PNODE, p_node, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_SELECTION, () =&gt; w_leo.command(LEOCMD.CLONE_PNODE, U, REFRESH_TREE, false)],
        [CMD.CLONE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.CLONE_PNODE, U, REFRESH_TREE, true)],

        [CMD.PROMOTE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.PROMOTE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.PROMOTE_SELECTION, () =&gt; w_leo.command(LEOCMD.PROMOTE_PNODE, U, REFRESH_TREE, false)],
        [CMD.PROMOTE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.PROMOTE_PNODE, U, REFRESH_TREE, true)],

        [CMD.DEMOTE, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.DEMOTE_PNODE, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.DEMOTE_SELECTION, () =&gt; w_leo.command(LEOCMD.DEMOTE_PNODE, U, REFRESH_TREE, false)],
        [CMD.DEMOTE_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.DEMOTE_PNODE, U, REFRESH_TREE, true)],

        [CMD.SORT_CHILDREN, () =&gt; w_leo.command(LEOCMD.SORT_CHILDREN, U, REFRESH_TREE, false, true)],
        [CMD.SORT_SIBLING, () =&gt; w_leo.command(LEOCMD.SORT_SIBLINGS, U, REFRESH_TREE, false, true)],
        [CMD.SORT_SIBLING_FO, () =&gt; w_leo.command(LEOCMD.SORT_SIBLINGS, U, REFRESH_TREE, true, true)],
        [CMD.MARK, (p_node: LeoOutlineNode) =&gt; w_leo.changeMark(true, p_node, true)],
        [CMD.MARK_SELECTION, () =&gt; w_leo.changeMark(true, U, false)],
        [CMD.MARK_SELECTION_FO, () =&gt; w_leo.changeMark(true, U, true)],

        [CMD.UNMARK, (p_node: LeoOutlineNode) =&gt; w_leo.changeMark(false, p_node, true)],
        [CMD.UNMARK_SELECTION, () =&gt; w_leo.changeMark(false, U, false)],
        [CMD.UNMARK_SELECTION_FO, () =&gt; w_leo.changeMark(false, U, true)],

        [CMD.UNMARK_ALL, () =&gt; w_leo.command(LEOCMD.UNMARK_ALL, U, REFRESH_TREE_BODY, true)],
        [CMD.EXTRACT, () =&gt; w_leo.command(LEOCMD.EXTRACT, U, REFRESH_TREE_BODY, false)],
        [CMD.EXTRACT_NAMES, () =&gt; w_leo.command(LEOCMD.EXTRACT_NAMES, U, REFRESH_TREE_BODY, false)],
        [CMD.MOVE_DOWN, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.MOVE_PNODE_DOWN, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.MOVE_DOWN_SELECTION, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_DOWN, U, REFRESH_TREE, false)],
        [CMD.MOVE_DOWN_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_DOWN, U, REFRESH_TREE, true)],

        [CMD.MOVE_LEFT, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.MOVE_PNODE_LEFT, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.MOVE_LEFT_SELECTION, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_LEFT, U, REFRESH_TREE, false)],
        [CMD.MOVE_LEFT_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_LEFT, U, REFRESH_TREE, true)],

        [CMD.MOVE_RIGHT, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.MOVE_PNODE_RIGHT, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.MOVE_RIGHT_SELECTION, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_RIGHT, U, REFRESH_TREE, false)],
        [CMD.MOVE_RIGHT_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_RIGHT, U, REFRESH_TREE, true)],

        [CMD.MOVE_UP, (p_node: LeoOutlineNode) =&gt; w_leo.command(LEOCMD.MOVE_PNODE_UP, p_node, REFRESH_TREE_BODY, true, true)],
        [CMD.MOVE_UP_SELECTION, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_UP, U, REFRESH_TREE, false)],
        [CMD.MOVE_UP_SELECTION_FO, () =&gt; w_leo.command(LEOCMD.MOVE_PNODE_UP, U, REFRESH_TREE, true)],
        [CMD.REDO, () =&gt; w_leo.command(LEOCMD.REDO, U, REFRESH_TREE_BODY, false)],
        [CMD.REDO_FO, () =&gt; w_leo.command(LEOCMD.REDO, U, REFRESH_TREE_BODY, true)],
        [CMD.UNDO, () =&gt; w_leo.command(LEOCMD.UNDO, U, REFRESH_TREE_BODY, false)],
        [CMD.UNDO_FO, () =&gt; w_leo.command(LEOCMD.UNDO, U, REFRESH_TREE_BODY, true)],
        [CMD.SHOW_OUTLINE, () =&gt; w_leo.showOutline(true)], // Also focuses on outline
        [CMD.SHOW_LOG, () =&gt; w_leo.showLogPane()],
        [CMD.SHOW_BODY, () =&gt; w_leo.showBody(false)], // Also focuses on body
        [CMD.COPY_MARKED, () =&gt; w_leo.command(LEOCMD.COPY_MARKED, U, REFRESH_TREE_BODY, true)],
        [CMD.DIFF_MARKED_NODES, () =&gt; w_leo.command(LEOCMD.DIFF_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
        [CMD.MARK_CHANGED_ITEMS, () =&gt; w_leo.command(LEOCMD.MARK_CHANGED_ITEMS, U, REFRESH_TREE_BODY, true)],
        [CMD.MARK_SUBHEADS, () =&gt; w_leo.command(LEOCMD.MARK_SUBHEADS, U, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_MARKED_NODES, () =&gt; w_leo.command(LEOCMD.CLONE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
        [CMD.DELETE_MARKED_NODES, () =&gt; w_leo.command(LEOCMD.DELETE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
        [CMD.MOVE_MARKED_NODES, () =&gt; w_leo.command(LEOCMD.MOVE_MARKED_NODES, U, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_FIND_ALL, () =&gt; w_leo.command(LEOCMD.CLONE_FIND_ALL, U, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_FIND_ALL_FLATTENED, () =&gt; w_leo.command(LEOCMD.CLONE_FIND_ALL_FLATTENED, U, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_FIND_MARKED, () =&gt; w_leo.command(LEOCMD.CLONE_FIND_MARKED, U, REFRESH_TREE_BODY, true)],
        [CMD.CLONE_FIND_FLATTENED_MARKED, () =&gt; w_leo.command(LEOCMD.CLONE_FIND_FLATTENED_MARKED, U, REFRESH_TREE_BODY, true)]
    ];

    w_commands.map(function (p_command) {
        p_context.subscriptions.push(vscode.commands.registerCommand(...p_command));
    });



}

</t>
<t tx="felix.20201208215619.1">// this method is called when your extension is deactivated
export function deactivate() { }

</t>
<t tx="felix.20201208220441.1">"commands": [
  @others
],
</t>
<t tx="felix.20201208221211.1">"viewsWelcome": [
  {
    "view": "leojs",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leojsExplorer",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leoDocuments",
    "contents": "There are no Leo files currently opened",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leoDocumentsExplorer",
    "contents": "There are no Leo files currently opened",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leoButtons",
    "contents": "There are no Leo files currently opened",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leoButtonsExplorer",
    "contents": "There are no Leo files currently opened",
    "when": "leoReady &amp;&amp; !leoTreeOpened"
  },
  {
    "view": "leoButtons",
    "contents": "There are no @buttons in this outline",
    "when": "leoReady &amp;&amp; leoTreeOpened"
  },
  {
    "view": "leoButtonsExplorer",
    "contents": "There are no @buttons in this outline",
    "when": "leoReady &amp;&amp; leoTreeOpened"
  }
],
</t>
<t tx="felix.20201208221448.1">"menus": {
  @others
},
</t>
<t tx="felix.20201208221652.1">"commandPalette": [
  @others
],
</t>
<t tx="felix.20201208221716.1">"explorer/context": [
  {
    "command": "leojs.openLeoFile",
    "when": "resourceScheme == file &amp;&amp; resourceExtname == .leo",
    "group": "navigation@1"
  }
],
"view/title": [
  {
    "command": "leojs.openLeoFile",
    "when": "view =~ /leoDocuments/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.newLeoFile",
    "when": "view =~ /leoDocuments/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.openLeoFile",
    "when": "view =~ /leojs/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.newLeoFile",
    "when": "view =~ /leojs/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened &amp;&amp; leoTreeTitled &amp;&amp; leoChanged",
    "group": "navigation@2"
  },
  {
    "command": "leojs.saveAsLeoFile",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened &amp;&amp; !leoTreeTitled",
    "group": "navigation@2"
  },
  {
    "command": "leojs.undoFromOutline",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanUndo",
    "group": "navigation@3"
  },
  {
    "command": "leojs.redoFromOutline",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanRedo",
    "group": "navigation@4"
  },
  {
    "command": "leojs.deHoistFromOutline",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanDehoist",
    "group": "navigation@5"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeOpened",
    "group": "navigation@6"
  },
  {
    "command": "leojs.disableLeoTreeNav",
    "when": "view =~ /leojs/ &amp;&amp; leoTreeBrowse"
  },
  {
    "command": "leojs.hideEditOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showEditOnNodes"
  },
  {
    "command": "leojs.hideAddOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showAddOnNodes"
  },
  {
    "command": "leojs.hideArrowsOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showArrowsOnNodes"
  },
  {
    "command": "leojs.hideCopyOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showCopyOnNodes"
  },
  {
    "command": "leojs.hideCloneOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showCloneOnNodes"
  },
  {
    "command": "leojs.hideMarkOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; showMarkOnNodes"
  },
  {
    "command": "leojs.enableLeoTreeNav",
    "when": "view =~ /leojs/ &amp;&amp; !leoTreeBrowse"
  },
  {
    "command": "leojs.showEditOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showEditOnNodes"
  },
  {
    "command": "leojs.showAddOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showAddOnNodes"
  },
  {
    "command": "leojs.showArrowsOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showArrowsOnNodes"
  },
  {
    "command": "leojs.showCopyOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showCopyOnNodes"
  },
  {
    "command": "leojs.showCloneOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showCloneOnNodes"
  },
  {
    "command": "leojs.showMarkOnNodes",
    "when": "view =~ /leojs/ &amp;&amp; !showMarkOnNodes"
  }
],
"view/item/context": [
  {
    "command": "leojs.editHeadline",
    "when": "showEditOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@1"
  },
  {
    "command": "leojs.insertNode",
    "when": "showAddOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@2"
  },
  {
    "command": "leojs.moveOutlineDown",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineLeft",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineRight",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineUp",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.copyNode",
    "when": "showCopyOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@4"
  },
  {
    "command": "leojs.cloneNode",
    "when": "showCloneOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@4"
  },
  {
    "command": "leojs.mark",
    "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeUnmarked/",
    "group": "inline@5"
  },
  {
    "command": "leojs.unmark",
    "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeMarked/",
    "group": "inline@5"
  },
  {
    "command": "leojs.openAside",
    "when": "showOpenAside &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext1@1"
  },
  {
    "command": "leojs.hoistNode",
    "when": "viewItem =~ /leoNodeNotRoot/",
    "group": "leoNodeContext1@2"
  },
  {
    "command": "leojs.deHoist",
    "when": "leoCanDehoist &amp;&amp; viewItem =~ /leoNodeRoot/",
    "group": "leoNodeContext1@2"
  },
  {
    "command": "leojs.refreshFromDisk",
    "when": "viewItem =~ /leoNodeAtFile/",
    "group": "leoNodeContext1@3"
  },
  {
    "command": "leojs.mark",
    "when": "viewItem =~ /leoNodeUnmarked/",
    "group": "leoNodeContext2@1"
  },
  {
    "command": "leojs.unmark",
    "when": "viewItem =~ /leoNodeMarked/",
    "group": "leoNodeContext2@2"
  },
  {
    "command": "leojs.copyNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@3"
  },
  {
    "command": "leojs.cutNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@4"
  },
  {
    "command": "leojs.pasteNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@5"
  },
  {
    "command": "leojs.pasteNodeAsClone",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@6"
  },
  {
    "command": "leojs.delete",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@7"
  },
  {
    "command": "leojs.insertNode",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext3@1"
  },
  {
    "command": "leojs.cloneNode",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext3@2"
  },
  {
    "command": "leojs.gotoNextClone",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNodeCloned/",
    "group": "leoNodeContext3@3"
  }
]
</t>
<t tx="felix.20201208221809.1">  @others
</t>
<t tx="felix.20201208221847.1">  @others
</t>
<t tx="felix.20201208221945.1">"keybindings": [
  {
    "command": "leojs.executeScript",
    "key": "ctrl+b",
    "mac": "cmd+b",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.executeScript",
    "key": "ctrl+b",
    "mac": "cmd+b",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.minibuffer",
    "key": "alt+x",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.showOutline",
    "key": "alt+t",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.showOutline",
    "key": "ctrl+t",
    "mac": "cmd+t",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.showBody",
    "key": "ctrl+t",
    "mac": "cmd+t",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "alt+d",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "tab",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "enter",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "key": "ctrl+s",
    "mac": "cmd+s",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments/"
  },
  {
    "command": "leojs.saveLeoFile",
    "key": "ctrl+s",
    "mac": "cmd+s",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.contractAll",
    "key": "alt+-",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "key": "alt+-",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.editSelectedHeadline",
    "key": "ctrl+h",
    "mac": "cmd+h",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.editSelectedHeadlineFromOutline",
    "key": "ctrl+h",
    "mac": "cmd+h",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.markSelection",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.markSelectionFromOutline",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.unmarkSelection",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.unmarkSelectionFromOutline",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.extract",
    "key": "ctrl+shift+d",
    "mac": "cmd+shift+d",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.extract",
    "key": "ctrl+shift+d",
    "mac": "cmd+shift+d",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
    "command": "leojs.extractNames",
    "key": "ctrl+shift+n",
    "mac": "cmd++shift+n",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.extractNames",
    "key": "ctrl+shift+n",
    "mac": "cmd+shift+n",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leojs/"
  },
  {
  @others
]
</t>
<t tx="felix.20201208222541.1">"views": {
  "explorer": [
    {
      "id": "leojsExplorer",
      "name": "Leo Outline",
      "contextualTitle": "Leo"
    },
    {
      "id": "leoDocumentsExplorer",
      "name": "Leo Documents",
      "contextualTitle": "Leo"
    },
    {
      "id": "leoButtonsExplorer",
      "name": "Leo Buttons",
      "contextualTitle": "Leo"
    }
  ],
  "leojsView": [
    {
      "id": "leojs",
      "contextualTitle": "Leo",
      "name": "Outline"
    },
    {
      "id": "leoDocuments",
      "contextualTitle": "Leo",
      "name": "Documents"
    },
    {
      "id": "leoButtons",
      "contextualTitle": "Leo",
      "name": "Buttons"
    }
  ]
},
</t>
<t tx="felix.20201208223531.1">import * as vscode from 'vscode';

// import * as abc from './leoFiles'; // works
//// import { test, testVar } from './leoFiles'; // works too

// import * as leo from './ekr/test/leo'; // Your tests from leojs4 :)

// EKR: This works!
// import {test} from './ekr/test-ts/leo';
// test();

import { LeoButton, LeoDocument, PNode } from './types';

// https://github.com/leo-editor/leo-editor/issues/1025

// For now give results to tree view panels (outline, documents and at-buttons)

export class Leojs {


    // FAKE model of the outline (PNodes are temporary replacement of positions + vnodes)
    // simulates _yieldAllRootChildren from leoInteg's leobridgeserver.py
    public positions: PNode[] = [
        {
            header: 'node1',
            body: 'node1 body',
            children: [
                {
                    header: 'nodeInside1',
                    body: 'nodeInside1 body',
                    marked: true,
                    children: [],
                },
                {
                    header: 'nodeInside2',
                    body: 'nodeInside2 body',
                    children: [],
                },
            ],
        },
        {
            header: 'node2selected',
            selected: true,
            body: '', // Empty body should display icon without blue square
            children: [],
        },

        {
            header: '@file node3',
            atFile: true,
            body: 'node3 body',
            children: [],
        },
    ];

    // Fake documents array (rendered in tree view but is just a list - no node relationships)
    public documents: LeoDocument[] = [
        {
            name: 'fakeSelectedDoc1.leo',
            index: 0,
            changed: false,
            selected: true,
        },
        {
            name: 'fakeChangedDoc2.leo',
            index: 1,
            changed: true,
            selected: false,
        },
        { name: 'fakeDoc3.leo', index: 2, changed: false, selected: false },
    ];

    // Fake @ buttons array (rendered in tree view but is just a list - no node relationships)
    public atButtons: LeoButton[] = [
        { name: 'script-button', index: 'nullButtonWidget' },
        { name: 'button name 2', index: 'key2' },
        { name: 'button name 3', index: 'key3' },
    ];

    constructor() {
        // insert parent properties in fake positions
        this.positions.forEach((p_position) =&gt; {
            // set to undefined at first for root nodes
            this._setPNodeParents(p_position, undefined);
        });
    }

    /**
     * Recursive method to fill the parent properties of fake position-structure
     * @param p_position
     * @param p_parent
     */
    private _setPNodeParents(p_position: PNode, p_parent?: PNode): void {
        p_position.parent = p_parent; // set its parent
        p_position.children.forEach((p_child) =&gt; {
            this._setPNodeParents(p_child, p_position);
        });
    }
}
</t>
<t tx="felix.20201208223553.1">import * as vscode from 'vscode';
import { LeoOutlineNode } from './leoOutlineNode';
import { ProviderResult } from "vscode";
import { Icon, PNode } from './types';
import { Leojs } from './leojs';
import { LeoUI } from './leoUI';

@others
@language typescript
@tabwidth -4
</t>
<t tx="felix.20201208224407.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Icon } from "./types";
import { LeoOutlineNode } from "./leoOutlineNode";

// String and other types/structures helper functions, along with common vscode API calls

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224407.10">/**
 * * Returns the milliseconds between a given starting process.hrtime tuple and the current call to process.hrtime
 * @param p_start starting process.hrtime to subtract from current immediate time
 * @returns number of milliseconds passed since the given start hrtime
 */
export function getDurationMs(p_start: [number, number]): number {
    const [w_secs, w_nanosecs] = process.hrtime(p_start);
    return w_secs * 1000 + Math.floor(w_nanosecs / 1000000);
}

</t>
<t tx="felix.20201208224407.11">/**
 * * Extracts the file name from a full path, such as "foo.bar" from "/abc/def/foo.bar"
 * @param p_path Full path such as "/var/drop/foo/boo/moo.js" or "C:\Documents and Settings\img\recycled log.jpg"
 * @returns file name string such as "moo.js" or "recycled log.jpg""
 */
export function getFileFromPath(p_path: string): string {
    return p_path.replace(/^.*[\\\/]/, '');
}

</t>
<t tx="felix.20201208224407.12">/**
 * * Checks if a node would become dirty if it were to now have body content at all
 * @param p_node LeoNode from vscode's outline
 * @param p_newHasBody Flag to signify presence of body content, to be compared with its current state
 * @returns True if it would change the icon with actual body content, false otherwise
 */
export function isIconChangedByEdit(p_node: LeoOutlineNode, p_newHasBody: boolean): boolean {
    if (!p_node.dirty || (p_node.hasBody === !p_newHasBody)) {
        return true;
    }
    return false;
}

</t>
<t tx="felix.20201208224407.14">/**
* Builds a 'Leo Scheme' vscode.Uri from a gnx (or strings like 'LEO BODY' or empty strings to decorate breadcrumbs)
* @param p_str leo node gnx strings are used to build Uri
* @returns A vscode 'Uri' object
*/
export function strToLeoUri(p_str: string): vscode.Uri {
    return vscode.Uri.parse(Constants.URI_SCHEME_HEADER + p_str);
}

</t>
<t tx="felix.20201208224407.15">/**
 * * Gets the gnx, (or another string like 'LEO BODY' or other), from a vscode.Uri object
 * @param p_uri Source uri to extract from
 * @returns The string source that was used to build this Uri
 */
export function leoUriToStr(p_uri: vscode.Uri): string {
    // TODO : Use length of a constant or something other than 'fsPath'
    // For now, just remove the '/' (or backslash on Windows) before the path string
    return p_uri.fsPath.substr(1);
}

</t>
<t tx="felix.20201208224407.16">/**
 * * Sets a vscode context variable with 'vscode.commands.executeCommand' &amp; 'setContext'
 * @param p_key Key string name such as constants 'leoReady' or 'treeOpened', etc.
 * @param p_value Value to be assigned to the p_key 'key'
 * @returns A Thenable that is returned by the executeCommand call
 */
export function setContext(p_key: string, p_value: any): Thenable&lt;unknown&gt; {
    return vscode.commands.executeCommand(Constants.VSCODE_COMMANDS.SET_CONTEXT, p_key, p_value);
}

</t>
<t tx="felix.20201208224407.2">/**
 * * Build a string for representing a number that's 2 digits wide, padding with a zero if needed
 * @param p_number Between 0 and 99
 * @returns a 2 digit wide string representation of the number, left padded with zeros as needed.
 */
export function padNumber2(p_number: number): string {
    return ("0" + p_number).slice(-2);
}

</t>
<t tx="felix.20201208224407.4">/**
 * * Performs the actual addition into globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
 */
export function addFileToGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Just push that string into the context.globalState.&lt;something&gt; array
    const w_contextEntry: string[] = p_context.globalState.get(p_key) || [];
    if (w_contextEntry) {
        if (!w_contextEntry.includes(p_file)) {
            w_contextEntry.push(p_file);
            if (w_contextEntry.length &gt; 10) {
                w_contextEntry.shift();
            }
        }
        return p_context.globalState.update(p_key, w_contextEntry); // Added file
    } else {
        // First so create key entry with an array of single file
        return p_context.globalState.update(p_key, [p_file]);
    }
}

</t>
<t tx="felix.20201208224407.5">/**
 * * Removes file entry from globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
  */
export function removeFileFromGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Check if exist in context.globalState.&lt;something&gt; and remove if found
    const w_files: string[] = p_context.globalState.get(p_key) || [];
    if (w_files &amp;&amp; w_files.includes(p_file)) {
        w_files.splice(w_files.indexOf(p_file), 1); // Splice and update
        return p_context.globalState.update(p_key, w_files);
    }
    return Promise.resolve(); // not even in list so just resolve
}

</t>
<t tx="felix.20201208224407.6">/**
 * * Build all possible strings for node icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array of the 16 vscode node icons used in this vscode expansion
 */
export function buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: p_context.asAbsolutePath(
                Constants.GUI.ICON_LIGHT_PATH +
                padNumber2(p_index) +
                Constants.GUI.ICON_FILE_EXT),
            dark: p_context.asAbsolutePath(
                Constants.GUI.ICON_DARK_PATH +
                padNumber2(p_index) +
                Constants.GUI.ICON_FILE_EXT)
        };
    });
}

</t>
<t tx="felix.20201208224407.7">/**
 * * Build all possible strings for documents icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildDocumentIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT_DIRTY),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT_DIRTY)
        }
    ];
}

</t>
<t tx="felix.20201208224407.8">/**
 * * Build all possible strings for buttons icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildButtonsIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON_ADD),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON_ADD)
        }
    ];
}

</t>
<t tx="felix.20201208224420.1">import * as vscode from "vscode";
import { LeoOutlineNode } from "./leoOutlineNode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224420.10">/**
 * * Object sent back from leoInteg's 'getStates' command
 */
export interface LeoPackageStates {
    changed: boolean; // Leo document has changed (is dirty)
    canUndo: boolean; // Leo document can undo the last operation done
    canRedo: boolean; // Leo document can redo the last operation 'undone'
    canDemote: boolean; // Currently selected node can have its siblings demoted
    canPromote: boolean; // Currently selected node can have its children promoted
    canDehoist: boolean; // Leo Document is currently hoisted and can be de-hoisted
}

/**
 * * Leo document structure used in the 'Opened Leo Documents' tree view provider sent back by the server
 */
export interface LeoDocument {
    name: string;
    index: number;
    changed: boolean;
    selected: boolean;
}

/**
 * * Leo '@button' structure used in the '@buttons' tree view provider
 */
export interface LeoButton {
    name: string;
    index: string; // STRING KEY
}

</t>
<t tx="felix.20201208224420.16">/**
 * * Icon path names used in leoNodes for rendering in treeview
 */
export interface Icon {
    light: string;
    dark: string;
}

</t>
<t tx="felix.20201208224420.20">/**
 * * Parameter structure used in the 'runSaveFileDialog' equivalent when asking user input
 */
export interface showSaveAsDialogParameters {
    "initialFile": string;
    "title": string;
    "message": string;
    "filetypes": string[];
    "defaultExtension": string;
}

</t>
<t tx="felix.20201208224420.21">/**
 * * Parameter structure used in the 'runAskYesNoDialog' equivalent when asking user input
 */
export interface runAskYesNoDialogParameters {
    "ask": string;
    "message": string;
    "yes_all": boolean;
    "no_all": boolean;
}

</t>
<t tx="felix.20201208224420.22">/**
 * * Parameter structure used in the 'runAskOkDialog' equivalent when showing a warning
 */
export interface runWarnMessageDialogParameters {
    "warn": string;
    "message": string;
}

</t>
<t tx="felix.20201208224420.23">/**
 * * Parameter structure for non-blocking info message about detected file changes
 */
export interface runInfoMessageDialogParameters {
    "message": string;
}

</t>
<t tx="felix.20201208224420.24">/**
 * * Used in showAskModalDialog to get answer from user interaction
 */
export interface AskMessageItem extends vscode.MessageItem {
    value: string;
}

</t>
<t tx="felix.20201208224420.25">/**
 * * Used in switch Leo document to get answer from user interaction
 */
export interface ChooseDocumentItem extends vscode.QuickPickItem {
    value: number;
}

</t>
<t tx="felix.20201208224420.26">/**
 * * Used by the minibuffer command pallette
 * Acquired from the getCommands method in leobridgeserver.py
 */
export interface MinibufferCommand extends vscode.QuickPickItem {
    func: string;
}
</t>
<t tx="felix.20201208224420.4">/**
 * * When refreshing the outline and getting to Leo's selected node
 */
export const enum RevealType {
    NoReveal = 0,   // In apToLeoNode conversion. True:
    // Re-use the old if the global revealType is "NoReveal" and it's the selected node.
    Reveal,
    RevealSelect,
    RevealSelectFocus
}

</t>
<t tx="felix.20201208224420.5">/**
 * * Required Refresh Dictionary of "elements to refresh" flags
 */
export interface ReqRefresh {
    node?: boolean; // Reveal received selected node (Navigation only, no tree change)
    tree?: boolean; // Tree needs refresh
    body?: boolean; // Body needs refresh
    states?: boolean; // States needs refresh:
    // (changed, canUndo, canRedo, canDemote, canPromote, canDehoist)
    buttons?: boolean; // Buttons needs refresh
    documents?: boolean; // Documents needs refresh
}

</t>
<t tx="felix.20201208224420.6">/**
 * * Stackable front end commands
 */
export interface UserCommand {
    action: string;
    node?: LeoOutlineNode | undefined;  // We can START a stack with a targeted command
    text?: string | undefined; // If a string is required, for headline, etc.
    refreshType: ReqRefresh; // Minimal refresh level required by this command
    fromOutline: boolean; // Focus back on outline instead of body
    keepSelection?: boolean; // Should bring back selection on node prior to command
    resolveFn?: (result: any) =&gt; void; // call that with an answer from python's (or other) side
    rejectFn?: (reason: any) =&gt; void; // call if problem is encountered
}

</t>
<t tx="felix.20201208224420.7">/**
 * * Object container for parameters of leoJs "apply-selected-node-to-body" method
 */
export interface ShowBodyParam {
    node: LeoOutlineNode,
    aside: boolean,
    showBodyKeepFocus: boolean,
    force_open?: boolean
}
</t>
<t tx="felix.20201208224441.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import * as path from "path"; // TODO : Use this to have reliable support for window-vs-linux file-paths

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224441.2">/**
 * * Handles opening of file browser when choosing which Leo file to open
 */
export class LeoFilesBrowser {

    private _fileBrowserActive: boolean = false;

    constructor(private _context: vscode.ExtensionContext) { }

    @others
}
</t>
<t tx="felix.20201208224441.3">/**
 * * Finds a folder to propose when opening the browse-for-leo-file chooser
 * @returns An Uri for path to a folder for initial opening
 */
private _getBestOpenFolderUri(): vscode.Uri {
    let w_openedFileEnvUri: vscode.Uri | boolean = false;
    let w_activeUri: vscode.Uri | undefined = undefined;

    if (vscode.workspace.workspaceFolders &amp;&amp; vscode.workspace.workspaceFolders[0]) {
        w_activeUri = vscode.workspace.workspaceFolders[0].uri;
    }

    if (w_activeUri) {
        const w_defaultFolder = vscode.workspace.getWorkspaceFolder(w_activeUri);
        if (w_defaultFolder) {
            w_openedFileEnvUri = w_defaultFolder.uri; // Set as current opened document-path's folder
        }
    }
    if (!w_openedFileEnvUri) {
        w_openedFileEnvUri = vscode.Uri.file("~");
            // TODO : set as home folder properly, this doesn't work
            // ! EXAMPLE WITH os : const homedir = require('os').homedir();
    }
    return w_openedFileEnvUri;
}

</t>
<t tx="felix.20201208224441.4">/**
 * * Open a file browser and let the user choose a Leo file or cancel the operation
 * @param p_saveAsFlag Optional flag that will ask for a 'save' path+filename
 * @returns A promise resolving to a chosen path string, or rejected with an empty string if cancelled
 */
public getLeoFileUrl(p_saveAsFlag?: boolean): Promise&lt;string&gt; {
    if (this._fileBrowserActive) {
        return Promise.resolve("");
    }
    this._fileBrowserActive = true;
    return new Promise((p_resolve, p_reject) =&gt; {
        const w_filters: { [name: string]: string[] } = {};
        w_filters[Constants.FILE_OPEN_FILTER_MESSAGE] = [Constants.FILE_EXTENSION];

        if (p_saveAsFlag) {
            // Choose file
            vscode.window.showSaveDialog({
                saveLabel: "Save Leo File",
                defaultUri: this._getBestOpenFolderUri(),
                filters: { 'Leo File': ['leo'] }
            })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // single string
                        // Replace backslashes for windows support
                        p_resolve(p_chosenLeoFile.fsPath.replace(/\\/g, "/")); 
                    } else {
                        p_resolve(""); // not rejection - resolve empty string
                    }
                });
        } else {
            vscode.window
                .showOpenDialog({
                    canSelectMany: false,
                    defaultUri: this._getBestOpenFolderUri(),
                    filters: w_filters
                })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // array instead of single string
                         // Replace backslashes for windows support
                        p_resolve(p_chosenLeoFile[0].fsPath.replace(/\\/g, "/"));
                    } else {
                        p_resolve("");
                    }
                });
        }
    });
}

</t>
<t tx="felix.20201208224703.1">@language rest
@wrap

# How to install and run the development version

Thanks for trying out the development version of LeoInteg! :sunglasses: Contributions and pull requests are more than welcome!

## Introduction

If you're new to vscode and want to try out Leo with this vscode extension, you might want to look at this [Getting Started](https://code.visualstudio.com/docs#vscode-in-action) page to get an overview of vscode.

Furthermore, if you've never ran a vscode extension in an **Extension Development Host**, here is a [short overview about running and modifying a simple extension](https://code.visualstudio.com/api/get-started/your-first-extension).

If you're having problems, try [running this sample extension](https://github.com/Microsoft/vscode-extension-samples/tree/master/helloworld-sample#running-the-sample) first to catch underlying problems or missing dependencies.

</t>
<t tx="felix.20201208235204.1">/**
 * Command strings to be used with vscode.commands.executeCommand
 * See https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command
 */
public static VSCODE_COMMANDS = {
    SET_CONTEXT: "setContext",
    CLOSE_ACTIVE_EDITOR: "workbench.action.closeActiveEditor",
    QUICK_OPEN: "workbench.action.quickOpen"
};

</t>
<t tx="felix.20201209011931.1">export class LeoOutlineProvider implements vscode.TreeDataProvider&lt;PNode&gt; {
    private _onDidChangeTreeData: vscode.EventEmitter&lt;PNode | undefined&gt; = new vscode.EventEmitter&lt;PNode | undefined&gt;();

    readonly onDidChangeTreeData: vscode.Event&lt;PNode | undefined&gt; = this._onDidChangeTreeData.event;

    private _uniqueId: number = 0;

    @others
}
</t>
<t tx="felix.20201209011931.2">constructor(
    private _icons: Icon[],
    private _leoUI: LeoUI,
    private _leo: Leojs
) {
}


</t>
<t tx="felix.20201209011931.3">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201209011931.4">public getTreeItem(element: PNode): Thenable&lt;LeoOutlineNode&gt; | LeoOutlineNode {
    const w_leoNode = new LeoOutlineNode(element.header,
        element.children.length ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None,
        element, // ap
        !!element.cloned, // cloned
        !!element.dirty, // dirty
        !!element.marked, // marked
        !!element.atFile, // atFile
        !!element.body &amp;&amp; !!element.body.length,
        false, // 'u' - user defined data
        this._icons,
        "id" + this._uniqueId++
    );

    if (element.selected) {
        this._leoUI.gotSelectedNode(element);
    }

    // Build a LeoNode (a vscode tree node) from the PNode
    return w_leoNode;
}

</t>
<t tx="felix.20201209011931.5">public getChildren(element?: PNode): Thenable&lt;PNode[]&gt; {
    if (element) {
        return Promise.resolve(element.children);
    } else {
        return Promise.resolve(this._leo.positions);
    }
}

</t>
<t tx="felix.20201209011931.6">public getParent(element: PNode): ProviderResult&lt;PNode&gt; {
    // Buttons are just a list, as such, entries are always child of root so return null
    if (element) {
        return element.parent;
</t>
<t tx="felix.20201209011931.7"></t>
<t tx="felix.20201209011931.8">    }
    return undefined;
}

</t>
<t tx="felix.20201209012321.1">export interface PNode {
    // Fake structure. Use Position.v.isCloned(), etc. instead
    header: string;
    children: PNode[];
    parent?: PNode;
    body: string;
    selected?: boolean;
    marked?: boolean;
    cloned?: boolean;
    dirty?: boolean;
    atFile?: boolean;
}

</t>
</tnodes>
</leo_file>
