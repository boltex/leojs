<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20201209145256.1"><vh>Startup</vh>
<v t="ekr.20201210035538.1"><vh>@file scripts.txt</vh></v>
</v>
<v t="felix.20201208214250.2"><vh>Documentation</vh>
<v t="felix.20201208214319.1"><vh>@clean README.md</vh></v>
<v t="felix.20201208214506.1"><vh>@clean CHANGELOG.md</vh></v>
<v t="felix.20201208224703.1"><vh>@clean CONTRIBUTING.md</vh></v>
</v>
<v t="ekr.20201209145358.1"><vh>Code</vh>
<v t="felix.20201208214322.1"><vh>@clean src/extension.ts</vh>
<v t="felix.20201208215613.1"><vh>activate</vh></v>
<v t="felix.20201208215619.1"><vh>deactivate</vh></v>
</v>
<v t="felix.20201208223531.1"><vh>@clean src/leojs.ts</vh></v>
<v t="felix.20201208223553.1"><vh>@clean src/leoOutline.ts</vh>
<v t="felix.20201209011931.1"><vh>class JsOutlineProvider</vh>
<v t="felix.20201209011931.2"><vh>constructor</vh></v>
<v t="felix.20201209011931.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20201209011931.4"><vh>getTreeItem</vh></v>
<v t="felix.20201209011931.5"><vh>getChildren</vh></v>
<v t="felix.20201209011931.6"><vh>getParent</vh></v>
<v t="felix.20201209011931.7"><vh>_buildNodeIconPaths</vh></v>
<v t="felix.20201209011931.8"><vh>_jsNodeArray</vh></v>
</v>
</v>
<v t="felix.20201208223554.1"><vh>@clean src/leoNode.ts</vh>
<v t="felix.20201209004316.1"><vh>class LeoNode</vh>
<v t="felix.20201209004316.2"><vh>copyProperties</vh></v>
<v t="felix.20201209004316.3"><vh>setRoot</vh></v>
<v t="felix.20201209004316.4"><vh>_getNodeContextValue</vh></v>
</v>
</v>
<v t="felix.20201208215536.1"><vh>@clean src/constants.ts</vh>
<v t="felix.20201208215536.2"><vh>class Constants</vh>
<v t="felix.20201208215536.3"><vh>general constants</vh></v>
<v t="felix.20201208215536.4"><vh>workbench interface panels</vh></v>
<v t="felix.20201208215536.5"><vh>user messages</vh></v>
<v t="felix.20201208215536.6"><vh>ask/save buttons</vh></v>
<v t="felix.20201208215536.10"><vh>context flags</vh></v>
<v t="felix.20201208235204.1"><vh>vscode commands</vh></v>
<v t="felix.20201208215536.16"><vh>commands strings</vh></v>
</v>
</v>
<v t="felix.20201208224407.1"><vh>@clean src/utils.ts</vh>
<v t="felix.20201208224407.2"><vh>padNumber2</vh></v>
<v t="felix.20201208224407.4"><vh>addFileToGlobal</vh></v>
<v t="felix.20201208224407.5"><vh>removeFileFromGlobal</vh></v>
<v t="felix.20201208224407.6"><vh>buildNodeIconPaths</vh></v>
<v t="felix.20201208224407.7"><vh>buildDocumentIconPaths</vh></v>
<v t="felix.20201208224407.8"><vh>buildButtonsIconPaths</vh></v>
<v t="felix.20201208224407.10"><vh>getDurationMilliseconds</vh></v>
<v t="felix.20201208224407.11"><vh>getFileFromPath</vh></v>
<v t="felix.20201208224407.12"><vh>isIconChangedByEdit</vh></v>
<v t="felix.20201208224407.14"><vh>strToLeoUri</vh></v>
<v t="felix.20201208224407.15"><vh>leoUriToStr</vh></v>
<v t="felix.20201208224407.16"><vh>setContext</vh></v>
</v>
<v t="felix.20201208224420.1"><vh>@clean src/types.d.ts</vh>
<v t="felix.20201209012321.1"><vh>PNode</vh></v>
<v t="felix.20201208224420.4"><vh>RevealType</vh></v>
<v t="felix.20201208224420.5"><vh>RefreshType</vh></v>
<v t="felix.20201208224420.6"><vh>UserCommand</vh></v>
<v t="felix.20201208224420.7"><vh>ShowBodyParam</vh></v>
<v t="felix.20201208224420.10"><vh>ArchivedPosition</vh></v>
<v t="felix.20201208224420.16"><vh>Icon</vh></v>
<v t="felix.20201208224420.20"><vh>showSaveAsDialogParameters</vh></v>
<v t="felix.20201208224420.21"><vh>runAskYesNoDialogParameters</vh></v>
<v t="felix.20201208224420.22"><vh>runWarnMessageDialogParameters</vh></v>
<v t="felix.20201208224420.23"><vh>runInfoMessageDialogParameters</vh></v>
<v t="felix.20201208224420.24"><vh>AskMessageItem</vh></v>
<v t="felix.20201208224420.25"><vh>ChooseDocumentItem</vh></v>
<v t="felix.20201208224420.26"><vh>MinibufferCommand</vh></v>
</v>
<v t="felix.20201208224441.1"><vh>@clean src/leoFileBrowser.ts</vh>
<v t="felix.20201208224441.2"><vh>class LeoFilesBrowser</vh>
<v t="felix.20201208224441.3"><vh>_getBestOpenFolderUri</vh></v>
<v t="felix.20201208224441.4"><vh>getLeoFileUrl</vh></v>
</v>
</v>
<v t="felix.20201208214449.1"><vh>@clean package.json</vh>
<v t="ekr.20201210033824.1"><vh>&lt;&lt; contributes &gt;&gt;</vh>
<v t="felix.20201208222541.1"><vh>views</vh></v>
<v t="felix.20201208221211.1"><vh>viewsWelcome</vh></v>
<v t="felix.20201208220441.1"><vh>commands</vh>
<v t="ekr.20201213060317.2"><vh>test</vh></v>
<v t="ekr.20201213060317.3"><vh>executeScript</vh></v>
<v t="ekr.20201213060317.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213060317.5"><vh>removeButton</vh></v>
<v t="ekr.20201213060317.6"><vh>showBody</vh></v>
<v t="ekr.20201213060317.7"><vh>showOutline</vh></v>
<v t="ekr.20201213060317.8"><vh>showLogPane</vh></v>
<v t="ekr.20201213060317.9"><vh>openLeoFile</vh></v>
<v t="ekr.20201213060317.10"><vh>recentLeoFiles</vh></v>
<v t="ekr.20201213060317.11"><vh>switchLeoFile</vh></v>
<v t="ekr.20201213060317.12"><vh>newLeoFile</vh></v>
<v t="ekr.20201213060317.13"><vh>closeLeoFile</vh></v>
<v t="ekr.20201213060317.14"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213060317.15"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213060317.16"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213060317.17"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213060317.18"><vh>refreshFromDiskSelection</vh></v>
<v t="ekr.20201213060317.19"><vh>refreshFromDiskSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.20"><vh>gitDiff</vh></v>
<v t="ekr.20201213060317.21"><vh>selectTreeNode</vh></v>
<v t="ekr.20201213060317.22"><vh>openAside</vh></v>
<v t="ekr.20201213060317.23"><vh>contractAll</vh></v>
<v t="ekr.20201213060317.24"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213060317.25"><vh>editHeadline</vh></v>
<v t="ekr.20201213060317.26"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213060317.27"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213060317.28"><vh>mark</vh></v>
<v t="ekr.20201213060317.29"><vh>markSelection</vh></v>
<v t="ekr.20201213060317.30"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.31"><vh>unmark</vh></v>
<v t="ekr.20201213060317.32"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213060317.33"><vh>unmarkSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.34"><vh>copyNode</vh></v>
<v t="ekr.20201213060317.35"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213060317.36"><vh>cutNode</vh></v>
<v t="ekr.20201213060317.37"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213060317.38"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.39"><vh>pasteNode</vh></v>
<v t="ekr.20201213060317.40"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213060317.41"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.42"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213060317.43"><vh>pasteNodeAsCloneAtSelection</vh></v>
<v t="ekr.20201213060317.44"><vh>pasteNodeAsCloneAtSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.45"><vh>delete</vh></v>
<v t="ekr.20201213060317.46"><vh>deleteSelection</vh></v>
<v t="ekr.20201213060317.47"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.48"><vh>extract</vh></v>
<v t="ekr.20201213060317.49"><vh>extractNames</vh></v>
<v t="ekr.20201213060317.50"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213060317.51"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213060317.52"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.53"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213060317.54"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213060317.55"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.56"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213060317.57"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213060317.58"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.59"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213060317.60"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213060317.61"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.62"><vh>insertNode</vh></v>
<v t="ekr.20201213060317.63"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213060317.64"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.65"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213060317.66"><vh>cloneNode</vh></v>
<v t="ekr.20201213060317.67"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213060317.68"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.69"><vh>promote</vh></v>
<v t="ekr.20201213060317.70"><vh>promoteSelection</vh></v>
<v t="ekr.20201213060317.71"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.72"><vh>demote</vh></v>
<v t="ekr.20201213060317.73"><vh>demoteSelection</vh></v>
<v t="ekr.20201213060317.74"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.75"><vh>sortChildrenSelection</vh></v>
<v t="ekr.20201213060317.76"><vh>sortChildrenSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.77"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213060317.78"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.79"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213060317.80"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213060317.81"><vh>pageUp</vh></v>
<v t="ekr.20201213060317.82"><vh>pageDown</vh></v>
<v t="ekr.20201213060317.83"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213060317.84"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213060317.85"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213060317.86"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213060317.87"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213060317.88"><vh>hoistNode</vh></v>
<v t="ekr.20201213060317.89"><vh>hoistSelection</vh></v>
<v t="ekr.20201213060317.90"><vh>hoistSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.91"><vh>deHoist</vh></v>
<v t="ekr.20201213060317.92"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213060317.93"><vh>undo</vh></v>
<v t="ekr.20201213060317.94"><vh>undoFromOutline</vh></v>
<v t="ekr.20201213060317.95"><vh>redo</vh></v>
<v t="ekr.20201213060317.96"><vh>redoFromOutline</vh></v>
<v t="ekr.20201213060317.97"><vh>cloneFindAll</vh></v>
<v t="ekr.20201213060317.98"><vh>cloneFindAllFlattened</vh></v>
<v t="ekr.20201213060317.99"><vh>cloneFindMarked</vh></v>
<v t="ekr.20201213060317.100"><vh>cloneFindFlattenedMarked</vh></v>
<v t="ekr.20201213060317.101"><vh>copyMarked</vh></v>
<v t="ekr.20201213060317.102"><vh>diffMarkedNodes</vh></v>
<v t="ekr.20201213060317.103"><vh>gotoNextMarked</vh></v>
<v t="ekr.20201213060317.104"><vh>gotoNextClone</vh></v>
<v t="ekr.20201213060317.105"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213060317.106"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213060317.107"><vh>markChangedItems</vh></v>
<v t="ekr.20201213060317.108"><vh>markSubheads</vh></v>
<v t="ekr.20201213060317.109"><vh>unmarkAll</vh></v>
<v t="ekr.20201213060317.110"><vh>cloneMarkedNodes</vh></v>
<v t="ekr.20201213060317.111"><vh>deleteMarkedNodes</vh></v>
<v t="ekr.20201213060317.112"><vh>moveMarkedNodes</vh></v>
</v>
<v t="felix.20201208221448.1"><vh>menus</vh>
<v t="felix.20201208221652.1"><vh>commandPalette</vh>
<v t="ekr.20201213064703.3"><vh>executeScript</vh></v>
<v t="ekr.20201213064703.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213064703.5"><vh>showLogPane</vh></v>
<v t="ekr.20201213064703.6"><vh>openLeoFile</vh></v>
<v t="ekr.20201213064703.7"><vh>recentLeoFiles</vh></v>
<v t="ekr.20201213064703.8"><vh>switchLeoFile</vh></v>
<v t="ekr.20201213064703.9"><vh>newLeoFile</vh></v>
<v t="ekr.20201213064703.10"><vh>closeLeoFile</vh></v>
<v t="ekr.20201213064703.11"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213064703.12"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213064703.13"><vh>refreshFromDiskSelection</vh></v>
<v t="ekr.20201213064703.14"><vh>gitDiff</vh></v>
<v t="ekr.20201213064703.15"><vh>contractAll</vh></v>
<v t="ekr.20201213064703.16"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213064703.17"><vh>markSelection</vh></v>
<v t="ekr.20201213064703.18"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213064703.19"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213064703.20"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213064703.21"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213064703.22"><vh>pasteNodeAsCloneAtSelection</vh></v>
<v t="ekr.20201213064703.23"><vh>deleteSelection</vh></v>
<v t="ekr.20201213064703.24"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213064703.25"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213064703.26"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213064703.27"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213064703.28"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213064703.29"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213064703.30"><vh>promoteSelection</vh></v>
<v t="ekr.20201213064703.31"><vh>demoteSelection</vh></v>
<v t="ekr.20201213064703.32"><vh>sortChildrenSelection</vh></v>
<v t="ekr.20201213064703.33"><vh>sortChildrenSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.34"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213064703.35"><vh>gotoNextMarked</vh></v>
<v t="ekr.20201213064703.36"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213064703.37"><vh>hoistSelection</vh></v>
<v t="ekr.20201213064703.38"><vh>deHoist</vh></v>
<v t="ekr.20201213064703.39"><vh>undo</vh></v>
<v t="ekr.20201213064703.40"><vh>redo</vh></v>
<v t="ekr.20201213064703.41"><vh>cloneFindAll</vh></v>
<v t="ekr.20201213064703.42"><vh>cloneFindAllFlattened</vh></v>
<v t="ekr.20201213064703.43"><vh>cloneFindMarked</vh></v>
<v t="ekr.20201213064703.44"><vh>cloneFindFlattenedMarked</vh></v>
<v t="ekr.20201213064703.45"><vh>extract</vh></v>
<v t="ekr.20201213064703.46"><vh>extractNames</vh></v>
<v t="ekr.20201213064703.47"><vh>copyMarked</vh></v>
<v t="ekr.20201213064703.48"><vh>diffMarkedNodes</vh></v>
<v t="ekr.20201213064703.49"><vh>markChangedItems</vh></v>
<v t="ekr.20201213064703.50"><vh>markSubheads</vh></v>
<v t="ekr.20201213064703.51"><vh>unmarkAll</vh></v>
<v t="ekr.20201213064703.52"><vh>cloneMarkedNodes</vh></v>
<v t="ekr.20201213064703.53"><vh>deleteMarkedNodes</vh></v>
<v t="ekr.20201213064703.54"><vh>moveMarkedNodes</vh></v>
<v t="ekr.20201213064703.55"><vh>test</vh></v>
<v t="ekr.20201213064703.56"><vh>removeButton</vh></v>
<v t="ekr.20201213064703.57"><vh>showBody</vh></v>
<v t="ekr.20201213064703.58"><vh>showOutline</vh></v>
<v t="ekr.20201213064703.59"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213064703.60"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213064703.61"><vh>refreshFromDiskSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.62"><vh>selectTreeNode</vh></v>
<v t="ekr.20201213064703.63"><vh>openAside</vh></v>
<v t="ekr.20201213064703.64"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213064703.65"><vh>editHeadline</vh></v>
<v t="ekr.20201213064703.66"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213064703.67"><vh>mark</vh></v>
<v t="ekr.20201213064703.68"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.69"><vh>unmark</vh></v>
<v t="ekr.20201213064703.70"><vh>unmarkSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.71"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.72"><vh>cutNode</vh></v>
<v t="ekr.20201213064703.73"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.74"><vh>pasteNode</vh></v>
<v t="ekr.20201213064703.75"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.76"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213064703.77"><vh>pasteNodeAsCloneAtSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.78"><vh>delete</vh></v>
<v t="ekr.20201213064703.79"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.80"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213064703.81"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.82"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213064703.83"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.84"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213064703.85"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.86"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213064703.87"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.88"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.89"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.90"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213064703.91"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.92"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.93"><vh>promote</vh></v>
<v t="ekr.20201213064703.94"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.95"><vh>demote</vh></v>
<v t="ekr.20201213064703.96"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.97"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.98"><vh>gotoNextClone</vh></v>
<v t="ekr.20201213064703.99"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.100"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213064703.101"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213064703.102"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213064703.103"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213064703.104"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213064703.105"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213064703.106"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213064703.107"><vh>pageUp</vh></v>
<v t="ekr.20201213064703.108"><vh>pageDown</vh></v>
<v t="ekr.20201213064703.109"><vh>hoistNode</vh></v>
<v t="ekr.20201213064703.110"><vh>hoistSelectionFromOutline</vh></v>
<v t="ekr.20201213064703.111"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213064703.112"><vh>undoFromOutline</vh></v>
<v t="ekr.20201213064703.113"><vh>redoFromOutline</vh></v>
</v>
<v t="felix.20201208221716.1"><vh>explorer/context</vh></v>
<v t="felix.20201208221809.1"><vh>view/title</vh>
<v t="ekr.20201213064703.117"><vh>openLeoFile</vh></v>
<v t="ekr.20201213064703.118"><vh>newLeoFile</vh></v>
<v t="ekr.20201213064703.119"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213064703.120"><vh>saveAsLeoFile</vh></v>
<v t="ekr.20201213064703.121"><vh>undoFromOutline</vh></v>
<v t="ekr.20201213064703.122"><vh>redoFromOutline</vh></v>
<v t="ekr.20201213064703.123"><vh>deHoistFromOutline</vh></v>
<v t="ekr.20201213064703.124"><vh>contractAllFromOutline</vh></v>
</v>
<v t="felix.20201208221847.1"><vh>view/item/context</vh>
<v t="ekr.20201213064703.126"><vh>editHeadline</vh></v>
<v t="ekr.20201213064703.127"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.128"><vh>moveOutlineDown</vh></v>
<v t="ekr.20201213064703.129"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20201213064703.130"><vh>moveOutlineRight</vh></v>
<v t="ekr.20201213064703.131"><vh>moveOutlineUp</vh></v>
<v t="ekr.20201213064703.132"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.133"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.134"><vh>mark</vh></v>
<v t="ekr.20201213064703.135"><vh>unmark</vh></v>
<v t="ekr.20201213064703.136"><vh>openAside</vh></v>
<v t="ekr.20201213064703.137"><vh>hoistNode</vh></v>
<v t="ekr.20201213064703.138"><vh>deHoist</vh></v>
<v t="ekr.20201213064703.139"><vh>refreshFromDisk</vh></v>
<v t="ekr.20201213064703.140"><vh>mark</vh></v>
<v t="ekr.20201213064703.141"><vh>unmark</vh></v>
<v t="ekr.20201213064703.142"><vh>copyNode</vh></v>
<v t="ekr.20201213064703.143"><vh>cutNode</vh></v>
<v t="ekr.20201213064703.144"><vh>pasteNode</vh></v>
<v t="ekr.20201213064703.145"><vh>pasteNodeAsClone</vh></v>
<v t="ekr.20201213064703.146"><vh>delete</vh></v>
<v t="ekr.20201213064703.147"><vh>insertNode</vh></v>
<v t="ekr.20201213064703.148"><vh>cloneNode</vh></v>
<v t="ekr.20201213064703.149"><vh>gotoNextClone</vh></v>
</v>
</v>
<v t="felix.20201208221945.1"><vh>keybindings</vh>
<v t="ekr.20201213070431.2"><vh>executeScript</vh></v>
<v t="ekr.20201213070431.3"><vh>executeScript</vh></v>
<v t="ekr.20201213070431.4"><vh>minibuffer</vh></v>
<v t="ekr.20201213070431.5"><vh>showOutline</vh></v>
<v t="ekr.20201213070431.6"><vh>showOutline</vh></v>
<v t="ekr.20201213070431.7"><vh>showBody</vh></v>
<v t="ekr.20201213070431.8"><vh>showBody</vh></v>
<v t="ekr.20201213070431.9"><vh>showBody</vh></v>
<v t="ekr.20201213070431.10"><vh>showBody</vh></v>
<v t="ekr.20201213070431.11"><vh>saveLeoFileFromOutline</vh></v>
<v t="ekr.20201213070431.12"><vh>saveLeoFile</vh></v>
<v t="ekr.20201213070431.13"><vh>contractAll</vh></v>
<v t="ekr.20201213070431.14"><vh>contractAllFromOutline</vh></v>
<v t="ekr.20201213070431.15"><vh>editSelectedHeadline</vh></v>
<v t="ekr.20201213070431.16"><vh>editSelectedHeadlineFromOutline</vh></v>
<v t="ekr.20201213070431.17"><vh>markSelection</vh></v>
<v t="ekr.20201213070431.18"><vh>markSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.19"><vh>unmarkSelection</vh></v>
<v t="ekr.20201213070431.20"><vh>unmarkSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.21"><vh>extract</vh></v>
<v t="ekr.20201213070431.22"><vh>extract</vh></v>
<v t="ekr.20201213070431.23"><vh>extractNames</vh></v>
<v t="ekr.20201213070431.24"><vh>extractNames</vh></v>
<v t="ekr.20201213070431.25"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213070431.26"><vh>moveOutlineDownSelection</vh></v>
<v t="ekr.20201213070431.27"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.28"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.29"><vh>moveOutlineDownSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.30"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213070431.31"><vh>moveOutlineLeftSelection</vh></v>
<v t="ekr.20201213070431.32"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.33"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.34"><vh>moveOutlineLeftSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.35"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213070431.36"><vh>moveOutlineRightSelection</vh></v>
<v t="ekr.20201213070431.37"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.38"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.39"><vh>moveOutlineRightSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.40"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213070431.41"><vh>moveOutlineUpSelection</vh></v>
<v t="ekr.20201213070431.42"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.43"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.44"><vh>moveOutlineUpSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.45"><vh>sortSiblingsSelection</vh></v>
<v t="ekr.20201213070431.46"><vh>sortSiblingsSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.47"><vh>promoteSelection</vh></v>
<v t="ekr.20201213070431.48"><vh>promoteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.49"><vh>demoteSelection</vh></v>
<v t="ekr.20201213070431.50"><vh>demoteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.51"><vh>insertNodeSelection</vh></v>
<v t="ekr.20201213070431.52"><vh>insertNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.53"><vh>insertNodeSelectionInterrupt</vh></v>
<v t="ekr.20201213070431.54"><vh>cloneNodeSelection</vh></v>
<v t="ekr.20201213070431.55"><vh>cloneNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.56"><vh>cutNodeSelection</vh></v>
<v t="ekr.20201213070431.57"><vh>cutNodeSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.58"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213070431.59"><vh>copyNodeSelection</vh></v>
<v t="ekr.20201213070431.60"><vh>pasteNodeAtSelection</vh></v>
<v t="ekr.20201213070431.61"><vh>pasteNodeAtSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.62"><vh>deleteSelection</vh></v>
<v t="ekr.20201213070431.63"><vh>deleteSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.64"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213070431.65"><vh>gotoLastSibling</vh></v>
<v t="ekr.20201213070431.66"><vh>gotoFirstVisible</vh></v>
<v t="ekr.20201213070431.67"><vh>gotoLastVisible</vh></v>
<v t="ekr.20201213070431.68"><vh>pageUp</vh></v>
<v t="ekr.20201213070431.69"><vh>pageDown</vh></v>
<v t="ekr.20201213070431.70"><vh>gotoNextCloneSelectionFromOutline</vh></v>
<v t="ekr.20201213070431.71"><vh>gotoNextCloneSelection</vh></v>
<v t="ekr.20201213070431.72"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.73"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.74"><vh>gotoNextVisible</vh></v>
<v t="ekr.20201213070431.75"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.76"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.77"><vh>gotoPrevVisible</vh></v>
<v t="ekr.20201213070431.78"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.79"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.80"><vh>contractOrGoLeft</vh></v>
<v t="ekr.20201213070431.81"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213070431.82"><vh>expandAndGoRight</vh></v>
<v t="ekr.20201213070431.83"><vh>expandAndGoRight</vh></v>
</v>
</v>
<v t="ekr.20201210033748.1"><vh>&lt;&lt; scripts &gt;&gt;</vh></v>
<v t="ekr.20201210033804.1"><vh>&lt;&lt; devDependencies &gt;&gt;</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20201209145256.1"></t>
<t tx="ekr.20201209145358.1"></t>
<t tx="ekr.20201210033748.1">"vscode:prepublish": "npm run package",
"compile": "webpack --devtool nosources-source-map --config ./build/node-extension.webpack.config.js",
"watch": "webpack --watch --devtool nosources-source-map --info-verbosity verbose --config ./build/node-extension.webpack.config.js",
"package": "webpack --mode production --config ./build/node-extension.webpack.config.js",
"test-compile": "tsc -p ./",
"test-watch": "tsc -watch -p ./",
"pretest": "npm run test-compile &amp;&amp; npm run lint",
"lint": "tslint -p ./",
"OldLint": "eslint src --ext ts",
"test": "node ./out/test/runTest.js"
</t>
<t tx="ekr.20201210033804.1">"@types/vscode": "^1.51.0",
"@types/glob": "^7.1.3",
"@types/mocha": "^8.0.0",
"@types/node": "^12.11.7",
"eslint": "^7.9.0",
"@typescript-eslint/eslint-plugin": "^4.1.1",
"@typescript-eslint/parser": "^4.1.1",
"glob": "^7.1.6",
"mocha": "^8.1.3",
"typescript": "^4.0.2",
"vscode-test": "^1.4.0",
"ts-loader": "^8.0.3",
"tslint": "^6.1.3",
"webpack": "^4.44.1",
"webpack-cli": "^3.3.12"
</t>
<t tx="ekr.20201210033824.1">@others
</t>
<t tx="ekr.20201211090458.1">@language rest
@wrap

First project:
- Start with .leo file chooser.

Study:
- Study: Typing composition system in typescript.
  (how to define types for objects and variables etc.)
- Look at github actions and projects.
- Learn about vs-code unit testing.</t>
<t tx="ekr.20201211090458.2">@language rest
@wrap

My first recommendation for building good vscode extension development knowledge is to 'git clone' this repo on your pc : https://github.com/microsoft/vscode-extension-samples

tip: do not open the whole thing in vscode, instead, right click one of the subfolders for a particular extension example, choose "open with vscode" and try out or look at the code for a project 'individually'. (to actually run and try a sample instead of just looking at its source code, in each case, a simple "npm install" in the terminal will install all dependencies for any particular example, and then hitting F5 will start the sample in its own window. But you know that already for finishing the basics tutorials ;)  hehe)

It gives good examples for distinct and precise aspects of vscode without overwhelming aspects of a full-blown extension which tries to do a dozen things at once.</t>
<t tx="ekr.20201211090458.3">When running this in leointegration.ts:


public test(p_fromOutline?: boolean): Thenable&lt;unknown&gt; {
    // return this.statusBarOnClick();
    let a = 2;
    console.log("initial test call");
    eval("console.log(a)");


I see:

    initial test call 
    2 

in the console! :)</t>
<t tx="ekr.20201211090458.4">c:\leo.repo\leojs&gt;c:\apps\Git\bin\git.exe push
Counting objects: 2, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 304 bytes | 304.00 KiB/s, done.
Total 2 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote: error: GH006: Protected branch update failed for refs/heads/devel.
remote: error: At least 1 approving review is required by reviewers with write access.
To https://github.com/boltex/leojs.git
   34e049d..6b293e0  package.json -&gt; package.json
 ! [remote rejected] devel -&gt; devel (protected branch hook declined)
error: failed to push some refs to 'https://github.com/boltex/leojs.git'</t>
<t tx="ekr.20201213060317.10">{
  "command": "leojs.recentLeoFiles",
  "category": "Leo",
  "title": "Recent Files"
},
</t>
<t tx="ekr.20201213060317.100">{
  "command": "leojs.cloneFindFlattenedMarked",
  "category": "Leo",
  "title": "cffm - Clone Find Flattened Marked"
},
</t>
<t tx="ekr.20201213060317.101">{
  "command": "leojs.copyMarked",
  "category": "Leo",
  "title": "Copy Marked"
},
</t>
<t tx="ekr.20201213060317.102">{
  "command": "leojs.diffMarkedNodes",
  "category": "Leo",
  "title": "Diff Marked Nodes"
},
</t>
<t tx="ekr.20201213060317.103">{
  "command": "leojs.gotoNextMarked",
  "category": "Leo",
  "title": "Goto Next Marked"
},
</t>
<t tx="ekr.20201213060317.104">{
  "command": "leojs.gotoNextClone",
  "category": "Leo",
  "title": "Goto Next Clone"
},
</t>
<t tx="ekr.20201213060317.105">{
  "command": "leojs.gotoNextCloneSelection",
  "category": "Leo",
  "title": "Goto Next Clone"
},
</t>
<t tx="ekr.20201213060317.106">{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "category": "Leo",
  "title": "Goto Next Clone"
},
</t>
<t tx="ekr.20201213060317.107">{
  "command": "leojs.markChangedItems",
  "category": "Leo",
  "title": "Mark Changed Items"
},
</t>
<t tx="ekr.20201213060317.108">{
  "command": "leojs.markSubheads",
  "category": "Leo",
  "title": "Mark Subheads"
},
</t>
<t tx="ekr.20201213060317.109">{
  "command": "leojs.unmarkAll",
  "category": "Leo",
  "title": "Unmark All"
},
</t>
<t tx="ekr.20201213060317.11">{
  "command": "leojs.switchLeoFile",
  "title": "Switch Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/switch.svg",
    "dark": "resources/dark/switch.svg"
  }
},
</t>
<t tx="ekr.20201213060317.110">{
  "command": "leojs.cloneMarkedNodes",
  "category": "Leo",
  "title": "Clone Marked Nodes"
},
</t>
<t tx="ekr.20201213060317.111">{
  "command": "leojs.deleteMarkedNodes",
  "category": "Leo",
  "title": "Delete Marked Nodes"
},
</t>
<t tx="ekr.20201213060317.112">{
  "command": "leojs.moveMarkedNodes",
  "category": "Leo",
  "title": "Move Marked Nodes"
}
</t>
<t tx="ekr.20201213060317.12">{
  "command": "leojs.newLeoFile",
  "title": "New Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/new-file.svg",
    "dark": "resources/dark/new-file.svg"
  }
},
</t>
<t tx="ekr.20201213060317.13">{
  "command": "leojs.closeLeoFile",
  "title": "Close Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
</t>
<t tx="ekr.20201213060317.14">{
  "command": "leojs.saveLeoFile",
  "category": "Leo",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
</t>
<t tx="ekr.20201213060317.15">{
  "command": "leojs.saveLeoFileFromOutline",
  "category": "Leo",
  "title": "Save Leo File",
  "icon": {
    "light": "resources/light/save.svg",
    "dark": "resources/dark/save.svg"
  }
},
</t>
<t tx="ekr.20201213060317.16">{
  "command": "leojs.saveAsLeoFile",
  "category": "Leo",
  "title": "Save Leo File as...",
  "icon": {
    "light": "resources/light/save-as.svg",
    "dark": "resources/dark/save-as.svg"
  }
},
</t>
<t tx="ekr.20201213060317.17">{
  "command": "leojs.refreshFromDisk",
  "category": "Leo",
  "title": "Refresh from Disk"
},
</t>
<t tx="ekr.20201213060317.18">{
  "command": "leojs.refreshFromDiskSelection",
  "category": "Leo",
  "title": "Refresh from Disk"
},
</t>
<t tx="ekr.20201213060317.19">{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "category": "Leo",
  "title": "Refresh from Disk"
},
</t>
<t tx="ekr.20201213060317.2">{
  "command": "leojs.test",
  "category": "Leo",
  "title": "Test leojs"
},
</t>
<t tx="ekr.20201213060317.20">{
  "command": "leojs.gitDiff",
  "category": "Leo",
  "title": "Git Diff"
},
</t>
<t tx="ekr.20201213060317.21">{
  "command": "leojs.selectTreeNode",
  "category": "Leo",
  "title": "Select Node"
},
</t>
<t tx="ekr.20201213060317.22">{
  "command": "leojs.openAside",
  "category": "Leo",
  "title": "Open to the Side"
},
</t>
<t tx="ekr.20201213060317.23">{
  "command": "leojs.contractAll",
  "category": "Leo",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
</t>
<t tx="ekr.20201213060317.24">{
  "command": "leojs.contractAllFromOutline",
  "category": "Leo",
  "title": "Contract All",
  "icon": {
    "light": "resources/light/collapse.svg",
    "dark": "resources/dark/collapse.svg"
  }
},
</t>
<t tx="ekr.20201213060317.25">{
  "command": "leojs.editHeadline",
  "category": "Leo",
  "title": "Edit Headline",
  "icon": {
    "light": "resources/light/edit.svg",
    "dark": "resources/dark/edit.svg"
  }
},
</t>
<t tx="ekr.20201213060317.26">{
  "command": "leojs.editSelectedHeadline",
  "category": "Leo",
  "title": "Edit Headline"
},
</t>
<t tx="ekr.20201213060317.27">{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "category": "Leo",
  "title": "Edit Headline"
},
</t>
<t tx="ekr.20201213060317.28">{
  "command": "leojs.mark",
  "category": "Leo",
  "title": "Mark",
  "icon": {
    "light": "resources/light/mark.svg",
    "dark": "resources/dark/mark.svg"
  }
},
</t>
<t tx="ekr.20201213060317.29">{
  "command": "leojs.markSelection",
  "category": "Leo",
  "title": "Mark"
},
</t>
<t tx="ekr.20201213060317.3">{
  "command": "leojs.executeScript",
  "category": "Leo",
  "title": "Execute Script"
},
</t>
<t tx="ekr.20201213060317.30">{
  "command": "leojs.markSelectionFromOutline",
  "category": "Leo",
  "title": "Mark"
},
</t>
<t tx="ekr.20201213060317.31">{
  "command": "leojs.unmark",
  "category": "Leo",
  "title": "Unmark",
  "icon": {
    "light": "resources/light/unmark.svg",
    "dark": "resources/dark/unmark.svg"
  }
},
</t>
<t tx="ekr.20201213060317.32">{
  "command": "leojs.unmarkSelection",
  "category": "Leo",
  "title": "Unmark"
},
</t>
<t tx="ekr.20201213060317.33">{
  "command": "leojs.unmarkSelectionFromOutline",
  "category": "Leo",
  "title": "Unmark"
},
</t>
<t tx="ekr.20201213060317.34">{
  "command": "leojs.copyNode",
  "category": "Leo",
  "title": "Copy Node",
  "icon": {
    "light": "resources/light/clipboard.svg",
    "dark": "resources/dark/clipboard.svg"
  }
},
</t>
<t tx="ekr.20201213060317.35">{
  "command": "leojs.copyNodeSelection",
  "category": "Leo",
  "title": "Copy Node"
},
</t>
<t tx="ekr.20201213060317.36">{
  "command": "leojs.cutNode",
  "category": "Leo",
  "title": "Cut Node"
},
</t>
<t tx="ekr.20201213060317.37">{
  "command": "leojs.cutNodeSelection",
  "category": "Leo",
  "title": "Cut Node"
},
</t>
<t tx="ekr.20201213060317.38">{
  "command": "leojs.cutNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Cut Node"
},
</t>
<t tx="ekr.20201213060317.39">{
  "command": "leojs.pasteNode",
  "category": "Leo",
  "title": "Paste Node"
},
</t>
<t tx="ekr.20201213060317.4">{
  "command": "leojs.minibuffer",
  "category": "Leo",
  "title": "Minibuffer"
},
</t>
<t tx="ekr.20201213060317.40">{
  "command": "leojs.pasteNodeAtSelection",
  "category": "Leo",
  "title": "Paste Node"
},
</t>
<t tx="ekr.20201213060317.41">{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "category": "Leo",
  "title": "Paste Node"
},
</t>
<t tx="ekr.20201213060317.42">{
  "command": "leojs.pasteNodeAsClone",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
</t>
<t tx="ekr.20201213060317.43">{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
</t>
<t tx="ekr.20201213060317.44">{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "category": "Leo",
  "title": "Paste Node as Clone"
},
</t>
<t tx="ekr.20201213060317.45">{
  "command": "leojs.delete",
  "category": "Leo",
  "title": "Delete",
  "icon": {
    "light": "resources/light/close.svg",
    "dark": "resources/dark/close.svg"
  }
},
</t>
<t tx="ekr.20201213060317.46">{
  "command": "leojs.deleteSelection",
  "category": "Leo",
  "title": "Delete Node"
},
</t>
<t tx="ekr.20201213060317.47">{
  "command": "leojs.deleteSelectionFromOutline",
  "category": "Leo",
  "title": "Delete Node"
},
</t>
<t tx="ekr.20201213060317.48">{
  "command": "leojs.extract",
  "category": "Leo",
  "title": "Extract"
},
</t>
<t tx="ekr.20201213060317.49">{
  "command": "leojs.extractNames",
  "category": "Leo",
  "title": "Extract Names"
},
</t>
<t tx="ekr.20201213060317.5">{
  "command": "leojs.removeButton",
  "category": "Leo",
  "title": "Remove Button"
},
</t>
<t tx="ekr.20201213060317.50">{
  "command": "leojs.moveOutlineDown",
  "category": "Leo",
  "title": "Move Outline Down",
  "icon": {
    "light": "resources/light/arrow-down.svg",
    "dark": "resources/dark/arrow-down.svg"
  }
},
</t>
<t tx="ekr.20201213060317.51">{
  "command": "leojs.moveOutlineDownSelection",
  "category": "Leo",
  "title": "Move Outline Down"
},
</t>
<t tx="ekr.20201213060317.52">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Down"
},
</t>
<t tx="ekr.20201213060317.53">{
  "command": "leojs.moveOutlineLeft",
  "category": "Leo",
  "title": "Move Outline Left",
  "icon": {
    "light": "resources/light/arrow-left.svg",
    "dark": "resources/dark/arrow-left.svg"
  }
},
</t>
<t tx="ekr.20201213060317.54">{
  "command": "leojs.moveOutlineLeftSelection",
  "category": "Leo",
  "title": "Move Outline Left"
},
</t>
<t tx="ekr.20201213060317.55">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Left"
},
</t>
<t tx="ekr.20201213060317.56">{
  "command": "leojs.moveOutlineRight",
  "category": "Leo",
  "title": "Move Outline Right",
  "icon": {
    "light": "resources/light/arrow-right.svg",
    "dark": "resources/dark/arrow-right.svg"
  }
},
</t>
<t tx="ekr.20201213060317.57">{
  "command": "leojs.moveOutlineRightSelection",
  "category": "Leo",
  "title": "Move Outline Right"
},
</t>
<t tx="ekr.20201213060317.58">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Right"
},
</t>
<t tx="ekr.20201213060317.59">{
  "command": "leojs.moveOutlineUp",
  "category": "Leo",
  "title": "Move Outline Up",
  "icon": {
    "light": "resources/light/arrow-up.svg",
    "dark": "resources/dark/arrow-up.svg"
  }
},
</t>
<t tx="ekr.20201213060317.6">{
  "command": "leojs.showBody",
  "category": "Leo",
  "title": "Focus to Body"
},
</t>
<t tx="ekr.20201213060317.60">{
  "command": "leojs.moveOutlineUpSelection",
  "category": "Leo",
  "title": "Move Outline Up"
},
</t>
<t tx="ekr.20201213060317.61">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "category": "Leo",
  "title": "Move Outline Up"
},
</t>
<t tx="ekr.20201213060317.62">{
  "command": "leojs.insertNode",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
</t>
<t tx="ekr.20201213060317.63">{
  "command": "leojs.insertNodeSelection",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
</t>
<t tx="ekr.20201213060317.64">{
  "command": "leojs.insertNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
</t>
<t tx="ekr.20201213060317.65">{
  "command": "leojs.insertNodeSelectionInterrupt",
  "category": "Leo",
  "title": "Insert Node",
  "icon": {
    "light": "resources/light/plus.svg",
    "dark": "resources/dark/plus.svg"
  }
},
</t>
<t tx="ekr.20201213060317.66">{
  "command": "leojs.cloneNode",
  "category": "Leo",
  "title": "Clone Node",
  "icon": {
    "light": "resources/light/link.svg",
    "dark": "resources/dark/link.svg"
  }
},
</t>
<t tx="ekr.20201213060317.67">{
  "command": "leojs.cloneNodeSelection",
  "category": "Leo",
  "title": "Clone Node"
},
</t>
<t tx="ekr.20201213060317.68">{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "category": "Leo",
  "title": "Clone Node"
},
</t>
<t tx="ekr.20201213060317.69">{
  "command": "leojs.promote",
  "category": "Leo",
  "title": "Promote Children"
},
</t>
<t tx="ekr.20201213060317.7">{
  "command": "leojs.showOutline",
  "category": "Leo",
  "title": "Focus to Tree"
},
</t>
<t tx="ekr.20201213060317.70">{
  "command": "leojs.promoteSelection",
  "category": "Leo",
  "title": "Promote Children"
},
</t>
<t tx="ekr.20201213060317.71">{
  "command": "leojs.promoteSelectionFromOutline",
  "category": "Leo",
  "title": "Promote Children"
},
</t>
<t tx="ekr.20201213060317.72">{
  "command": "leojs.demote",
  "category": "Leo",
  "title": "Demote Siblings"
},
</t>
<t tx="ekr.20201213060317.73">{
  "command": "leojs.demoteSelection",
  "category": "Leo",
  "title": "Demote Siblings"
},
</t>
<t tx="ekr.20201213060317.74">{
  "command": "leojs.demoteSelectionFromOutline",
  "category": "Leo",
  "title": "Demote Siblings"
},
</t>
<t tx="ekr.20201213060317.75">{
  "command": "leojs.sortChildrenSelection",
  "category": "Leo",
  "title": "Sort Children"
},
</t>
<t tx="ekr.20201213060317.76">{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "category": "Leo",
  "title": "Sort Children"
},
</t>
<t tx="ekr.20201213060317.77">{
  "command": "leojs.sortSiblingsSelection",
  "category": "Leo",
  "title": "Sort Siblings"
},
</t>
<t tx="ekr.20201213060317.78">{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "category": "Leo",
  "title": "Sort Siblings"
},
</t>
<t tx="ekr.20201213060317.79">{
  "command": "leojs.gotoFirstVisible",
  "category": "Leo",
  "title": "Goto First Visible"
},
</t>
<t tx="ekr.20201213060317.8">{
  "command": "leojs.showLogPane",
  "category": "Leo",
  "title": "Show Log Pane"
},
</t>
<t tx="ekr.20201213060317.80">{
  "command": "leojs.gotoLastVisible",
  "category": "Leo",
  "title": "Goto Last Visible"
},
</t>
<t tx="ekr.20201213060317.81">{
  "command": "leojs.pageUp",
  "category": "Leo",
  "title": "Page Up"
},
</t>
<t tx="ekr.20201213060317.82">{
  "command": "leojs.pageDown",
  "category": "Leo",
  "title": "Page Down"
},
</t>
<t tx="ekr.20201213060317.83">{
  "command": "leojs.gotoLastSibling",
  "category": "Leo",
  "title": "Goto Last Sibling"
},
</t>
<t tx="ekr.20201213060317.84">{
  "command": "leojs.gotoNextVisible",
  "category": "Leo",
  "title": "Goto Next Visible"
},
</t>
<t tx="ekr.20201213060317.85">{
  "command": "leojs.gotoPrevVisible",
  "category": "Leo",
  "title": "Goto Prev Visible"
},
</t>
<t tx="ekr.20201213060317.86">{
  "command": "leojs.contractOrGoLeft",
  "category": "Leo",
  "title": "Contract Or Go Left"
},
</t>
<t tx="ekr.20201213060317.87">{
  "command": "leojs.expandAndGoRight",
  "category": "Leo",
  "title": "Expand And Go Right"
},
</t>
<t tx="ekr.20201213060317.88">{
  "command": "leojs.hoistNode",
  "category": "Leo",
  "title": "Hoist"
},
</t>
<t tx="ekr.20201213060317.89">{
  "command": "leojs.hoistSelection",
  "category": "Leo",
  "title": "Hoist"
},
</t>
<t tx="ekr.20201213060317.9">{
  "command": "leojs.openLeoFile",
  "title": "Open Leo File",
  "category": "Leo",
  "icon": {
    "light": "resources/light/folder.svg",
    "dark": "resources/dark/folder.svg"
  }
},
</t>
<t tx="ekr.20201213060317.90">{
  "command": "leojs.hoistSelectionFromOutline",
  "category": "Leo",
  "title": "Hoist"
},
</t>
<t tx="ekr.20201213060317.91">{
  "command": "leojs.deHoist",
  "category": "Leo",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
</t>
<t tx="ekr.20201213060317.92">{
  "command": "leojs.deHoistFromOutline",
  "category": "Leo",
  "title": "De-Hoist",
  "icon": {
    "light": "resources/light/dehoist.svg",
    "dark": "resources/dark/dehoist.svg"
  }
},
</t>
<t tx="ekr.20201213060317.93">{
  "command": "leojs.undo",
  "category": "Leo",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
</t>
<t tx="ekr.20201213060317.94">{
  "command": "leojs.undoFromOutline",
  "category": "Leo",
  "title": "Undo",
  "icon": {
    "light": "resources/light/undo.svg",
    "dark": "resources/dark/undo.svg"
  }
},
</t>
<t tx="ekr.20201213060317.95">{
  "command": "leojs.redo",
  "category": "Leo",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
</t>
<t tx="ekr.20201213060317.96">{
  "command": "leojs.redoFromOutline",
  "category": "Leo",
  "title": "Redo",
  "icon": {
    "light": "resources/light/redo.svg",
    "dark": "resources/dark/redo.svg"
  }
},
</t>
<t tx="ekr.20201213060317.97">{
  "command": "leojs.cloneFindAll",
  "category": "Leo",
  "title": "Clone Find All"
},
</t>
<t tx="ekr.20201213060317.98">{
  "command": "leojs.cloneFindAllFlattened",
  "category": "Leo",
  "title": "Clone Find All Flattened"
},
</t>
<t tx="ekr.20201213060317.99">{
  "command": "leojs.cloneFindMarked",
  "category": "Leo",
  "title": "Clone Find Marked"
},
</t>
<t tx="ekr.20201213064703.10">{
  "command": "leojs.closeLeoFile",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.100">{
  "command": "leojs.gotoFirstVisible",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.101">{
  "command": "leojs.gotoLastVisible",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.102">{
  "command": "leojs.gotoLastSibling",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.103">{
  "command": "leojs.gotoNextVisible",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.104">{
  "command": "leojs.gotoPrevVisible",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.105">{
  "command": "leojs.contractOrGoLeft",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.106">{
  "command": "leojs.expandAndGoRight",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.107">{
  "command": "leojs.pageUp",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.108">{
  "command": "leojs.pageDown",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.109">{
  "command": "leojs.hoistNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.11">{
  "command": "leojs.saveLeoFile",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.110">{
  "command": "leojs.hoistSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.111">{
  "command": "leojs.deHoistFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.112">{
  "command": "leojs.undoFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.113">{
  "command": "leojs.redoFromOutline",
  "when": "false"
}
</t>
<t tx="ekr.20201213064703.117">{
  "command": "leojs.openLeoFile",
  "when": "view =~ /leoJs/ &amp;&amp; leoReady",
  "group": "navigation@1"
},
</t>
<t tx="ekr.20201213064703.118">{
  "command": "leojs.newLeoFile",
  "when": "view =~ /leoJs/ &amp;&amp; leoReady",
  "group": "navigation@1"
},
</t>
<t tx="ekr.20201213064703.119">{
  "command": "leojs.saveLeoFileFromOutline",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoTreeTitled &amp;&amp; leoChanged",
  "group": "navigation@2"
},
</t>
<t tx="ekr.20201213064703.12">{
  "command": "leojs.saveAsLeoFile",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.120">{
  "command": "leojs.saveAsLeoFile",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; !leoTreeTitled",
  "group": "navigation@2"
},
</t>
<t tx="ekr.20201213064703.121">{
  "command": "leojs.undoFromOutline",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanUndo",
  "group": "navigation@3"
},
</t>
<t tx="ekr.20201213064703.122">{
  "command": "leojs.redoFromOutline",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanRedo",
  "group": "navigation@4"
},
</t>
<t tx="ekr.20201213064703.123">{
  "command": "leojs.deHoistFromOutline",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanDehoist",
  "group": "navigation@5"
},
</t>
<t tx="ekr.20201213064703.124">{
  "command": "leojs.contractAllFromOutline",
  "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened",
  "group": "navigation@6"
}
</t>
<t tx="ekr.20201213064703.126">{
  "command": "leojs.editHeadline",
  "when": "showEditOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@1"
},
</t>
<t tx="ekr.20201213064703.127">{
  "command": "leojs.insertNode",
  "when": "showAddOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@2"
},
</t>
<t tx="ekr.20201213064703.128">{
  "command": "leojs.moveOutlineDown",
  "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@3"
},
</t>
<t tx="ekr.20201213064703.129">{
  "command": "leojs.moveOutlineLeft",
  "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@3"
},
</t>
<t tx="ekr.20201213064703.13">{
  "command": "leojs.refreshFromDiskSelection",
  "when": "leoTreeOpened &amp;&amp; leoAtFile"
},
</t>
<t tx="ekr.20201213064703.130">{
  "command": "leojs.moveOutlineRight",
  "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@3"
},
</t>
<t tx="ekr.20201213064703.131">{
  "command": "leojs.moveOutlineUp",
  "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@3"
},
</t>
<t tx="ekr.20201213064703.132">{
  "command": "leojs.copyNode",
  "when": "showCopyOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@4"
},
</t>
<t tx="ekr.20201213064703.133">{
  "command": "leojs.cloneNode",
  "when": "showCloneOnNodes &amp;&amp; viewItem =~ /leoNode/",
  "group": "inline@4"
},
</t>
<t tx="ekr.20201213064703.134">{
  "command": "leojs.mark",
  "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeUnmarked/",
  "group": "inline@5"
},
</t>
<t tx="ekr.20201213064703.135">{
  "command": "leojs.unmark",
  "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeMarked/",
  "group": "inline@5"
},
</t>
<t tx="ekr.20201213064703.136">{
  "command": "leojs.openAside",
  "when": "showOpenAside &amp;&amp; viewItem =~ /leoNode/",
  "group": "leoNodeContext1@1"
},
</t>
<t tx="ekr.20201213064703.137">{
  "command": "leojs.hoistNode",
  "when": "viewItem =~ /leoNodeNotRoot/",
  "group": "leoNodeContext1@2"
},
</t>
<t tx="ekr.20201213064703.138">{
  "command": "leojs.deHoist",
  "when": "leoCanDehoist &amp;&amp; viewItem =~ /leoNodeRoot/",
  "group": "leoNodeContext1@2"
},
</t>
<t tx="ekr.20201213064703.139">{
  "command": "leojs.refreshFromDisk",
  "when": "viewItem =~ /leoNodeAtFile/",
  "group": "leoNodeContext1@3"
},
</t>
<t tx="ekr.20201213064703.14">{
  "command": "leojs.gitDiff",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.140">{
  "command": "leojs.mark",
  "when": "viewItem =~ /leoNodeUnmarked/",
  "group": "leoNodeContext2@1"
},
</t>
<t tx="ekr.20201213064703.141">{
  "command": "leojs.unmark",
  "when": "viewItem =~ /leoNodeMarked/",
  "group": "leoNodeContext2@2"
},
</t>
<t tx="ekr.20201213064703.142">{
  "command": "leojs.copyNode",
  "when": "viewItem =~ /leoNode/",
  "group": "leoNodeContext2@3"
},
</t>
<t tx="ekr.20201213064703.143">{
  "command": "leojs.cutNode",
  "when": "viewItem =~ /leoNode/",
  "group": "leoNodeContext2@4"
},
</t>
<t tx="ekr.20201213064703.144">{
  "command": "leojs.pasteNode",
  "when": "viewItem =~ /leoNode/",
  "group": "leoNodeContext2@5"
},
</t>
<t tx="ekr.20201213064703.145">{
  "command": "leojs.pasteNodeAsClone",
  "when": "viewItem =~ /leoNode/",
  "group": "leoNodeContext2@6"
},
</t>
<t tx="ekr.20201213064703.146">{
  "command": "leojs.delete",
  "when": "viewItem =~ /leoNode/",
  "group": "leoNodeContext2@7"
},
</t>
<t tx="ekr.20201213064703.147">{
  "command": "leojs.insertNode",
  "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
  "group": "leoNodeContext3@1"
},
</t>
<t tx="ekr.20201213064703.148">{
  "command": "leojs.cloneNode",
  "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
  "group": "leoNodeContext3@2"
},
</t>
<t tx="ekr.20201213064703.149">{
  "command": "leojs.gotoNextClone",
  "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNodeCloned/",
  "group": "leoNodeContext3@3"
}
</t>
<t tx="ekr.20201213064703.15">{
  "command": "leojs.contractAll",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.16">{
  "command": "leojs.editSelectedHeadline",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.17">{
  "command": "leojs.markSelection",
  "when": "leoTreeOpened &amp;&amp; !leoMarked"
},
</t>
<t tx="ekr.20201213064703.18">{
  "command": "leojs.unmarkSelection",
  "when": "leoTreeOpened &amp;&amp; leoMarked"
},
</t>
<t tx="ekr.20201213064703.19">{
  "command": "leojs.copyNodeSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.20">{
  "command": "leojs.cutNodeSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.21">{
  "command": "leojs.pasteNodeAtSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.22">{
  "command": "leojs.pasteNodeAsCloneAtSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.23">{
  "command": "leojs.deleteSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.24">{
  "command": "leojs.moveOutlineDownSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.25">{
  "command": "leojs.moveOutlineLeftSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.26">{
  "command": "leojs.moveOutlineRightSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.27">{
  "command": "leojs.moveOutlineUpSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.28">{
  "command": "leojs.insertNodeSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.29">{
  "command": "leojs.cloneNodeSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.3">{
  "command": "leojs.executeScript",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.30">{
  "command": "leojs.promoteSelection",
  "when": "leoTreeOpened &amp;&amp; leoCanPromote"
},
</t>
<t tx="ekr.20201213064703.31">{
  "command": "leojs.demoteSelection",
  "when": "leoTreeOpened &amp;&amp; leoCanDemote"
},
</t>
<t tx="ekr.20201213064703.32">{
  "command": "leojs.sortChildrenSelection",
  "when": "leoTreeOpened &amp;&amp; leoChild"
},
</t>
<t tx="ekr.20201213064703.33">{
  "command": "leojs.sortChildrenSelectionFromOutline",
  "when": "leoTreeOpened &amp;&amp; leoChild"
},
</t>
<t tx="ekr.20201213064703.34">{
  "command": "leojs.sortSiblingsSelection",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.35">{
  "command": "leojs.gotoNextMarked",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.36">{
  "command": "leojs.gotoNextCloneSelection",
  "when": "leoTreeOpened &amp;&amp; leoCloned"
},
</t>
<t tx="ekr.20201213064703.37">{
  "command": "leojs.hoistSelection",
  "when": "leoTreeOpened &amp;&amp; !leoRoot"
},
</t>
<t tx="ekr.20201213064703.38">{
  "command": "leojs.deHoist",
  "when": "leoTreeOpened &amp;&amp; leoCanDehoist"
},
</t>
<t tx="ekr.20201213064703.39">{
  "command": "leojs.undo",
  "when": "leoTreeOpened &amp;&amp; leoCanUndo"
},
</t>
<t tx="ekr.20201213064703.4">{
  "command": "leojs.minibuffer",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.40">{
  "command": "leojs.redo",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.41">{
  "command": "leojs.cloneFindAll",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.42">{
  "command": "leojs.cloneFindAllFlattened",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.43">{
  "command": "leojs.cloneFindMarked",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.44">{
  "command": "leojs.cloneFindFlattenedMarked",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.45">{
  "command": "leojs.extract",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.46">{
  "command": "leojs.extractNames",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.47">{
  "command": "leojs.copyMarked",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.48">{
  "command": "leojs.diffMarkedNodes",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.49">{
  "command": "leojs.markChangedItems",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.5">{
  "command": "leojs.showLogPane",
  "when": "leoReady"
},
</t>
<t tx="ekr.20201213064703.50">{
  "command": "leojs.markSubheads",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.51">{
  "command": "leojs.unmarkAll",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.52">{
  "command": "leojs.cloneMarkedNodes",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.53">{
  "command": "leojs.deleteMarkedNodes",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.54">{
  "command": "leojs.moveMarkedNodes",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.55">{
  "command": "leojs.test",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.56">{
  "command": "leojs.removeButton",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.57">{
  "command": "leojs.showBody",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.58">{
  "command": "leojs.showOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.59">{
  "command": "leojs.saveLeoFileFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.6">{
  "command": "leojs.openLeoFile",
  "when": "leoReady"
},
</t>
<t tx="ekr.20201213064703.60">{
  "command": "leojs.refreshFromDisk",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.61">{
  "command": "leojs.refreshFromDiskSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.62">{
  "command": "leojs.selectTreeNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.63">{
  "command": "leojs.openAside",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.64">{
  "command": "leojs.contractAllFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.65">{
  "command": "leojs.editHeadline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.66">{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.67">{
  "command": "leojs.mark",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.68">{
  "command": "leojs.markSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.69">{
  "command": "leojs.unmark",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.7">{
  "command": "leojs.recentLeoFiles",
  "when": "leoReady"
},
</t>
<t tx="ekr.20201213064703.70">{
  "command": "leojs.unmarkSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.71">{
  "command": "leojs.copyNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.72">{
  "command": "leojs.cutNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.73">{
  "command": "leojs.cutNodeSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.74">{
  "command": "leojs.pasteNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.75">{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.76">{
  "command": "leojs.pasteNodeAsClone",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.77">{
  "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.78">{
  "command": "leojs.delete",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.79">{
  "command": "leojs.deleteSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.8">{
  "command": "leojs.switchLeoFile",
  "when": "leoReady &amp;&amp; leoTreeOpened"
},
</t>
<t tx="ekr.20201213064703.80">{
  "command": "leojs.moveOutlineDown",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.81">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.82">{
  "command": "leojs.moveOutlineLeft",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.83">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.84">{
  "command": "leojs.moveOutlineRight",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.85">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.86">{
  "command": "leojs.moveOutlineUp",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.87">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.88">{
  "command": "leojs.insertNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.89">{
  "command": "leojs.insertNodeSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.9">{
  "command": "leojs.newLeoFile",
  "when": "leoReady"
},
</t>
<t tx="ekr.20201213064703.90">{
  "command": "leojs.insertNodeSelectionInterrupt",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.91">{
  "command": "leojs.cloneNode",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.92">{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.93">{
  "command": "leojs.promote",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.94">{
  "command": "leojs.promoteSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.95">{
  "command": "leojs.demote",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.96">{
  "command": "leojs.demoteSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.97">{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.98">{
  "command": "leojs.gotoNextClone",
  "when": "false"
},
</t>
<t tx="ekr.20201213064703.99">{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "when": "false"
},
</t>
<t tx="ekr.20201213070431.10">{
  "command": "leojs.showBody",
  "key": "enter",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.11">{
  "command": "leojs.saveLeoFileFromOutline",
  "key": "ctrl+s",
  "mac": "cmd+s",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments/"
},
</t>
<t tx="ekr.20201213070431.12">{
  "command": "leojs.saveLeoFile",
  "key": "ctrl+s",
  "mac": "cmd+s",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.13">{
  "command": "leojs.contractAll",
  "key": "alt+-",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.14">{
  "command": "leojs.contractAllFromOutline",
  "key": "alt+-",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.15">{
  "command": "leojs.editSelectedHeadline",
  "key": "ctrl+h",
  "mac": "cmd+h",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.16">{
  "command": "leojs.editSelectedHeadlineFromOutline",
  "key": "ctrl+h",
  "mac": "cmd+h",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.17">{
  "command": "leojs.markSelection",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.18">{
  "command": "leojs.markSelectionFromOutline",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.19">{
  "command": "leojs.unmarkSelection",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.2">{
  "command": "leojs.executeScript",
  "key": "ctrl+b",
  "mac": "cmd+b",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.20">{
  "command": "leojs.unmarkSelectionFromOutline",
  "key": "ctrl+m",
  "mac": "cmd+m",
  "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.21">{
  "command": "leojs.extract",
  "key": "ctrl+shift+d",
  "mac": "cmd+shift+d",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.22">{
  "command": "leojs.extract",
  "key": "ctrl+shift+d",
  "mac": "cmd+shift+d",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.23">{
  "command": "leojs.extractNames",
  "key": "ctrl+shift+n",
  "mac": "cmd++shift+n",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.24">{
  "command": "leojs.extractNames",
  "key": "ctrl+shift+n",
  "mac": "cmd+shift+n",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.25">{
  "command": "leojs.moveOutlineDownSelection",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.26">{
  "command": "leojs.moveOutlineDownSelection",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.27">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "ctrl+d",
  "mac": "cmd+d",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.28">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+down",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.29">{
  "command": "leojs.moveOutlineDownSelectionFromOutline",
  "key": "shift+alt+down",
  "mac": "shift+alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.3">{
  "command": "leojs.executeScript",
  "key": "ctrl+b",
  "mac": "cmd+b",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.30">{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.31">{
  "command": "leojs.moveOutlineLeftSelection",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.32">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "ctrl+l",
  "mac": "cmd+l",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.33">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+left",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.34">{
  "command": "leojs.moveOutlineLeftSelectionFromOutline",
  "key": "shift+alt+left",
  "mac": "shift+alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.35">{
  "command": "leojs.moveOutlineRightSelection",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.36">{
  "command": "leojs.moveOutlineRightSelection",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.37">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "ctrl+r",
  "mac": "cmd+r",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.38">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+right",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.39">{
  "command": "leojs.moveOutlineRightSelectionFromOutline",
  "key": "shift+alt+right",
  "mac": "shift+alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.4">{
  "command": "leojs.minibuffer",
  "key": "alt+x",
  "when": "leoTreeOpened"
},
</t>
<t tx="ekr.20201213070431.40">{
  "command": "leojs.moveOutlineUpSelection",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.41">{
  "command": "leojs.moveOutlineUpSelection",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.42">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "ctrl+u",
  "mac": "cmd+u",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.43">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+up",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.44">{
  "command": "leojs.moveOutlineUpSelectionFromOutline",
  "key": "shift+alt+up",
  "mac": "shift+alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.45">{
  "command": "leojs.sortSiblingsSelection",
  "key": "alt+a",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.46">{
  "command": "leojs.sortSiblingsSelectionFromOutline",
  "key": "alt+a",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.47">{
  "command": "leojs.promoteSelection",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.48">{
  "command": "leojs.promoteSelectionFromOutline",
  "key": "ctrl+[BracketLeft]",
  "win": "ctrl+oem_4",
  "linux": "ctrl+[",
  "mac": "cmd+[BracketLeft]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.49">{
  "command": "leojs.demoteSelection",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.5">{
  "command": "leojs.showOutline",
  "key": "alt+t",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.50">{
  "command": "leojs.demoteSelectionFromOutline",
  "key": "ctrl+[BracketRight]",
  "win": "ctrl+oem_6",
  "linux": "ctrl+]",
  "mac": "cmd+[BracketRight]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.51">{
  "command": "leojs.insertNodeSelection",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.52">{
  "command": "leojs.insertNodeSelectionFromOutline",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.53">{
  "command": "leojs.insertNodeSelectionInterrupt",
  "key": "ctrl+i",
  "mac": "cmd+i",
  "when": "leoTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
},
</t>
<t tx="ekr.20201213070431.54">{
  "command": "leojs.cloneNodeSelection",
  "key": "ctrl+[Backquote]",
  "win": "ctrl+oem_7",
  "linux": "ctrl+'",
  "mac": "cmd+[Backquote]",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.55">{
  "command": "leojs.cloneNodeSelectionFromOutline",
  "key": "ctrl+[Backquote]",
  "win": "ctrl+oem_7",
  "linux": "ctrl+'",
  "mac": "cmd+[Backquote]",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.56">{
  "command": "leojs.cutNodeSelection",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.57">{
  "command": "leojs.cutNodeSelectionFromOutline",
  "key": "ctrl+shift+x",
  "mac": "cmd+shift+x",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.58">{
  "command": "leojs.copyNodeSelection",
  "key": "ctrl+shift+c",
  "mac": "cmd+shift+c",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.59">{
  "command": "leojs.copyNodeSelection",
  "key": "ctrl+shift+c",
  "mac": "cmd+shift+c",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.6">{
  "command": "leojs.showOutline",
  "key": "ctrl+t",
  "mac": "cmd+t",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.60">{
  "command": "leojs.pasteNodeAtSelection",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.61">{
  "command": "leojs.pasteNodeAtSelectionFromOutline",
  "key": "ctrl+shift+v",
  "mac": "cmd+shift+v",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.62">{
  "command": "leojs.deleteSelection",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.63">{
  "command": "leojs.deleteSelectionFromOutline",
  "key": "ctrl+shift+backspace",
  "mac": "cmd+shift+backspace",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.64">{
  "command": "leojs.gotoFirstVisible",
  "key": "alt+home",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.65">{
  "command": "leojs.gotoLastSibling",
  "key": "alt+end",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.66">{
  "command": "leojs.gotoFirstVisible",
  "key": "home",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.67">{
  "command": "leojs.gotoLastVisible",
  "key": "end",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.68">{
  "command": "leojs.pageUp",
  "key": "pageup",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.69">{
  "command": "leojs.pageDown",
  "key": "pagedown",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.7">{
  "command": "leojs.showBody",
  "key": "ctrl+t",
  "mac": "cmd+t",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.70">{
  "command": "leojs.gotoNextCloneSelectionFromOutline",
  "key": "alt+n",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.71">{
  "command": "leojs.gotoNextCloneSelection",
  "key": "alt+n",
  "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.72">{
  "command": "leojs.gotoNextVisible",
  "key": "down",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.73">{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.74">{
  "command": "leojs.gotoNextVisible",
  "key": "alt+down",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.75">{
  "command": "leojs.gotoPrevVisible",
  "key": "up",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.76">{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.77">{
  "command": "leojs.gotoPrevVisible",
  "key": "alt+up",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection  &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.78">{
  "command": "leojs.contractOrGoLeft",
  "key": "left",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.79">{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.8">{
  "command": "leojs.showBody",
  "key": "alt+d",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.80">{
  "command": "leojs.contractOrGoLeft",
  "key": "alt+left",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
},
</t>
<t tx="ekr.20201213070431.81">{
  "command": "leojs.expandAndGoRight",
  "key": "right",
  "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
},
</t>
<t tx="ekr.20201213070431.82">{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="ekr.20201213070431.83">{
  "command": "leojs.expandAndGoRight",
  "key": "alt+right",
  "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
}
</t>
<t tx="ekr.20201213070431.9">{
  "command": "leojs.showBody",
  "key": "tab",
  "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
},
</t>
<t tx="felix.20201208214250.2"></t>
<t tx="felix.20201208214319.1"># leojs

Literate Editor with Outline _in Typescript_ version 0.1.00

**Enjoy!**
</t>
<t tx="felix.20201208214322.1">import * as vscode from 'vscode';
import { JsOutlineProvider } from './leoOutline';

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201208214449.1">@language json
@tabwidth -2
{
  "name": "leojs",
  "displayName": "leojs",
  "description": "Leo's kernel in Typescript",
  "version": "0.1.0",
  "engines": { "vscode": "^1.51.0"},
  "categories": ["Other"],
  "activationEvents": ["*"],
  "main": "./dist/extension.js",
  "contributes": {
    &lt;&lt; contributes &gt;&gt;
  },
  "scripts": {
    &lt;&lt; scripts &gt;&gt;
  },
  "devDependencies": {
    &lt;&lt; devDependencies &gt;&gt;
  }
}
</t>
<t tx="felix.20201208214506.1"># Change Log

## 0.1.00 12.9.2020.

- Initial state
</t>
<t tx="felix.20201208215536.1">import * as vscode from "vscode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208215536.10">/**
 * Used in 'when' clauses, set with vscode.commands.executeCommand("setContext",...)
 */
public static CONTEXT_FLAGS = {
    // Main flags for connection and opened file
    LEO_READY: "leoReady", // Extension activated and classes created and ready
    TREE_OPENED: "leoTreeOpened", // At least one Leo file opened
    TREE_TITLED: "leoTreeTitled", // Tree is a Leo file and not a new untitled document
    SERVER_STARTED: "leoServerStarted", // Auto-start or manually started
    // 'states' flags for currently opened tree view
    LEO_CHANGED: "leoChanged",
    LEO_CAN_UNDO: "leoCanUndo",
    LEO_CAN_REDO: "leoCanRedo",
    LEO_CAN_DEMOTE: "leoCanDemote",
    LEO_CAN_PROMOTE: "leoCanPromote",
    LEO_CAN_DEHOIST: "leoCanDehoist",
    // 'states' flags about current selection, for visibility and commands availability
    SELECTED_MARKED: "leoMarked", // no need for unmarked here, use !leoMarked
    SELECTED_CLONE: "leoCloned",
    SELECTED_DIRTY: "leoDirty",
    SELECTED_EMPTY: "leoEmpty",
    SELECTED_CHILD: "leoChild", // Has children
    SELECTED_ATFILE: "LeoAtFile", // Can be refreshed
    SELECTED_ROOT: "leoRoot", // ! Computed by hand
    // Statusbar Flag 'keybindings in effect'
    LEO_SELECTED: "leoObjectSelected", // keybindings "On": Outline or body has focus
    // Context Flags for 'when' clauses, used concatenated, for each outline node
    NODE_MARKED: "leoNodeMarked",  // Selected node is marked
    NODE_UNMARKED: "leoNodeUnmarked", // Selected node is unmarked (Needed for regexp)
    NODE_ATFILE: "leoNodeAtFile", // Selected node is an @file or @clean, etc...
    NODE_CLONED: "leoNodeCloned",
    NODE_ROOT: "leoNodeRoot",
    NODE_NOT_ROOT: "leoNodeNotRoot"
};

</t>
<t tx="felix.20201208215536.16">/**
 * All commands this expansion exposes (in package.json, contributes &gt; commands)
 */
public static COMMANDS = {
    // Leo Documents
    SET_OPENED_FILE: Constants.NAME + ".setOpenedFile",
    OPEN_FILE: Constants.NAME + ".openLeoFile", // sets focus on BODY
    RECENT_FILES: Constants.NAME + ".recentLeoFiles", // shows recent Leo files, opens one on selection
    SWITCH_FILE: Constants.NAME + ".switchLeoFile",
    NEW_FILE: Constants.NAME + ".newLeoFile",
    SAVE_FILE: Constants.NAME + ".saveLeoFile",
    SAVE_FILE_FO: Constants.NAME + ".saveLeoFileFromOutline",
    SAVE_AS_FILE: Constants.NAME + ".saveAsLeoFile",
    CLOSE_FILE: Constants.NAME + ".closeLeoFile",
    MINIBUFFER: Constants.NAME + ".minibuffer",
    // Outline Node User Interaction
    SELECT_NODE: Constants.NAME + ".selectTreeNode",
    OPEN_ASIDE: Constants.NAME + ".openAside", // selects and opens body splitting the workspace
    // Goto operations that always finish with focus in outline
    PAGE_UP: Constants.NAME + ".pageUp",
    PAGE_DOWN: Constants.NAME + ".pageDown",
    GOTO_FIRST_VISIBLE: Constants.NAME + ".gotoFirstVisible",
    GOTO_LAST_VISIBLE: Constants.NAME + ".gotoLastVisible",
    GOTO_LAST_SIBLING: Constants.NAME + ".gotoLastSibling",
    GOTO_NEXT_VISIBLE: Constants.NAME + ".gotoNextVisible",
    GOTO_PREV_VISIBLE: Constants.NAME + ".gotoPrevVisible",
    GOTO_NEXT_MARKED: Constants.NAME + ".gotoNextMarked",
    GOTO_NEXT_CLONE: Constants.NAME + ".gotoNextClone",
    GOTO_NEXT_CLONE_SELECTION: Constants.NAME + ".gotoNextCloneSelection",
    GOTO_NEXT_CLONE_SELECTION_FO: Constants.NAME + ".gotoNextCloneSelectionFromOutline",
    CONTRACT_OR_GO_LEFT: Constants.NAME + ".contractOrGoLeft",
    EXPAND_AND_GO_RIGHT: Constants.NAME + ".expandAndGoRight",
    // Leo Operations
    UNDO: Constants.NAME + ".undo", // From command Palette
    UNDO_FO: Constants.NAME + ".undoFromOutline", // from button, return focus on OUTLINE
    REDO: Constants.NAME + ".redo", // From command Palette
    REDO_FO: Constants.NAME + ".redoFromOutline", // from button, return focus on OUTLINE
    EXECUTE: Constants.NAME + ".executeScript",
    SHOW_BODY: Constants.NAME + ".showBody",
    SHOW_OUTLINE: Constants.NAME + ".showOutline",
    SHOW_LOG: Constants.NAME + ".showLogPane",
    SORT_CHILDREN: Constants.NAME + ".sortChildrenSelection",
    SORT_CHILDREN_FO: Constants.NAME + ".sortChildrenSelectionFromOutline",
    SORT_SIBLING: Constants.NAME + ".sortSiblingsSelection",
    SORT_SIBLING_FO: Constants.NAME + ".sortSiblingsSelectionFromOutline",
    CONTRACT_ALL: Constants.NAME + ".contractAll", // From command Palette
    CONTRACT_ALL_FO: Constants.NAME + ".contractAllFromOutline", // from button, return focus on OUTLINE
    // Commands from tree panel buttons or context: focus on OUTLINE
    MARK: Constants.NAME + ".mark",
    UNMARK: Constants.NAME + ".unmark",
    COPY: Constants.NAME + ".copyNode",
    CUT: Constants.NAME + ".cutNode",
    PASTE: Constants.NAME + ".pasteNode",
    PASTE_CLONE: Constants.NAME + ".pasteNodeAsClone",
    DELETE: Constants.NAME + ".delete",
    HEADLINE: Constants.NAME + ".editHeadline",
    MOVE_DOWN: Constants.NAME + ".moveOutlineDown",
    MOVE_LEFT: Constants.NAME + ".moveOutlineLeft",
    MOVE_RIGHT: Constants.NAME + ".moveOutlineRight",
    MOVE_UP: Constants.NAME + ".moveOutlineUp",
    INSERT: Constants.NAME + ".insertNode",
    CLONE: Constants.NAME + ".cloneNode",
    PROMOTE: Constants.NAME + ".promote",
    DEMOTE: Constants.NAME + ".demote",
    REFRESH_FROM_DISK: Constants.NAME + ".refreshFromDisk",
    // Commands from keyboard, while focus on BODY (command-palette returns to BODY for now)
    MARK_SELECTION: Constants.NAME + ".markSelection",
    UNMARK_SELECTION: Constants.NAME + ".unmarkSelection",
    COPY_SELECTION: Constants.NAME + ".copyNodeSelection", // Nothing to refresh/focus so no "FO" version
    CUT_SELECTION: Constants.NAME + ".cutNodeSelection",
    PASTE_SELECTION: Constants.NAME + ".pasteNodeAtSelection",
    PASTE_CLONE_SELECTION: Constants.NAME + ".pasteNodeAsCloneAtSelection",
    DELETE_SELECTION: Constants.NAME + ".deleteSelection",
    HEADLINE_SELECTION: Constants.NAME + ".editSelectedHeadline",
    MOVE_DOWN_SELECTION: Constants.NAME + ".moveOutlineDownSelection",
    MOVE_LEFT_SELECTION: Constants.NAME + ".moveOutlineLeftSelection",
    MOVE_RIGHT_SELECTION: Constants.NAME + ".moveOutlineRightSelection",
    MOVE_UP_SELECTION: Constants.NAME + ".moveOutlineUpSelection",
    INSERT_SELECTION: Constants.NAME + ".insertNodeSelection", // Can be interrupted
    INSERT_SELECTION_INTERRUPT: Constants.NAME + ".insertNodeSelectionInterrupt", // Interrupted version
    CLONE_SELECTION: Constants.NAME + ".cloneNodeSelection",
    PROMOTE_SELECTION: Constants.NAME + ".promoteSelection",
    DEMOTE_SELECTION: Constants.NAME + ".demoteSelection",
    REFRESH_FROM_DISK_SELECTION: Constants.NAME + ".refreshFromDiskSelection",
    // Commands from keyboard, while focus on OUTLINE (no need for COPY_SELECTION)
    MARK_SELECTION_FO: Constants.NAME + ".markSelectionFromOutline",
    UNMARK_SELECTION_FO: Constants.NAME + ".unmarkSelectionFromOutline",
    CUT_SELECTION_FO: Constants.NAME + ".cutNodeSelectionFromOutline",
    PASTE_SELECTION_FO: Constants.NAME + ".pasteNodeAtSelectionFromOutline",
    PASTE_CLONE_SELECTION_FO: Constants.NAME + ".pasteNodeAsCloneAtSelectionFromOutline",
    DELETE_SELECTION_FO: Constants.NAME + ".deleteSelectionFromOutline",
    HEADLINE_SELECTION_FO: Constants.NAME + ".editSelectedHeadlineFromOutline",
    MOVE_DOWN_SELECTION_FO: Constants.NAME + ".moveOutlineDownSelectionFromOutline",
    MOVE_LEFT_SELECTION_FO: Constants.NAME + ".moveOutlineLeftSelectionFromOutline",
    MOVE_RIGHT_SELECTION_FO: Constants.NAME + ".moveOutlineRightSelectionFromOutline",
    MOVE_UP_SELECTION_FO: Constants.NAME + ".moveOutlineUpSelectionFromOutline",
    INSERT_SELECTION_FO: Constants.NAME + ".insertNodeSelectionFromOutline",
    CLONE_SELECTION_FO: Constants.NAME + ".cloneNodeSelectionFromOutline",
    PROMOTE_SELECTION_FO: Constants.NAME + ".promoteSelectionFromOutline",
    DEMOTE_SELECTION_FO: Constants.NAME + ".demoteSelectionFromOutline",
    REFRESH_FROM_DISK_SELECTION_FO: Constants.NAME + ".refreshFromDiskSelectionFromOutline",
    HOIST: Constants.NAME + ".hoistNode",
    HOIST_SELECTION: Constants.NAME + ".hoistSelection",
    HOIST_SELECTION_FO: Constants.NAME + ".hoistSelectionFromOutline",
    DEHOIST: Constants.NAME + ".deHoist",
    DEHOIST_FO: Constants.NAME + ".deHoistFromOutline",
    EXTRACT: Constants.NAME + ".extract",
    EXTRACT_NAMES: Constants.NAME + ".extractNames",
    COPY_MARKED: Constants.NAME + ".copyMarked",
    DIFF_MARKED_NODES: Constants.NAME + ".diffMarkedNodes",
    MARK_CHANGED_ITEMS: Constants.NAME + ".markChangedItems",
    MARK_SUBHEADS: Constants.NAME + ".markSubheads",
    UNMARK_ALL: Constants.NAME + ".unmarkAll",
    CLONE_MARKED_NODES: Constants.NAME + ".cloneMarkedNodes",
    DELETE_MARKED_NODES: Constants.NAME + ".deleteMarkedNodes",
    MOVE_MARKED_NODES: Constants.NAME + ".moveMarkedNodes",
    CLONE_FIND_ALL: Constants.NAME + ".cloneFindAll",
    CLONE_FIND_ALL_FLATTENED: Constants.NAME + ".cloneFindAllFlattened",
    CLONE_FIND_MARKED: Constants.NAME + ".cloneFindMarked",
    CLONE_FIND_FLATTENED_MARKED: Constants.NAME + ".cloneFindFlattenedMarked",
};

</t>
<t tx="felix.20201208215536.2">/**
 * Text and numeric constants used throughout leojs
 */
export class Constants {

    @others
}
</t>
<t tx="felix.20201208215536.3">public static NAME: string = "leojs";

public static TREEVIEW_EXPLORER_ID: string = "leojsExplorer";

public static FILE_EXTENSION: string = "leo";

public static URI_LEO_SCHEME: string = "leo";

public static URI_FILE_SCHEME: string = "file";

public static URI_SCHEME_HEADER: string = "leo:/";

public static FILE_OPEN_FILTER_MESSAGE: string = "Leo Files";

public static UNTITLED_FILE_NAME: string = "untitled";

public static RECENT_FILES_KEY: string = "leoRecentFiles";

public static LAST_FILES_KEY: string = "leoLastFiles";

public static STATES_DEBOUNCE_DELAY: number = 100;

</t>
<t tx="felix.20201208215536.4">/**
 * Strings used in the workbench interface panels (not for messages or dialogs)
 */
public static GUI = {
    ICON_LIGHT_DOCUMENT: "resources/light/document.svg",
    ICON_DARK_DOCUMENT: "resources/dark/document.svg",
    ICON_LIGHT_DOCUMENT_DIRTY: "resources/light/document-dirty.svg",
    ICON_DARK_DOCUMENT_DIRTY: "resources/dark/document-dirty.svg",
    ICON_LIGHT_BUTTON: "resources/light/button.svg",
    ICON_DARK_BUTTON: "resources/dark/button.svg",
    ICON_LIGHT_BUTTON_ADD: "resources/light/button-add.svg",
    ICON_DARK_BUTTON_ADD: "resources/dark/button-add.svg",
    ICON_LIGHT_PATH: "resources/light/box",
    ICON_DARK_PATH: "resources/dark/box",
    ICON_FILE_EXT: ".svg",
    STATUSBAR_INDICATOR: "$(keyboard) ",
    QUICK_OPEN_LEO_COMMANDS: "&gt;leo: ",
    EXPLORER_TREEVIEW_PREFIX: "LEO ",
    TREEVIEW_TITLE: "OUTLINE",
    BODY_TITLE: "LEO BODY",
    LOG_PANE_TITLE: "Leo Log Window"
};

</t>
<t tx="felix.20201208215536.5">/**
 * Basic user messages strings for messages and dialogs
 */
public static USER_MESSAGES = {
    SAVE_CHANGES: "Save changes to",
    BEFORE_CLOSING: "before closing?",
    CANCEL: "Cancel",
    OPEN_WITH_LEOJS: "Open this Leo file with leojs?",
    OPEN_RECENT_FILE: "Open Recent Leo File",
    RIGHT_CLICK_TO_OPEN: "Right-click Leo files to open with leojs",
    FILE_ALREADY_OPENED: "Leo file already opened",
    CHOOSE_OPENED_FILE: "Select an opened Leo File",
    FILE_NOT_OPENED: "No files opened.",
    PROMPT_EDIT_HEADLINE: "Edit Headline",
    PROMPT_INSERT_NODE: "Insert Node",
    DEFAULT_HEADLINE: "New Headline",
    CLOSE_ERROR: "Cannot close: No files opened.",
    YES: "Yes",
    NO: "No",
    YES_ALL: "Yes to all",
    NO_ALL: "No to all",
    MINIBUFFER_PROMPT: "Minibuffer Full Command",
    CHANGES_DETECTED: "Changes to external files were detected.",
    REFRESHED: " Nodes refreshed.", // with voluntary leading space
    IGNORED: " They were ignored.", // with voluntary leading space
    TOO_FAST: "Leo is busy! " // with voluntary trailing space
};

</t>
<t tx="felix.20201208215536.6">/**
 * Choices offered when about to lose current changes to a Leo Document
 */
public static ASK_SAVE_CHANGES_BUTTONS: vscode.MessageItem[] = [
    {
        title: Constants.USER_MESSAGES.YES,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.NO,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.CANCEL,
        isCloseAffordance: true
    }
];

</t>
<t tx="felix.20201208215613.1">// - `src/extension.ts` - this is the main file where you will provide the implementation of your command.
//   - The file exports one function, `activate`, which is called the very first time your extension is activated (in this case by executing the command).
//     Inside the `activate` function we call `registerCommand`.
//   - We pass the function containing the implementation of the command as the second parameter to `registerCommand`.

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "leojs" is now active!');

	const jsOutlineProvider = new JsOutlineProvider(context);
	vscode.window.registerTreeDataProvider('leoJsExplorer', jsOutlineProvider);
	vscode.commands.executeCommand('setContext', 'leoReady', true);
	vscode.commands.executeCommand('setContext', 'leoTreeOpened', true);

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('leojs.test', () =&gt; {
		// The code you place here will be executed every time your command is executed

		// Display a message box to the user
		vscode.window.showInformationMessage('Hello World from leojs!');
	});

	context.subscriptions.push(disposable);
}

</t>
<t tx="felix.20201208215619.1">// this method is called when your extension is deactivated
export function deactivate() { }

</t>
<t tx="felix.20201208220441.1">"commands": [
  @others
],
</t>
<t tx="felix.20201208221211.1">"viewsWelcome": [
  {
    "view": "leoJsExplorer",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "!leoTreeOpened"
  }
],
</t>
<t tx="felix.20201208221448.1">"menus": {
  @others
},
</t>
<t tx="felix.20201208221652.1">"commandPalette": [
  @others
],
</t>
<t tx="felix.20201208221716.1">"explorer/context": [
  {
    "command": "leojs.openLeoFile",
    "when": "resourceScheme == file &amp;&amp; resourceExtname == .leo",
    "group": "navigation@1"
  }
],
</t>
<t tx="felix.20201208221809.1">"view/title": [
  @others
],
</t>
<t tx="felix.20201208221847.1">"view/item/context": [
  @others
]
</t>
<t tx="felix.20201208221945.1">"keybindings": [
  @others
]
</t>
<t tx="felix.20201208222541.1">"views": {
  "explorer": [
    {
      "id": "leoJsExplorer",
      "name": "Leo",
      "contextualTitle": "Leo"
    }
  ]
},
</t>
<t tx="felix.20201208223531.1"></t>
<t tx="felix.20201208223553.1">import * as vscode from 'vscode';
import { LeoNode } from './leoNode';
import { ProviderResult } from "vscode";
import { Icon, PNode } from './types';
import * as utils from "./utils";

@others
@language typescript
@tabwidth -4
</t>
<t tx="felix.20201208223554.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Icon, PNode } from "./types"; // ArchivedPosition included to help debug

/**
 * * Implementation of tree nodes for usage in a TreeDataProvider
 */
@others
@language typescript
@tabwidth -4
</t>
<t tx="felix.20201208224407.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Icon } from "./types";
import { LeoNode } from "./leoNode";

// String and other types/structures helper functions, along with common vscode API calls

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224407.10">/**
 * * Returns the milliseconds between a given starting process.hrtime tuple and the current call to process.hrtime
 * @param p_start starting process.hrtime to subtract from current immediate time
 * @returns number of milliseconds passed since the given start hrtime
 */
export function getDurationMs(p_start: [number, number]): number {
    const [w_secs, w_nanosecs] = process.hrtime(p_start);
    return w_secs * 1000 + Math.floor(w_nanosecs / 1000000);
}

</t>
<t tx="felix.20201208224407.11">/**
 * * Extracts the file name from a full path, such as "foo.bar" from "/abc/def/foo.bar"
 * @param p_path Full path such as "/var/drop/foo/boo/moo.js" or "C:\Documents and Settings\img\recycled log.jpg"
 * @returns file name string such as "moo.js" or "recycled log.jpg""
 */
export function getFileFromPath(p_path: string): string {
    return p_path.replace(/^.*[\\\/]/, '');
}

</t>
<t tx="felix.20201208224407.12">/**
 * * Checks if a node would become dirty if it were to now have body content at all
 * @param p_node LeoNode from vscode's outline
 * @param p_newHasBody Flag to signify presence of body content, to be compared with its current state
 * @returns True if it would change the icon with actual body content, false otherwise
 */
export function isIconChangedByEdit(p_node: LeoNode, p_newHasBody: boolean): boolean {
    if (!p_node.dirty || (p_node.hasBody === !p_newHasBody)) {
        return true;
    }
    return false;
}

</t>
<t tx="felix.20201208224407.14">/**
* Builds a 'Leo Scheme' vscode.Uri from a gnx (or strings like 'LEO BODY' or empty strings to decorate breadcrumbs)
* @param p_str leo node gnx strings are used to build Uri
* @returns A vscode 'Uri' object
*/
export function strToLeoUri(p_str: string): vscode.Uri {
    return vscode.Uri.parse(Constants.URI_SCHEME_HEADER + p_str);
}

</t>
<t tx="felix.20201208224407.15">/**
 * * Gets the gnx, (or another string like 'LEO BODY' or other), from a vscode.Uri object
 * @param p_uri Source uri to extract from
 * @returns The string source that was used to build this Uri
 */
export function leoUriToStr(p_uri: vscode.Uri): string {
    // TODO : Use length of a constant or something other than 'fsPath'
    // For now, just remove the '/' (or backslash on Windows) before the path string
    return p_uri.fsPath.substr(1);
}

</t>
<t tx="felix.20201208224407.16">/**
 * * Sets a vscode context variable with 'vscode.commands.executeCommand' &amp; 'setContext'
 * @param p_key Key string name such as constants 'leoReady' or 'treeOpened', etc.
 * @param p_value Value to be assigned to the p_key 'key'
 * @returns A Thenable that is returned by the executeCommand call
 */
export function setContext(p_key: string, p_value: any): Thenable&lt;unknown&gt; {
    return vscode.commands.executeCommand(Constants.VSCODE_COMMANDS.SET_CONTEXT, p_key, p_value);
}

</t>
<t tx="felix.20201208224407.2">/**
 * * Build a string for representing a number that's 2 digits wide, padding with a zero if needed
 * @param p_number Between 0 and 99
 * @returns a 2 digit wide string representation of the number, left padded with zeros as needed.
 */
export function padNumber2(p_number: number): string {
    return ("0" + p_number).slice(-2);
}

</t>
<t tx="felix.20201208224407.4">/**
 * * Performs the actual addition into globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
 */
export function addFileToGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Just push that string into the context.globalState.&lt;something&gt; array
    const w_contextEntry: string[] = p_context.globalState.get(p_key) || [];
    if (w_contextEntry) {
        if (!w_contextEntry.includes(p_file)) {
            w_contextEntry.push(p_file);
            if (w_contextEntry.length &gt; 10) {
                w_contextEntry.shift();
            }
        }
        return p_context.globalState.update(p_key, w_contextEntry); // Added file
    } else {
        // First so create key entry with an array of single file
        return p_context.globalState.update(p_key, [p_file]);
    }
}

</t>
<t tx="felix.20201208224407.5">/**
 * * Removes file entry from globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
  */
export function removeFileFromGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Check if exist in context.globalState.&lt;something&gt; and remove if found
    const w_files: string[] = p_context.globalState.get(p_key) || [];
    if (w_files &amp;&amp; w_files.includes(p_file)) {
        w_files.splice(w_files.indexOf(p_file), 1); // Splice and update
        return p_context.globalState.update(p_key, w_files);
    }
    return Promise.resolve(); // not even in list so just resolve
}

</t>
<t tx="felix.20201208224407.6">/**
 * * Build all possible strings for node icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array of the 16 vscode node icons used in this vscode expansion
 */
export function buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: p_context.asAbsolutePath(
                Constants.GUI.ICON_LIGHT_PATH +
                padNumber2(p_index) +
                Constants.GUI.ICON_FILE_EXT),
            dark: p_context.asAbsolutePath(
                Constants.GUI.ICON_DARK_PATH +
                padNumber2(p_index) +
                Constants.GUI.ICON_FILE_EXT)
        };
    });
}

</t>
<t tx="felix.20201208224407.7">/**
 * * Build all possible strings for documents icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildDocumentIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT_DIRTY),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT_DIRTY)
        }
    ];
}

</t>
<t tx="felix.20201208224407.8">/**
 * * Build all possible strings for buttons icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildButtonsIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON_ADD),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON_ADD)
        }
    ];
}

</t>
<t tx="felix.20201208224420.1">import * as vscode from "vscode";
import { LeoNode } from "./leoNode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224420.10">/**
 * * ArchivedPosition format package from Leo's leoflexx.py
 */
export interface ArchivedPosition {
    hasBody: boolean;       // bool(p.b),
    hasChildren: boolean;   // p.hasChildren()
    childIndex: number;     // p._childIndex
    cloned: boolean;        // p.isCloned()
    dirty: boolean;         // p.isDirty()
    expanded: boolean;      // p.isExpanded()
    gnx: string;            // p.v.gnx
    level: number;          // p.level()
    headline: string;       // p.h
    marked: boolean;        // p.isMarked()
    atFile: boolean         // p.isAnyAtFileNode():
    selected: boolean;      // p == commander.p
    u?: any;               // User Attributes
    stack: {
        gnx: string;        // stack_v.gnx
        childIndex: number; // stack_childIndex
        headline: string;   // stack_v.h
    }[];                    // for (stack_v, stack_childIndex) in p.stack]
}

</t>
<t tx="felix.20201208224420.16">/**
 * * Icon path names used in leoNodes for rendering in treeview
 */
export interface Icon {
    light: string;
    dark: string;
}

</t>
<t tx="felix.20201208224420.20">/**
 * * Parameter structure used in the 'runSaveFileDialog' equivalent when asking user input
 */
export interface showSaveAsDialogParameters {
    "initialFile": string;
    "title": string;
    "message": string;
    "filetypes": string[];
    "defaultExtension": string;
}

</t>
<t tx="felix.20201208224420.21">/**
 * * Parameter structure used in the 'runAskYesNoDialog' equivalent when asking user input
 */
export interface runAskYesNoDialogParameters {
    "ask": string;
    "message": string;
    "yes_all": boolean;
    "no_all": boolean;
}

</t>
<t tx="felix.20201208224420.22">/**
 * * Parameter structure used in the 'runAskOkDialog' equivalent when showing a warning
 */
export interface runWarnMessageDialogParameters {
    "warn": string;
    "message": string;
}

</t>
<t tx="felix.20201208224420.23">/**
 * * Parameter structure for non-blocking info message about detected file changes
 */
export interface runInfoMessageDialogParameters {
    "message": string;
}

</t>
<t tx="felix.20201208224420.24">/**
 * * Used in showAskModalDialog to get answer from user interaction
 */
export interface AskMessageItem extends vscode.MessageItem {
    value: string;
}

</t>
<t tx="felix.20201208224420.25">/**
 * * Used in switch Leo document to get answer from user interaction
 */
export interface ChooseDocumentItem extends vscode.QuickPickItem {
    value: number;
}

</t>
<t tx="felix.20201208224420.26">/**
 * * Used by the minibuffer command pallette
 * Acquired from the getCommands method in leobridgeserver.py
 */
export interface MinibufferCommand extends vscode.QuickPickItem {
    func: string;
}
</t>
<t tx="felix.20201208224420.4">/**
 * * When refreshing the outline and getting to Leo's selected node
 */
export const enum RevealType {
    NoReveal = 0,   // In apToLeoNode conversion. True:
                    // Re-use the old if the global revealType is "NoReveal" and it's the selected node.
    Reveal,
    RevealSelect,
    RevealSelectFocus
}

</t>
<t tx="felix.20201208224420.5">/**
 * * Required Refresh Dictionary of "elements to refresh" flags
 */
export interface ReqRefresh {
    node?: boolean; // Reveal received selected node (Navigation only, no tree change)
    tree?: boolean; // Tree needs refresh
    body?: boolean; // Body needs refresh
    states?: boolean; // States needs refresh:
                      // (changed, canUndo, canRedo, canDemote, canPromote, canDehoist)
    buttons?: boolean; // Buttons needs refresh
    documents?: boolean; // Documents needs refresh
}

</t>
<t tx="felix.20201208224420.6">/**
 * * Stackable front end commands
 */
export interface UserCommand {
    action: string;
    node?: LeoNode | undefined;  // We can START a stack with a targeted command
    text?: string | undefined; // If a string is required, for headline, etc.
    refreshType: ReqRefresh; // Minimal refresh level required by this command
    fromOutline: boolean; // Focus back on outline instead of body
    keepSelection?: boolean; // Should bring back selection on node prior to command
    resolveFn?: (result: any) =&gt; void; // call that with an answer from python's (or other) side
    rejectFn?: (reason: any) =&gt; void; // call if problem is encountered
}

</t>
<t tx="felix.20201208224420.7">/**
 * * Object container for parameters of leoIntegration's "apply-selected-node-to-body" method
 */
export interface ShowBodyParam {
    node: LeoNode,
    aside: boolean,
    showBodyKeepFocus: boolean,
    force_open?: boolean
}
</t>
<t tx="felix.20201208224441.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import * as path from "path"; // TODO : Use this to have reliable support for window-vs-linux file-paths

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224441.2">/**
 * * Handles opening of file browser when choosing which Leo file to open
 */
export class LeoFilesBrowser {

    private _fileBrowserActive: boolean = false;

    constructor(private _context: vscode.ExtensionContext) { }

    @others
}
</t>
<t tx="felix.20201208224441.3">/**
 * * Finds a folder to propose when opening the browse-for-leo-file chooser
 * @returns An Uri for path to a folder for initial opening
 */
private _getBestOpenFolderUri(): vscode.Uri {
    let w_openedFileEnvUri: vscode.Uri | boolean = false;
    let w_activeUri: vscode.Uri | undefined = undefined;

    if (vscode.workspace.workspaceFolders &amp;&amp; vscode.workspace.workspaceFolders[0]) {
        w_activeUri = vscode.workspace.workspaceFolders[0].uri;
    }

    if (w_activeUri) {
        const w_defaultFolder = vscode.workspace.getWorkspaceFolder(w_activeUri);
        if (w_defaultFolder) {
            w_openedFileEnvUri = w_defaultFolder.uri; // Set as current opened document-path's folder
        }
    }
    if (!w_openedFileEnvUri) {
        w_openedFileEnvUri = vscode.Uri.file("~");
            // TODO : set as home folder properly, this doesn't work
            // ! EXAMPLE WITH os : const homedir = require('os').homedir();
    }
    return w_openedFileEnvUri;
}

</t>
<t tx="felix.20201208224441.4">/**
 * * Open a file browser and let the user choose a Leo file or cancel the operation
 * @param p_saveAsFlag Optional flag that will ask for a 'save' path+filename
 * @returns A promise resolving to a chosen path string, or rejected with an empty string if cancelled
 */
public getLeoFileUrl(p_saveAsFlag?: boolean): Promise&lt;string&gt; {
    if (this._fileBrowserActive) {
        return Promise.resolve("");
    }
    this._fileBrowserActive = true;
    return new Promise((p_resolve, p_reject) =&gt; {
        const w_filters: { [name: string]: string[] } = {};
        w_filters[Constants.FILE_OPEN_FILTER_MESSAGE] = [Constants.FILE_EXTENSION];

        if (p_saveAsFlag) {
            // Choose file
            vscode.window.showSaveDialog({
                saveLabel: "Save Leo File",
                defaultUri: this._getBestOpenFolderUri(),
                filters: { 'Leo File': ['leo'] }
            })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // single string
                        // Replace backslashes for windows support
                        p_resolve(p_chosenLeoFile.fsPath.replace(/\\/g, "/")); 
                    } else {
                        p_resolve(""); // not rejection - resolve empty string
                    }
                });
        } else {
            vscode.window
                .showOpenDialog({
                    canSelectMany: false,
                    defaultUri: this._getBestOpenFolderUri(),
                    filters: w_filters
                })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // array instead of single string
                         // Replace backslashes for windows support
                        p_resolve(p_chosenLeoFile[0].fsPath.replace(/\\/g, "/"));
                    } else {
                        p_resolve("");
                    }
                });
        }
    });
}

</t>
<t tx="felix.20201208224703.1">@language rest
@wrap

# How to install and run the development version

Thanks for trying out the development version of LeoInteg! :sunglasses: Contributions and pull requests are more than welcome!

## Introduction

If you're new to vscode and want to try out Leo with this vscode extension, you might want to look at this [Getting Started](https://code.visualstudio.com/docs#vscode-in-action) page to get an overview of vscode.

Furthermore, if you've never ran a vscode extension in an **Extension Development Host**, here is a [short overview about running and modifying a simple extension](https://code.visualstudio.com/api/get-started/your-first-extension).

If you're having problems, try [running this sample extension](https://github.com/Microsoft/vscode-extension-samples/tree/master/helloworld-sample#running-the-sample) first to catch underlying problems or missing dependencies.

</t>
<t tx="felix.20201208235204.1">/**
 * Command strings to be used with vscode.commands.executeCommand
 * See https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command
 */
public static VSCODE_COMMANDS = {
    SET_CONTEXT: "setContext",
    CLOSE_ACTIVE_EDITOR: "workbench.action.closeActiveEditor",
    QUICK_OPEN: "workbench.action.quickOpen"
};

</t>
<t tx="felix.20201209004316.1">export class LeoNode extends vscode.TreeItem {

    public contextValue: string; // * Context string is checked in package.json with 'when' clauses

    public isRoot: boolean = false; // * for hoist/dehoist context flags purposes

    constructor(
        public label: string, // Node headline
        public collapsibleState: vscode.TreeItemCollapsibleState, // Computed in receiver/creator
        public ap: PNode, // Pointer/reference for leo's node position
        public childIndex: number, // For debugging purposes
        public cloned: boolean,
        public dirty: boolean,
        public marked: boolean,
        public atFile: boolean,
        public hasBody: boolean,
        public u: any,
        private _icons: Icon[], // pointer to global array of node icons
        private _id: string
    ) {
        super(label, collapsibleState);
        this.contextValue = this._getNodeContextValue();
        this.command = {
            command: Constants.COMMANDS.SELECT_NODE,
            title: '',
            arguments: [this]
        };
    }

    // * TO HELP DEBUG
    // get description(): string {
    //     // * some smaller grayed-out text accompanying the main label
    //     const w_ap: ArchivedPosition = JSON.parse(this.ap);
    //     return "child:" + w_ap.childIndex + " lvl:" + w_ap.level + " gnx:" + w_ap.gnx;
    // }

    // get description(): string {
    //     // * some smaller grayed-out text accompanying the main label
    //     return "id:" + this.id;
    // }

    /**
     * * Sets this node properties (dirty, marked, etc.) by copying from a given node.
     * * This is needed by the outline provider when refreshing a single node.
     * @param p_node Node to copy properties from.
     * @returns Node itself with the new properties applied
     */
    @others
}
</t>
<t tx="felix.20201209004316.2">public copyProperties(p_node: LeoNode): LeoNode {
    this.label = p_node.label;

    this.collapsibleState = p_node.collapsibleState;
    this.ap = p_node.ap;
    this.childIndex = p_node.childIndex;
    this.cloned = p_node.cloned;
    this.dirty = p_node.dirty;
    this.marked = p_node.marked;
    this.atFile = p_node.atFile;
    this.hasBody = p_node.hasBody;
    this.isRoot = p_node.isRoot;
    this.contextValue = this._getNodeContextValue();
    return this;
}

</t>
<t tx="felix.20201209004316.3">/**
 * * Set this node as the root for hoist/dehoist context flags purposes
 */
public setRoot(): void {
    this.isRoot = true;
    this.contextValue = this._getNodeContextValue();
}

</t>
<t tx="felix.20201209004316.4">private _getNodeContextValue(): string {
    // Start it with 'leoNodeMarked' or 'leoNodeUnmarked'
    let w_contextValue = Constants.CONTEXT_FLAGS.NODE_UNMARKED;
    if (this.marked) {
        w_contextValue = Constants.CONTEXT_FLAGS.NODE_MARKED;
    }
    // then append 'leoNodeAtFile' to existing if needed
    if (this.atFile) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ATFILE;
    }
    // then append 'leoNodeCloned' to existing if needed
    if (this.cloned) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_CLONED;
    }
    // and finally, check for 'root' too
    if (this.isRoot) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ROOT;
    } else {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_NOT_ROOT;
    }
    return w_contextValue;
}

// @ts-ignore
public get iconPath(): Icon {
    // From Leo's leoNodes.py computeIcon function
    // 1=has Body, 2=marked, 4=cloned, 8=dirty
    let w_icon: number =
        (+this.dirty &lt;&lt; 3) |
        (+this.cloned &lt;&lt; 2) |
        (+this.marked &lt;&lt; 1) |
        +this.hasBody;
    return this._icons[w_icon];
}

// Optional id for the tree item that has to be unique across tree.
// The id is used to preserve the selection and expansion state of the tree item.
// If not provided, an id is generated using the tree item's label.
// Note that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.
// @ts-ignore
public get id(): string { return this._id; }

// @ts-ignore
public get description(): string {
    // * some smaller grayed-out text accompanying the main label
    if (this.u) {
        return "\u{1F4CE} (" + Object.keys(this.u).length + ")";
    } else {
        // return "id:" + this.id; // ! debug test
        // return "gnx:" + this.gnx; // ! debug test
        return ""; // Falsy will not be shown
    }
}

// @ts-ignore
public get tooltip(): string {
    if (this.u) {
        //  "\ntotal keys is :" + Object.keys(this.u).length
        return this.label + "\n" +
            JSON.stringify(this.u, undefined, 2);
    } else {
        return this.label; // * Whole headline as tooltip
    }
}

</t>
<t tx="felix.20201209011931.1">export class JsOutlineProvider implements vscode.TreeDataProvider&lt;LeoNode&gt; {
    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoNode | undefined&gt; = new vscode.EventEmitter&lt;LeoNode | undefined&gt;();

    private _icons: Icon[];

    private _model: PNode[] = [
        {
            header: "node1",
            body: "node1 body",
            children: [
                {
                    header: "nodeInside1",
                    body: "nodeInside1 body",
                    children: []
                }, {
                    header: "nodeInside2",
                    body: "nodeInside2 body",
                    children: []
                },
            ]
        },
        {
            header: "node2",
            body: "", // Empty body should display icon without blue square
            children: []
        },

        {
            header: "node3",
            body: "node3 body",
            children: []
        },
    ];

    private _uniqueId: number = 0;

    @others
}
</t>
<t tx="felix.20201209011931.2">constructor(private _context: vscode.ExtensionContext) {
    this._icons = this._buildNodeIconPaths(_context);
}


</t>
<t tx="felix.20201209011931.3">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201209011931.4">public getTreeItem(element: LeoNode): Thenable&lt;LeoNode&gt; | LeoNode {
    return element;
}

</t>
<t tx="felix.20201209011931.5">public getChildren(element?: LeoNode): Thenable&lt;LeoNode[]&gt; {
    if (element) {
        return Promise.resolve(this._LeoNodeArray(element.ap.children));
    } else {
        return Promise.resolve(this._LeoNodeArray(this._model));
    }
}

</t>
<t tx="felix.20201209011931.6">public getParent(element: LeoNode): ProviderResult&lt;LeoNode&gt; | null {
    // Buttons are just a list, as such, entries are always child of root so return null
    return null;
}

</t>
<t tx="felix.20201209011931.7">private _buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: p_context.asAbsolutePath("resources/light/box" + utils.padNumber2(p_index) + ".svg"),
            dark: p_context.asAbsolutePath("resources/dark/box" + utils.padNumber2(p_index) + ".svg")
        };
    });
}

</t>
<t tx="felix.20201209011931.8">private _LeoNodeArray(p_children: PNode[]): LeoNode[] {
    const w_children: LeoNode[] = [];
    if (p_children &amp;&amp; p_children.length) {
        p_children.forEach((p_node, p_index) =&gt; {
            w_children.push(new LeoNode(p_node.header,
                p_node.children.length ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None,
                p_node, // ap
                p_index, // childIndex
                false, // cloned
                false, // dirty
                false, // marked
                false, // atFile
                !!p_node.body &amp;&amp; !!p_node.body.length,
                false, // u
                this._icons,
                "id" + this._uniqueId++
            ));
        });
    }
    return w_children;
}

</t>
<t tx="felix.20201209012321.1">export interface PNode {
    header: string;
    children: PNode[];
    parent?: PNode;
    body: string;
}

</t>
</tnodes>
</leo_file>
