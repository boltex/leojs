<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="felix.20201208214250.2"><vh>Documentation</vh>
<v t="felix.20201208214319.1"><vh>@clean README.md</vh></v>
<v t="felix.20201208214506.1"><vh>@clean CHANGELOG.md</vh></v>
<v t="felix.20201208224703.1"><vh>@clean CONTRIBUTING.md</vh></v>
</v>
<v t="felix.20201208214322.1"><vh>@clean src/extension.ts</vh>
<v t="felix.20201208215613.1"><vh>activate</vh></v>
<v t="felix.20201208215619.1"><vh>deactivate</vh></v>
</v>
<v t="felix.20201208223531.1"><vh>@clean src/leojs.ts</vh></v>
<v t="felix.20201208223553.1"><vh>@clean src/leoOutline.ts</vh>
<v t="felix.20201209011931.1"><vh>class JsOutlineProvider</vh>
<v t="felix.20201209011931.2"><vh>constructor</vh></v>
<v t="felix.20201209011931.3"><vh>refreshTreeRoot</vh></v>
<v t="felix.20201209011931.4"><vh>getTreeItem</vh></v>
<v t="felix.20201209011931.5"><vh>getChildren</vh></v>
<v t="felix.20201209011931.6"><vh>getParent</vh></v>
<v t="felix.20201209011931.7"><vh>_buildNodeIconPaths</vh></v>
<v t="felix.20201209011931.8"><vh>_jsNodeArray</vh></v>
</v>
</v>
<v t="felix.20201208223554.1"><vh>@clean src/leoNode.ts</vh>
<v t="felix.20201209004316.1"><vh>class LeoNode</vh>
<v t="felix.20201209004316.2"><vh>copyProperties</vh></v>
<v t="felix.20201209004316.3"><vh>setRoot</vh></v>
<v t="felix.20201209004316.4"><vh>_getNodeContextValue</vh></v>
</v>
</v>
<v t="felix.20201208215536.1"><vh>@clean src/constants.ts</vh>
<v t="felix.20201208215536.2"><vh>class Constants</vh>
<v t="felix.20201208215536.3"><vh>general constants</vh></v>
<v t="felix.20201208215536.4"><vh>workbench interface panels</vh></v>
<v t="felix.20201208215536.5"><vh>user messages</vh></v>
<v t="felix.20201208215536.6"><vh>ask/save buttons</vh></v>
<v t="felix.20201208215536.10"><vh>context flags</vh></v>
<v t="felix.20201208235204.1"><vh>vscode commands</vh></v>
<v t="felix.20201208215536.16"><vh>commands strings</vh></v>
</v>
</v>
<v t="felix.20201208224407.1"><vh>@clean src/utils.ts</vh>
<v t="felix.20201208224407.2"><vh>padNumber2</vh></v>
<v t="felix.20201208224407.4"><vh>addFileToGlobal</vh></v>
<v t="felix.20201208224407.5"><vh>removeFileFromGlobal</vh></v>
<v t="felix.20201208224407.6"><vh>buildNodeIconPaths</vh></v>
<v t="felix.20201208224407.7"><vh>buildDocumentIconPaths</vh></v>
<v t="felix.20201208224407.8"><vh>buildButtonsIconPaths</vh></v>
<v t="felix.20201208224407.10"><vh>getDurationMilliseconds</vh></v>
<v t="felix.20201208224407.11"><vh>getFileFromPath</vh></v>
<v t="felix.20201208224407.12"><vh>isIconChangedByEdit</vh></v>
<v t="felix.20201208224407.14"><vh>strToLeoUri</vh></v>
<v t="felix.20201208224407.15"><vh>leoUriToStr</vh></v>
<v t="felix.20201208224407.16"><vh>setContext</vh></v>
</v>
<v t="felix.20201208224420.1"><vh>@clean src/types.d.ts</vh>
<v t="felix.20201209012321.1"><vh>PNode</vh></v>
<v t="felix.20201208224420.4"><vh>RevealType</vh></v>
<v t="felix.20201208224420.5"><vh>RefreshType</vh></v>
<v t="felix.20201208224420.6"><vh>UserCommand</vh></v>
<v t="felix.20201208224420.7"><vh>ShowBodyParam</vh></v>
<v t="felix.20201208224420.10"><vh>ArchivedPosition</vh></v>
<v t="felix.20201208224420.16"><vh>Icon</vh></v>
<v t="felix.20201208224420.20"><vh>showSaveAsDialogParameters</vh></v>
<v t="felix.20201208224420.21"><vh>runAskYesNoDialogParameters</vh></v>
<v t="felix.20201208224420.22"><vh>runWarnMessageDialogParameters</vh></v>
<v t="felix.20201208224420.23"><vh>runInfoMessageDialogParameters</vh></v>
<v t="felix.20201208224420.24"><vh>AskMessageItem</vh></v>
<v t="felix.20201208224420.25"><vh>ChooseDocumentItem</vh></v>
<v t="felix.20201208224420.26"><vh>MinibufferCommand</vh></v>
</v>
<v t="felix.20201208224441.1"><vh>@clean src/leoFileBrowser.ts</vh>
<v t="felix.20201208224441.2"><vh>class LeoFilesBrowser</vh>
<v t="felix.20201208224441.3"><vh>_getBestOpenFolderUri</vh></v>
<v t="felix.20201208224441.4"><vh>getLeoFileUrl</vh></v>
</v>
</v>
<v t="felix.20201208214449.1"><vh>@clean package.json</vh>
<v t="felix.20201208222541.1"><vh>views</vh></v>
<v t="felix.20201208221211.1"><vh>viewsWelcome</vh></v>
<v t="felix.20201208220441.1"><vh>commands</vh></v>
<v t="felix.20201208221448.1"><vh>menus</vh>
<v t="felix.20201208221652.1"><vh>commandPalette</vh></v>
<v t="felix.20201208221716.1"><vh>explorer/context</vh></v>
<v t="felix.20201208221809.1"><vh>view/title</vh></v>
<v t="felix.20201208221847.1"><vh>view/item/context</vh></v>
</v>
<v t="felix.20201208221945.1"><vh>keybindings</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="felix.20201208214250.2"></t>
<t tx="felix.20201208214319.1"># leojs

Literate Editor with Outline _in Typescript_ version 0.1.00

**Enjoy!**
</t>
<t tx="felix.20201208214322.1">import * as vscode from 'vscode';
import { JsOutlineProvider } from './leoOutline';

@language typescript
@tabwidth -4
@others

</t>
<t tx="felix.20201208214449.1">@language json
@tabwidth -2
{
  "name": "leojs",
  "displayName": "leojs",
  "description": "Leo Literate Editor with Outline in Typescript",
  "version": "0.1.0",
  "engines": {
    "vscode": "^1.51.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    @others
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack --devtool nosources-source-map --config ./build/node-extension.webpack.config.js",
    "watch": "webpack --watch --devtool nosources-source-map --info-verbosity verbose --config ./build/node-extension.webpack.config.js",
    "package": "webpack --mode production --config ./build/node-extension.webpack.config.js",
    "test-compile": "tsc -p ./",
    "test-watch": "tsc -watch -p ./",
    "pretest": "npm run test-compile &amp;&amp; npm run lint",
    "lint": "tslint -p ./",
    "OldLint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.51.0",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.0.0",
    "@types/node": "^12.11.7",
    "eslint": "^7.9.0",
    "@typescript-eslint/eslint-plugin": "^4.1.1",
    "@typescript-eslint/parser": "^4.1.1",
    "glob": "^7.1.6",
    "mocha": "^8.1.3",
    "typescript": "^4.0.2",
    "vscode-test": "^1.4.0",
    "ts-loader": "^8.0.3",
    "tslint": "^6.1.3",
    "webpack": "^4.44.1",
    "webpack-cli": "^3.3.12"
  }
}
</t>
<t tx="felix.20201208214506.1"># Change Log

## 0.1.00 12.9.2020.

- Initial state</t>
<t tx="felix.20201208215536.1">import * as vscode from "vscode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208215536.10">/**
 * Used in 'when' clauses, set with vscode.commands.executeCommand("setContext",...)
 */
public static CONTEXT_FLAGS = {
    // Main flags for connection and opened file
    LEO_READY: "leoReady", // Extension activated and classes created and ready
    TREE_OPENED: "leoTreeOpened", // At least one Leo file opened
    TREE_TITLED: "leoTreeTitled", // Tree is a Leo file and not a new untitled document
    SERVER_STARTED: "leoServerStarted", // Auto-start or manually started
    // 'states' flags for currently opened tree view
    LEO_CHANGED: "leoChanged",
    LEO_CAN_UNDO: "leoCanUndo",
    LEO_CAN_REDO: "leoCanRedo",
    LEO_CAN_DEMOTE: "leoCanDemote",
    LEO_CAN_PROMOTE: "leoCanPromote",
    LEO_CAN_DEHOIST: "leoCanDehoist",
    // 'states' flags about current selection, for visibility and commands availability
    SELECTED_MARKED: "leoMarked", // no need for unmarked here, use !leoMarked
    SELECTED_CLONE: "leoCloned",
    SELECTED_DIRTY: "leoDirty",
    SELECTED_EMPTY: "leoEmpty",
    SELECTED_CHILD: "leoChild", // Has children
    SELECTED_ATFILE: "LeoAtFile", // Can be refreshed
    SELECTED_ROOT: "leoRoot", // ! Computed by hand
    // Statusbar Flag 'keybindings in effect'
    LEO_SELECTED: "leoObjectSelected", // keybindings "On": Outline or body has focus
    // Context Flags for 'when' clauses, used concatenated, for each outline node
    NODE_MARKED: "leoNodeMarked",  // Selected node is marked
    NODE_UNMARKED: "leoNodeUnmarked", // Selected node is unmarked (Needed for regexp)
    NODE_ATFILE: "leoNodeAtFile", // Selected node is an @file or @clean, etc...
    NODE_CLONED: "leoNodeCloned",
    NODE_ROOT: "leoNodeRoot",
    NODE_NOT_ROOT: "leoNodeNotRoot"
};

</t>
<t tx="felix.20201208215536.16">/**
 * All commands this expansion exposes (in package.json, contributes &gt; commands)
 */
public static COMMANDS = {
    // Leo Documents
    SET_OPENED_FILE: Constants.NAME + ".setOpenedFile",
    OPEN_FILE: Constants.NAME + ".openLeoFile", // sets focus on BODY
    RECENT_FILES: Constants.NAME + ".recentLeoFiles", // shows recent Leo files, opens one on selection
    SWITCH_FILE: Constants.NAME + ".switchLeoFile",
    NEW_FILE: Constants.NAME + ".newLeoFile",
    SAVE_FILE: Constants.NAME + ".saveLeoFile",
    SAVE_FILE_FO: Constants.NAME + ".saveLeoFileFromOutline",
    SAVE_AS_FILE: Constants.NAME + ".saveAsLeoFile",
    CLOSE_FILE: Constants.NAME + ".closeLeoFile",
    MINIBUFFER: Constants.NAME + ".minibuffer",
    // Outline Node User Interaction
    SELECT_NODE: Constants.NAME + ".selectTreeNode",
    OPEN_ASIDE: Constants.NAME + ".openAside", // selects and opens body splitting the workspace
    // Goto operations that always finish with focus in outline
    PAGE_UP: Constants.NAME + ".pageUp",
    PAGE_DOWN: Constants.NAME + ".pageDown",
    GOTO_FIRST_VISIBLE: Constants.NAME + ".gotoFirstVisible",
    GOTO_LAST_VISIBLE: Constants.NAME + ".gotoLastVisible",
    GOTO_LAST_SIBLING: Constants.NAME + ".gotoLastSibling",
    GOTO_NEXT_VISIBLE: Constants.NAME + ".gotoNextVisible",
    GOTO_PREV_VISIBLE: Constants.NAME + ".gotoPrevVisible",
    GOTO_NEXT_MARKED: Constants.NAME + ".gotoNextMarked",
    GOTO_NEXT_CLONE: Constants.NAME + ".gotoNextClone",
    GOTO_NEXT_CLONE_SELECTION: Constants.NAME + ".gotoNextCloneSelection",
    GOTO_NEXT_CLONE_SELECTION_FO: Constants.NAME + ".gotoNextCloneSelectionFromOutline",
    CONTRACT_OR_GO_LEFT: Constants.NAME + ".contractOrGoLeft",
    EXPAND_AND_GO_RIGHT: Constants.NAME + ".expandAndGoRight",
    // Leo Operations
    UNDO: Constants.NAME + ".undo", // From command Palette
    UNDO_FO: Constants.NAME + ".undoFromOutline", // from button, return focus on OUTLINE
    REDO: Constants.NAME + ".redo", // From command Palette
    REDO_FO: Constants.NAME + ".redoFromOutline", // from button, return focus on OUTLINE
    EXECUTE: Constants.NAME + ".executeScript",
    SHOW_BODY: Constants.NAME + ".showBody",
    SHOW_OUTLINE: Constants.NAME + ".showOutline",
    SHOW_LOG: Constants.NAME + ".showLogPane",
    SORT_CHILDREN: Constants.NAME + ".sortChildrenSelection",
    SORT_CHILDREN_FO: Constants.NAME + ".sortChildrenSelectionFromOutline",
    SORT_SIBLING: Constants.NAME + ".sortSiblingsSelection",
    SORT_SIBLING_FO: Constants.NAME + ".sortSiblingsSelectionFromOutline",
    CONTRACT_ALL: Constants.NAME + ".contractAll", // From command Palette
    CONTRACT_ALL_FO: Constants.NAME + ".contractAllFromOutline", // from button, return focus on OUTLINE
    // Commands from tree panel buttons or context: focus on OUTLINE
    MARK: Constants.NAME + ".mark",
    UNMARK: Constants.NAME + ".unmark",
    COPY: Constants.NAME + ".copyNode",
    CUT: Constants.NAME + ".cutNode",
    PASTE: Constants.NAME + ".pasteNode",
    PASTE_CLONE: Constants.NAME + ".pasteNodeAsClone",
    DELETE: Constants.NAME + ".delete",
    HEADLINE: Constants.NAME + ".editHeadline",
    MOVE_DOWN: Constants.NAME + ".moveOutlineDown",
    MOVE_LEFT: Constants.NAME + ".moveOutlineLeft",
    MOVE_RIGHT: Constants.NAME + ".moveOutlineRight",
    MOVE_UP: Constants.NAME + ".moveOutlineUp",
    INSERT: Constants.NAME + ".insertNode",
    CLONE: Constants.NAME + ".cloneNode",
    PROMOTE: Constants.NAME + ".promote",
    DEMOTE: Constants.NAME + ".demote",
    REFRESH_FROM_DISK: Constants.NAME + ".refreshFromDisk",
    // Commands from keyboard, while focus on BODY (command-palette returns to BODY for now)
    MARK_SELECTION: Constants.NAME + ".markSelection",
    UNMARK_SELECTION: Constants.NAME + ".unmarkSelection",
    COPY_SELECTION: Constants.NAME + ".copyNodeSelection", // Nothing to refresh/focus so no "FO" version
    CUT_SELECTION: Constants.NAME + ".cutNodeSelection",
    PASTE_SELECTION: Constants.NAME + ".pasteNodeAtSelection",
    PASTE_CLONE_SELECTION: Constants.NAME + ".pasteNodeAsCloneAtSelection",
    DELETE_SELECTION: Constants.NAME + ".deleteSelection",
    HEADLINE_SELECTION: Constants.NAME + ".editSelectedHeadline",
    MOVE_DOWN_SELECTION: Constants.NAME + ".moveOutlineDownSelection",
    MOVE_LEFT_SELECTION: Constants.NAME + ".moveOutlineLeftSelection",
    MOVE_RIGHT_SELECTION: Constants.NAME + ".moveOutlineRightSelection",
    MOVE_UP_SELECTION: Constants.NAME + ".moveOutlineUpSelection",
    INSERT_SELECTION: Constants.NAME + ".insertNodeSelection", // Can be interrupted
    INSERT_SELECTION_INTERRUPT: Constants.NAME + ".insertNodeSelectionInterrupt", // Interrupted version
    CLONE_SELECTION: Constants.NAME + ".cloneNodeSelection",
    PROMOTE_SELECTION: Constants.NAME + ".promoteSelection",
    DEMOTE_SELECTION: Constants.NAME + ".demoteSelection",
    REFRESH_FROM_DISK_SELECTION: Constants.NAME + ".refreshFromDiskSelection",
    // Commands from keyboard, while focus on OUTLINE (no need for COPY_SELECTION)
    MARK_SELECTION_FO: Constants.NAME + ".markSelectionFromOutline",
    UNMARK_SELECTION_FO: Constants.NAME + ".unmarkSelectionFromOutline",
    CUT_SELECTION_FO: Constants.NAME + ".cutNodeSelectionFromOutline",
    PASTE_SELECTION_FO: Constants.NAME + ".pasteNodeAtSelectionFromOutline",
    PASTE_CLONE_SELECTION_FO: Constants.NAME + ".pasteNodeAsCloneAtSelectionFromOutline",
    DELETE_SELECTION_FO: Constants.NAME + ".deleteSelectionFromOutline",
    HEADLINE_SELECTION_FO: Constants.NAME + ".editSelectedHeadlineFromOutline",
    MOVE_DOWN_SELECTION_FO: Constants.NAME + ".moveOutlineDownSelectionFromOutline",
    MOVE_LEFT_SELECTION_FO: Constants.NAME + ".moveOutlineLeftSelectionFromOutline",
    MOVE_RIGHT_SELECTION_FO: Constants.NAME + ".moveOutlineRightSelectionFromOutline",
    MOVE_UP_SELECTION_FO: Constants.NAME + ".moveOutlineUpSelectionFromOutline",
    INSERT_SELECTION_FO: Constants.NAME + ".insertNodeSelectionFromOutline",
    CLONE_SELECTION_FO: Constants.NAME + ".cloneNodeSelectionFromOutline",
    PROMOTE_SELECTION_FO: Constants.NAME + ".promoteSelectionFromOutline",
    DEMOTE_SELECTION_FO: Constants.NAME + ".demoteSelectionFromOutline",
    REFRESH_FROM_DISK_SELECTION_FO: Constants.NAME + ".refreshFromDiskSelectionFromOutline",
    HOIST: Constants.NAME + ".hoistNode",
    HOIST_SELECTION: Constants.NAME + ".hoistSelection",
    HOIST_SELECTION_FO: Constants.NAME + ".hoistSelectionFromOutline",
    DEHOIST: Constants.NAME + ".deHoist",
    DEHOIST_FO: Constants.NAME + ".deHoistFromOutline",
    EXTRACT: Constants.NAME + ".extract",
    EXTRACT_NAMES: Constants.NAME + ".extractNames",
    COPY_MARKED: Constants.NAME + ".copyMarked",
    DIFF_MARKED_NODES: Constants.NAME + ".diffMarkedNodes",
    MARK_CHANGED_ITEMS: Constants.NAME + ".markChangedItems",
    MARK_SUBHEADS: Constants.NAME + ".markSubheads",
    UNMARK_ALL: Constants.NAME + ".unmarkAll",
    CLONE_MARKED_NODES: Constants.NAME + ".cloneMarkedNodes",
    DELETE_MARKED_NODES: Constants.NAME + ".deleteMarkedNodes",
    MOVE_MARKED_NODES: Constants.NAME + ".moveMarkedNodes",
    CLONE_FIND_ALL: Constants.NAME + ".cloneFindAll",
    CLONE_FIND_ALL_FLATTENED: Constants.NAME + ".cloneFindAllFlattened",
    CLONE_FIND_MARKED: Constants.NAME + ".cloneFindMarked",
    CLONE_FIND_FLATTENED_MARKED: Constants.NAME + ".cloneFindFlattenedMarked",
};

</t>
<t tx="felix.20201208215536.2">/**
 * Text and numeric constants used throughout leojs
 */
export class Constants {

    @others
}
</t>
<t tx="felix.20201208215536.3">public static NAME: string = "leojs";

public static TREEVIEW_EXPLORER_ID: string = "leojsExplorer";

public static FILE_EXTENSION: string = "leo";

public static URI_LEO_SCHEME: string = "leo";

public static URI_FILE_SCHEME: string = "file";

public static URI_SCHEME_HEADER: string = "leo:/";

public static FILE_OPEN_FILTER_MESSAGE: string = "Leo Files";

public static UNTITLED_FILE_NAME: string = "untitled";

public static RECENT_FILES_KEY: string = "leoRecentFiles";

public static LAST_FILES_KEY: string = "leoLastFiles";

public static STATES_DEBOUNCE_DELAY: number = 100;

</t>
<t tx="felix.20201208215536.4">/**
 * Strings used in the workbench interface panels (not for messages or dialogs)
 */
public static GUI = {
    ICON_LIGHT_DOCUMENT: "resources/light/document.svg",
    ICON_DARK_DOCUMENT: "resources/dark/document.svg",
    ICON_LIGHT_DOCUMENT_DIRTY: "resources/light/document-dirty.svg",
    ICON_DARK_DOCUMENT_DIRTY: "resources/dark/document-dirty.svg",
    ICON_LIGHT_BUTTON: "resources/light/button.svg",
    ICON_DARK_BUTTON: "resources/dark/button.svg",
    ICON_LIGHT_BUTTON_ADD: "resources/light/button-add.svg",
    ICON_DARK_BUTTON_ADD: "resources/dark/button-add.svg",
    ICON_LIGHT_PATH: "resources/light/box",
    ICON_DARK_PATH: "resources/dark/box",
    ICON_FILE_EXT: ".svg",
    STATUSBAR_INDICATOR: "$(keyboard) ",
    QUICK_OPEN_LEO_COMMANDS: "&gt;leo: ",
    EXPLORER_TREEVIEW_PREFIX: "LEO ",
    TREEVIEW_TITLE: "OUTLINE",
    BODY_TITLE: "LEO BODY",
    LOG_PANE_TITLE: "Leo Log Window"
};

</t>
<t tx="felix.20201208215536.5">/**
 * Basic user messages strings for messages and dialogs
 */
public static USER_MESSAGES = {
    SAVE_CHANGES: "Save changes to",
    BEFORE_CLOSING: "before closing?",
    CANCEL: "Cancel",
    OPEN_WITH_LEOJS: "Open this Leo file with leojs?",
    OPEN_RECENT_FILE: "Open Recent Leo File",
    RIGHT_CLICK_TO_OPEN: "Right-click Leo files to open with leojs",
    FILE_ALREADY_OPENED: "Leo file already opened",
    CHOOSE_OPENED_FILE: "Select an opened Leo File",
    FILE_NOT_OPENED: "No files opened.",
    PROMPT_EDIT_HEADLINE: "Edit Headline",
    PROMPT_INSERT_NODE: "Insert Node",
    DEFAULT_HEADLINE: "New Headline",
    CLOSE_ERROR: "Cannot close: No files opened.",
    YES: "Yes",
    NO: "No",
    YES_ALL: "Yes to all",
    NO_ALL: "No to all",
    MINIBUFFER_PROMPT: "Minibuffer Full Command",
    CHANGES_DETECTED: "Changes to external files were detected.",
    REFRESHED: " Nodes refreshed.", // with voluntary leading space
    IGNORED: " They were ignored.", // with voluntary leading space
    TOO_FAST: "Leo is busy! " // with voluntary trailing space
};

</t>
<t tx="felix.20201208215536.6">/**
 * Choices offered when about to lose current changes to a Leo Document
 */
public static ASK_SAVE_CHANGES_BUTTONS: vscode.MessageItem[] = [
    {
        title: Constants.USER_MESSAGES.YES,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.NO,
        isCloseAffordance: false
    },
    {
        title: Constants.USER_MESSAGES.CANCEL,
        isCloseAffordance: true
    }
];

</t>
<t tx="felix.20201208215613.1">// - `src/extension.ts` - this is the main file where you will provide the implementation of your command.
//   - The file exports one function, `activate`, which is called the very first time your extension is activated (in this case by executing the command).
//     Inside the `activate` function we call `registerCommand`.
//   - We pass the function containing the implementation of the command as the second parameter to `registerCommand`.

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "leojs" is now active!');

	const jsOutlineProvider = new JsOutlineProvider(context);
	vscode.window.registerTreeDataProvider('leoJsExplorer', jsOutlineProvider);
	vscode.commands.executeCommand('setContext', 'leoReady', true);
	vscode.commands.executeCommand('setContext', 'leoTreeOpened', true);

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('leojs.test', () =&gt; {
		// The code you place here will be executed every time your command is executed

		// Display a message box to the user
		vscode.window.showInformationMessage('Hello World from leojs!');
	});

	context.subscriptions.push(disposable);
}

</t>
<t tx="felix.20201208215619.1">// this method is called when your extension is deactivated
export function deactivate() { }

</t>
<t tx="felix.20201208220441.1">"commands": [
  {
    "command": "leojs.test",
    "category": "Leo",
    "title": "Test leojs"
  },
  {
    "command": "leojs.executeScript",
    "category": "Leo",
    "title": "Execute Script"
  },
  {
    "command": "leojs.minibuffer",
    "category": "Leo",
    "title": "Minibuffer"
  },
  {
    "command": "leojs.removeButton",
    "category": "Leo",
    "title": "Remove Button"
  },
  {
    "command": "leojs.showBody",
    "category": "Leo",
    "title": "Focus to Body"
  },
  {
    "command": "leojs.showOutline",
    "category": "Leo",
    "title": "Focus to Tree"
  },
  {
    "command": "leojs.showLogPane",
    "category": "Leo",
    "title": "Show Log Pane"
  },
  {
    "command": "leojs.openLeoFile",
    "title": "Open Leo File",
    "category": "Leo",
    "icon": {
      "light": "resources/light/folder.svg",
      "dark": "resources/dark/folder.svg"
    }
  },
  {
    "command": "leojs.recentLeoFiles",
    "category": "Leo",
    "title": "Recent Files"
  },
  {
    "command": "leojs.switchLeoFile",
    "title": "Switch Leo File",
    "category": "Leo",
    "icon": {
      "light": "resources/light/switch.svg",
      "dark": "resources/dark/switch.svg"
    }
  },
  {
    "command": "leojs.newLeoFile",
    "title": "New Leo File",
    "category": "Leo",
    "icon": {
      "light": "resources/light/new-file.svg",
      "dark": "resources/dark/new-file.svg"
    }
  },
  {
    "command": "leojs.closeLeoFile",
    "title": "Close Leo File",
    "category": "Leo",
    "icon": {
      "light": "resources/light/close.svg",
      "dark": "resources/dark/close.svg"
    }
  },
  {
    "command": "leojs.saveLeoFile",
    "category": "Leo",
    "title": "Save Leo File",
    "icon": {
      "light": "resources/light/save.svg",
      "dark": "resources/dark/save.svg"
    }
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "category": "Leo",
    "title": "Save Leo File",
    "icon": {
      "light": "resources/light/save.svg",
      "dark": "resources/dark/save.svg"
    }
  },
  {
    "command": "leojs.saveAsLeoFile",
    "category": "Leo",
    "title": "Save Leo File as...",
    "icon": {
      "light": "resources/light/save-as.svg",
      "dark": "resources/dark/save-as.svg"
    }
  },
  {
    "command": "leojs.refreshFromDisk",
    "category": "Leo",
    "title": "Refresh from Disk"
  },
  {
    "command": "leojs.refreshFromDiskSelection",
    "category": "Leo",
    "title": "Refresh from Disk"
  },
  {
    "command": "leojs.refreshFromDiskSelectionFromOutline",
    "category": "Leo",
    "title": "Refresh from Disk"
  },
  {
    "command": "leojs.gitDiff",
    "category": "Leo",
    "title": "Git Diff"
  },
  {
    "command": "leojs.selectTreeNode",
    "category": "Leo",
    "title": "Select Node"
  },
  {
    "command": "leojs.openAside",
    "category": "Leo",
    "title": "Open to the Side"
  },
  {
    "command": "leojs.contractAll",
    "category": "Leo",
    "title": "Contract All",
    "icon": {
      "light": "resources/light/collapse.svg",
      "dark": "resources/dark/collapse.svg"
    }
  },
  {
    "command": "leojs.contractAllFromOutline",
    "category": "Leo",
    "title": "Contract All",
    "icon": {
      "light": "resources/light/collapse.svg",
      "dark": "resources/dark/collapse.svg"
    }
  },
  {
    "command": "leojs.editHeadline",
    "category": "Leo",
    "title": "Edit Headline",
    "icon": {
      "light": "resources/light/edit.svg",
      "dark": "resources/dark/edit.svg"
    }
  },
  {
    "command": "leojs.editSelectedHeadline",
    "category": "Leo",
    "title": "Edit Headline"
  },
  {
    "command": "leojs.editSelectedHeadlineFromOutline",
    "category": "Leo",
    "title": "Edit Headline"
  },
  {
    "command": "leojs.mark",
    "category": "Leo",
    "title": "Mark",
    "icon": {
      "light": "resources/light/mark.svg",
      "dark": "resources/dark/mark.svg"
    }
  },
  {
    "command": "leojs.markSelection",
    "category": "Leo",
    "title": "Mark"
  },
  {
    "command": "leojs.markSelectionFromOutline",
    "category": "Leo",
    "title": "Mark"
  },
  {
    "command": "leojs.unmark",
    "category": "Leo",
    "title": "Unmark",
    "icon": {
      "light": "resources/light/unmark.svg",
      "dark": "resources/dark/unmark.svg"
    }
  },
  {
    "command": "leojs.unmarkSelection",
    "category": "Leo",
    "title": "Unmark"
  },
  {
    "command": "leojs.unmarkSelectionFromOutline",
    "category": "Leo",
    "title": "Unmark"
  },
  {
    "command": "leojs.copyNode",
    "category": "Leo",
    "title": "Copy Node",
    "icon": {
      "light": "resources/light/clipboard.svg",
      "dark": "resources/dark/clipboard.svg"
    }
  },
  {
    "command": "leojs.copyNodeSelection",
    "category": "Leo",
    "title": "Copy Node"
  },
  {
    "command": "leojs.cutNode",
    "category": "Leo",
    "title": "Cut Node"
  },
  {
    "command": "leojs.cutNodeSelection",
    "category": "Leo",
    "title": "Cut Node"
  },
  {
    "command": "leojs.cutNodeSelectionFromOutline",
    "category": "Leo",
    "title": "Cut Node"
  },
  {
    "command": "leojs.pasteNode",
    "category": "Leo",
    "title": "Paste Node"
  },
  {
    "command": "leojs.pasteNodeAtSelection",
    "category": "Leo",
    "title": "Paste Node"
  },
  {
    "command": "leojs.pasteNodeAtSelectionFromOutline",
    "category": "Leo",
    "title": "Paste Node"
  },
  {
    "command": "leojs.pasteNodeAsClone",
    "category": "Leo",
    "title": "Paste Node as Clone"
  },
  {
    "command": "leojs.pasteNodeAsCloneAtSelection",
    "category": "Leo",
    "title": "Paste Node as Clone"
  },
  {
    "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
    "category": "Leo",
    "title": "Paste Node as Clone"
  },
  {
    "command": "leojs.delete",
    "category": "Leo",
    "title": "Delete",
    "icon": {
      "light": "resources/light/close.svg",
      "dark": "resources/dark/close.svg"
    }
  },
  {
    "command": "leojs.deleteSelection",
    "category": "Leo",
    "title": "Delete Node"
  },
  {
    "command": "leojs.deleteSelectionFromOutline",
    "category": "Leo",
    "title": "Delete Node"
  },
  {
    "command": "leojs.extract",
    "category": "Leo",
    "title": "Extract"
  },
  {
    "command": "leojs.extractNames",
    "category": "Leo",
    "title": "Extract Names"
  },
  {
    "command": "leojs.moveOutlineDown",
    "category": "Leo",
    "title": "Move Outline Down",
    "icon": {
      "light": "resources/light/arrow-down.svg",
      "dark": "resources/dark/arrow-down.svg"
    }
  },
  {
    "command": "leojs.moveOutlineDownSelection",
    "category": "Leo",
    "title": "Move Outline Down"
  },
  {
    "command": "leojs.moveOutlineDownSelectionFromOutline",
    "category": "Leo",
    "title": "Move Outline Down"
  },
  {
    "command": "leojs.moveOutlineLeft",
    "category": "Leo",
    "title": "Move Outline Left",
    "icon": {
      "light": "resources/light/arrow-left.svg",
      "dark": "resources/dark/arrow-left.svg"
    }
  },
  {
    "command": "leojs.moveOutlineLeftSelection",
    "category": "Leo",
    "title": "Move Outline Left"
  },
  {
    "command": "leojs.moveOutlineLeftSelectionFromOutline",
    "category": "Leo",
    "title": "Move Outline Left"
  },
  {
    "command": "leojs.moveOutlineRight",
    "category": "Leo",
    "title": "Move Outline Right",
    "icon": {
      "light": "resources/light/arrow-right.svg",
      "dark": "resources/dark/arrow-right.svg"
    }
  },
  {
    "command": "leojs.moveOutlineRightSelection",
    "category": "Leo",
    "title": "Move Outline Right"
  },
  {
    "command": "leojs.moveOutlineRightSelectionFromOutline",
    "category": "Leo",
    "title": "Move Outline Right"
  },
  {
    "command": "leojs.moveOutlineUp",
    "category": "Leo",
    "title": "Move Outline Up",
    "icon": {
      "light": "resources/light/arrow-up.svg",
      "dark": "resources/dark/arrow-up.svg"
    }
  },
  {
    "command": "leojs.moveOutlineUpSelection",
    "category": "Leo",
    "title": "Move Outline Up"
  },
  {
    "command": "leojs.moveOutlineUpSelectionFromOutline",
    "category": "Leo",
    "title": "Move Outline Up"
  },
  {
    "command": "leojs.insertNode",
    "category": "Leo",
    "title": "Insert Node",
    "icon": {
      "light": "resources/light/plus.svg",
      "dark": "resources/dark/plus.svg"
    }
  },
  {
    "command": "leojs.insertNodeSelection",
    "category": "Leo",
    "title": "Insert Node",
    "icon": {
      "light": "resources/light/plus.svg",
      "dark": "resources/dark/plus.svg"
    }
  },
  {
    "command": "leojs.insertNodeSelectionFromOutline",
    "category": "Leo",
    "title": "Insert Node",
    "icon": {
      "light": "resources/light/plus.svg",
      "dark": "resources/dark/plus.svg"
    }
  },
  {
    "command": "leojs.insertNodeSelectionInterrupt",
    "category": "Leo",
    "title": "Insert Node",
    "icon": {
      "light": "resources/light/plus.svg",
      "dark": "resources/dark/plus.svg"
    }
  },
  {
    "command": "leojs.cloneNode",
    "category": "Leo",
    "title": "Clone Node",
    "icon": {
      "light": "resources/light/link.svg",
      "dark": "resources/dark/link.svg"
    }
  },
  {
    "command": "leojs.cloneNodeSelection",
    "category": "Leo",
    "title": "Clone Node"
  },
  {
    "command": "leojs.cloneNodeSelectionFromOutline",
    "category": "Leo",
    "title": "Clone Node"
  },
  {
    "command": "leojs.promote",
    "category": "Leo",
    "title": "Promote Children"
  },
  {
    "command": "leojs.promoteSelection",
    "category": "Leo",
    "title": "Promote Children"
  },
  {
    "command": "leojs.promoteSelectionFromOutline",
    "category": "Leo",
    "title": "Promote Children"
  },
  {
    "command": "leojs.demote",
    "category": "Leo",
    "title": "Demote Siblings"
  },
  {
    "command": "leojs.demoteSelection",
    "category": "Leo",
    "title": "Demote Siblings"
  },
  {
    "command": "leojs.demoteSelectionFromOutline",
    "category": "Leo",
    "title": "Demote Siblings"
  },
  {
    "command": "leojs.sortChildrenSelection",
    "category": "Leo",
    "title": "Sort Children"
  },
  {
    "command": "leojs.sortChildrenSelectionFromOutline",
    "category": "Leo",
    "title": "Sort Children"
  },
  {
    "command": "leojs.sortSiblingsSelection",
    "category": "Leo",
    "title": "Sort Siblings"
  },
  {
    "command": "leojs.sortSiblingsSelectionFromOutline",
    "category": "Leo",
    "title": "Sort Siblings"
  },
  {
    "command": "leojs.gotoFirstVisible",
    "category": "Leo",
    "title": "Goto First Visible"
  },
  {
    "command": "leojs.gotoLastVisible",
    "category": "Leo",
    "title": "Goto Last Visible"
  },
  {
    "command": "leojs.pageUp",
    "category": "Leo",
    "title": "Page Up"
  },
  {
    "command": "leojs.pageDown",
    "category": "Leo",
    "title": "Page Down"
  },
  {
    "command": "leojs.gotoLastSibling",
    "category": "Leo",
    "title": "Goto Last Sibling"
  },
  {
    "command": "leojs.gotoNextVisible",
    "category": "Leo",
    "title": "Goto Next Visible"
  },
  {
    "command": "leojs.gotoPrevVisible",
    "category": "Leo",
    "title": "Goto Prev Visible"
  },
  {
    "command": "leojs.contractOrGoLeft",
    "category": "Leo",
    "title": "Contract Or Go Left"
  },
  {
    "command": "leojs.expandAndGoRight",
    "category": "Leo",
    "title": "Expand And Go Right"
  },
  {
    "command": "leojs.hoistNode",
    "category": "Leo",
    "title": "Hoist"
  },
  {
    "command": "leojs.hoistSelection",
    "category": "Leo",
    "title": "Hoist"
  },
  {
    "command": "leojs.hoistSelectionFromOutline",
    "category": "Leo",
    "title": "Hoist"
  },
  {
    "command": "leojs.deHoist",
    "category": "Leo",
    "title": "De-Hoist",
    "icon": {
      "light": "resources/light/dehoist.svg",
      "dark": "resources/dark/dehoist.svg"
    }
  },
  {
    "command": "leojs.deHoistFromOutline",
    "category": "Leo",
    "title": "De-Hoist",
    "icon": {
      "light": "resources/light/dehoist.svg",
      "dark": "resources/dark/dehoist.svg"
    }
  },
  {
    "command": "leojs.undo",
    "category": "Leo",
    "title": "Undo",
    "icon": {
      "light": "resources/light/undo.svg",
      "dark": "resources/dark/undo.svg"
    }
  },
  {
    "command": "leojs.undoFromOutline",
    "category": "Leo",
    "title": "Undo",
    "icon": {
      "light": "resources/light/undo.svg",
      "dark": "resources/dark/undo.svg"
    }
  },
  {
    "command": "leojs.redo",
    "category": "Leo",
    "title": "Redo",
    "icon": {
      "light": "resources/light/redo.svg",
      "dark": "resources/dark/redo.svg"
    }
  },
  {
    "command": "leojs.redoFromOutline",
    "category": "Leo",
    "title": "Redo",
    "icon": {
      "light": "resources/light/redo.svg",
      "dark": "resources/dark/redo.svg"
    }
  },
  {
    "command": "leojs.cloneFindAll",
    "category": "Leo",
    "title": "Clone Find All"
  },
  {
    "command": "leojs.cloneFindAllFlattened",
    "category": "Leo",
    "title": "Clone Find All Flattened"
  },
  {
    "command": "leojs.cloneFindMarked",
    "category": "Leo",
    "title": "Clone Find Marked"
  },
  {
    "command": "leojs.cloneFindFlattenedMarked",
    "category": "Leo",
    "title": "cffm - Clone Find Flattened Marked"
  },
  {
    "command": "leojs.copyMarked",
    "category": "Leo",
    "title": "Copy Marked"
  },
  {
    "command": "leojs.diffMarkedNodes",
    "category": "Leo",
    "title": "Diff Marked Nodes"
  },
  {
    "command": "leojs.gotoNextMarked",
    "category": "Leo",
    "title": "Goto Next Marked"
  },
  {
    "command": "leojs.gotoNextClone",
    "category": "Leo",
    "title": "Goto Next Clone"
  },
  {
    "command": "leojs.gotoNextCloneSelection",
    "category": "Leo",
    "title": "Goto Next Clone"
  },
  {
    "command": "leojs.gotoNextCloneSelectionFromOutline",
    "category": "Leo",
    "title": "Goto Next Clone"
  },
  {
    "command": "leojs.markChangedItems",
    "category": "Leo",
    "title": "Mark Changed Items"
  },
  {
    "command": "leojs.markSubheads",
    "category": "Leo",
    "title": "Mark Subheads"
  },
  {
    "command": "leojs.unmarkAll",
    "category": "Leo",
    "title": "Unmark All"
  },
  {
    "command": "leojs.cloneMarkedNodes",
    "category": "Leo",
    "title": "Clone Marked Nodes"
  },
  {
    "command": "leojs.deleteMarkedNodes",
    "category": "Leo",
    "title": "Delete Marked Nodes"
  },
  {
    "command": "leojs.moveMarkedNodes",
    "category": "Leo",
    "title": "Move Marked Nodes"
  }
],
</t>
<t tx="felix.20201208221211.1">"viewsWelcome": [
  {
    "view": "leoJsExplorer",
    "contents": "[Open Leo File](command:leojs.openLeoFile)\n[Create Leo File](command:leojs.openLeoFile)",
    "when": "!leoTreeOpened"
  }
],
</t>
<t tx="felix.20201208221448.1">"menus": {
  @others
},
</t>
<t tx="felix.20201208221652.1">"commandPalette": [
  {
    "command": "leojs.executeScript",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.minibuffer",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.showLogPane",
    "when": "leoReady"
  },
  {
    "command": "leojs.openLeoFile",
    "when": "leoReady"
  },
  {
    "command": "leojs.recentLeoFiles",
    "when": "leoReady"
  },
  {
    "command": "leojs.switchLeoFile",
    "when": "leoReady &amp;&amp; leoTreeOpened"
  },
  {
    "command": "leojs.newLeoFile",
    "when": "leoReady"
  },
  {
    "command": "leojs.closeLeoFile",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.saveLeoFile",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.saveAsLeoFile",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.refreshFromDiskSelection",
    "when": "leoTreeOpened &amp;&amp; leoAtFile"
  },
  {
    "command": "leojs.gitDiff",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.contractAll",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.editSelectedHeadline",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.markSelection",
    "when": "leoTreeOpened &amp;&amp; !leoMarked"
  },
  {
    "command": "leojs.unmarkSelection",
    "when": "leoTreeOpened &amp;&amp; leoMarked"
  },
  {
    "command": "leojs.copyNodeSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cutNodeSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.pasteNodeAtSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.pasteNodeAsCloneAtSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.deleteSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.moveOutlineDownSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.moveOutlineLeftSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.moveOutlineRightSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.moveOutlineUpSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.insertNodeSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneNodeSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.promoteSelection",
    "when": "leoTreeOpened &amp;&amp; leoCanPromote"
  },
  {
    "command": "leojs.demoteSelection",
    "when": "leoTreeOpened &amp;&amp; leoCanDemote"
  },
  {
    "command": "leojs.sortChildrenSelection",
    "when": "leoTreeOpened &amp;&amp; leoChild"
  },
  {
    "command": "leojs.sortChildrenSelectionFromOutline",
    "when": "leoTreeOpened &amp;&amp; leoChild"
  },
  {
    "command": "leojs.sortSiblingsSelection",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.gotoNextMarked",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.gotoNextCloneSelection",
    "when": "leoTreeOpened &amp;&amp; leoCloned"
  },
  {
    "command": "leojs.hoistSelection",
    "when": "leoTreeOpened &amp;&amp; !leoRoot"
  },
  {
    "command": "leojs.deHoist",
    "when": "leoTreeOpened &amp;&amp; leoCanDehoist"
  },
  {
    "command": "leojs.undo",
    "when": "leoTreeOpened &amp;&amp; leoCanUndo"
  },
  {
    "command": "leojs.redo",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneFindAll",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneFindAllFlattened",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneFindMarked",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneFindFlattenedMarked",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.extract",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.extractNames",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.copyMarked",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.diffMarkedNodes",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.markChangedItems",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.markSubheads",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.unmarkAll",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.cloneMarkedNodes",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.deleteMarkedNodes",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.moveMarkedNodes",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.test",
    "when": "false"
  },
  {
    "command": "leojs.removeButton",
    "when": "false"
  },
  {
    "command": "leojs.showBody",
    "when": "false"
  },
  {
    "command": "leojs.showOutline",
    "when": "false"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.refreshFromDisk",
    "when": "false"
  },
  {
    "command": "leojs.refreshFromDiskSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.selectTreeNode",
    "when": "false"
  },
  {
    "command": "leojs.openAside",
    "when": "false"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.editHeadline",
    "when": "false"
  },
  {
    "command": "leojs.editSelectedHeadlineFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.mark",
    "when": "false"
  },
  {
    "command": "leojs.markSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.unmark",
    "when": "false"
  },
  {
    "command": "leojs.unmarkSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.copyNode",
    "when": "false"
  },
  {
    "command": "leojs.cutNode",
    "when": "false"
  },
  {
    "command": "leojs.cutNodeSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.pasteNode",
    "when": "false"
  },
  {
    "command": "leojs.pasteNodeAtSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.pasteNodeAsClone",
    "when": "false"
  },
  {
    "command": "leojs.pasteNodeAsCloneAtSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.delete",
    "when": "false"
  },
  {
    "command": "leojs.deleteSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineDown",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineDownSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineLeft",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineLeftSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineRight",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineRightSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineUp",
    "when": "false"
  },
  {
    "command": "leojs.moveOutlineUpSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.insertNode",
    "when": "false"
  },
  {
    "command": "leojs.insertNodeSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.insertNodeSelectionInterrupt",
    "when": "false"
  },
  {
    "command": "leojs.cloneNode",
    "when": "false"
  },
  {
    "command": "leojs.cloneNodeSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.promote",
    "when": "false"
  },
  {
    "command": "leojs.promoteSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.demote",
    "when": "false"
  },
  {
    "command": "leojs.demoteSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.sortSiblingsSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.gotoNextClone",
    "when": "false"
  },
  {
    "command": "leojs.gotoNextCloneSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.gotoFirstVisible",
    "when": "false"
  },
  {
    "command": "leojs.gotoLastVisible",
    "when": "false"
  },
  {
    "command": "leojs.gotoLastSibling",
    "when": "false"
  },
  {
    "command": "leojs.gotoNextVisible",
    "when": "false"
  },
  {
    "command": "leojs.gotoPrevVisible",
    "when": "false"
  },
  {
    "command": "leojs.contractOrGoLeft",
    "when": "false"
  },
  {
    "command": "leojs.expandAndGoRight",
    "when": "false"
  },
  {
    "command": "leojs.pageUp",
    "when": "false"
  },
  {
    "command": "leojs.pageDown",
    "when": "false"
  },
  {
    "command": "leojs.hoistNode",
    "when": "false"
  },
  {
    "command": "leojs.hoistSelectionFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.deHoistFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.undoFromOutline",
    "when": "false"
  },
  {
    "command": "leojs.redoFromOutline",
    "when": "false"
  }
],
</t>
<t tx="felix.20201208221716.1">"explorer/context": [
  {
    "command": "leojs.openLeoFile",
    "when": "resourceScheme == file &amp;&amp; resourceExtname == .leo",
    "group": "navigation@1"
  }
],
</t>
<t tx="felix.20201208221809.1">"view/title": [
  {
    "command": "leojs.openLeoFile",
    "when": "view =~ /leoJs/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.newLeoFile",
    "when": "view =~ /leoJs/ &amp;&amp; leoReady",
    "group": "navigation@1"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoTreeTitled &amp;&amp; leoChanged",
    "group": "navigation@2"
  },
  {
    "command": "leojs.saveAsLeoFile",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; !leoTreeTitled",
    "group": "navigation@2"
  },
  {
    "command": "leojs.undoFromOutline",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanUndo",
    "group": "navigation@3"
  },
  {
    "command": "leojs.redoFromOutline",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanRedo",
    "group": "navigation@4"
  },
  {
    "command": "leojs.deHoistFromOutline",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened &amp;&amp; leoCanDehoist",
    "group": "navigation@5"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "when": "view =~ /leoJs/ &amp;&amp; leoTreeOpened",
    "group": "navigation@6"
  }
],
</t>
<t tx="felix.20201208221847.1">"view/item/context": [
  {
    "command": "leojs.editHeadline",
    "when": "showEditOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@1"
  },
  {
    "command": "leojs.insertNode",
    "when": "showAddOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@2"
  },
  {
    "command": "leojs.moveOutlineDown",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineLeft",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineRight",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.moveOutlineUp",
    "when": "showArrowsOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@3"
  },
  {
    "command": "leojs.copyNode",
    "when": "showCopyOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@4"
  },
  {
    "command": "leojs.cloneNode",
    "when": "showCloneOnNodes &amp;&amp; viewItem =~ /leoNode/",
    "group": "inline@4"
  },
  {
    "command": "leojs.mark",
    "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeUnmarked/",
    "group": "inline@5"
  },
  {
    "command": "leojs.unmark",
    "when": "showMarkOnNodes &amp;&amp; viewItem =~ /leoNodeMarked/",
    "group": "inline@5"
  },
  {
    "command": "leojs.openAside",
    "when": "showOpenAside &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext1@1"
  },
  {
    "command": "leojs.hoistNode",
    "when": "viewItem =~ /leoNodeNotRoot/",
    "group": "leoNodeContext1@2"
  },
  {
    "command": "leojs.deHoist",
    "when": "leoCanDehoist &amp;&amp; viewItem =~ /leoNodeRoot/",
    "group": "leoNodeContext1@2"
  },
  {
    "command": "leojs.refreshFromDisk",
    "when": "viewItem =~ /leoNodeAtFile/",
    "group": "leoNodeContext1@3"
  },
  {
    "command": "leojs.mark",
    "when": "viewItem =~ /leoNodeUnmarked/",
    "group": "leoNodeContext2@1"
  },
  {
    "command": "leojs.unmark",
    "when": "viewItem =~ /leoNodeMarked/",
    "group": "leoNodeContext2@2"
  },
  {
    "command": "leojs.copyNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@3"
  },
  {
    "command": "leojs.cutNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@4"
  },
  {
    "command": "leojs.pasteNode",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@5"
  },
  {
    "command": "leojs.pasteNodeAsClone",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@6"
  },
  {
    "command": "leojs.delete",
    "when": "viewItem =~ /leoNode/",
    "group": "leoNodeContext2@7"
  },
  {
    "command": "leojs.insertNode",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext3@1"
  },
  {
    "command": "leojs.cloneNode",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNode/",
    "group": "leoNodeContext3@2"
  },
  {
    "command": "leojs.gotoNextClone",
    "when": "leoTreeOpened &amp;&amp; viewItem =~ /leoNodeCloned/",
    "group": "leoNodeContext3@3"
  }
]
</t>
<t tx="felix.20201208221945.1">"keybindings": [
  {
    "command": "leojs.executeScript",
    "key": "ctrl+b",
    "mac": "cmd+b",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.executeScript",
    "key": "ctrl+b",
    "mac": "cmd+b",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.minibuffer",
    "key": "alt+x",
    "when": "leoTreeOpened"
  },
  {
    "command": "leojs.showOutline",
    "key": "alt+t",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.showOutline",
    "key": "ctrl+t",
    "mac": "cmd+t",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.showBody",
    "key": "ctrl+t",
    "mac": "cmd+t",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "alt+d",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "tab",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.showBody",
    "key": "enter",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.saveLeoFileFromOutline",
    "key": "ctrl+s",
    "mac": "cmd+s",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments/"
  },
  {
    "command": "leojs.saveLeoFile",
    "key": "ctrl+s",
    "mac": "cmd+s",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.contractAll",
    "key": "alt+-",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.contractAllFromOutline",
    "key": "alt+-",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.editSelectedHeadline",
    "key": "ctrl+h",
    "mac": "cmd+h",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.editSelectedHeadlineFromOutline",
    "key": "ctrl+h",
    "mac": "cmd+h",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.markSelection",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.markSelectionFromOutline",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; !leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.unmarkSelection",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.unmarkSelectionFromOutline",
    "key": "ctrl+m",
    "mac": "cmd+m",
    "when": "leoTreeOpened &amp;&amp; leoMarked &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.extract",
    "key": "ctrl+shift+d",
    "mac": "cmd+shift+d",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.extract",
    "key": "ctrl+shift+d",
    "mac": "cmd+shift+d",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.extractNames",
    "key": "ctrl+shift+n",
    "mac": "cmd++shift+n",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.extractNames",
    "key": "ctrl+shift+n",
    "mac": "cmd+shift+n",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineDownSelection",
    "key": "ctrl+d",
    "mac": "cmd+d",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineDownSelection",
    "key": "shift+alt+down",
    "mac": "shift+alt+down",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineDownSelectionFromOutline",
    "key": "ctrl+d",
    "mac": "cmd+d",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineDownSelectionFromOutline",
    "key": "shift+down",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineDownSelectionFromOutline",
    "key": "shift+alt+down",
    "mac": "shift+alt+down",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineLeftSelection",
    "key": "ctrl+l",
    "mac": "cmd+l",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineLeftSelection",
    "key": "shift+alt+left",
    "mac": "shift+alt+left",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineLeftSelectionFromOutline",
    "key": "ctrl+l",
    "mac": "cmd+l",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineLeftSelectionFromOutline",
    "key": "shift+left",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineLeftSelectionFromOutline",
    "key": "shift+alt+left",
    "mac": "shift+alt+left",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineRightSelection",
    "key": "ctrl+r",
    "mac": "cmd+r",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineRightSelection",
    "key": "shift+alt+right",
    "mac": "shift+alt+right",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineRightSelectionFromOutline",
    "key": "ctrl+r",
    "mac": "cmd+r",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineRightSelectionFromOutline",
    "key": "shift+right",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineRightSelectionFromOutline",
    "key": "shift+alt+right",
    "mac": "shift+alt+right",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineUpSelection",
    "key": "ctrl+u",
    "mac": "cmd+u",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineUpSelection",
    "key": "shift+alt+up",
    "mac": "shift+alt+up",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.moveOutlineUpSelectionFromOutline",
    "key": "ctrl+u",
    "mac": "cmd+u",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineUpSelectionFromOutline",
    "key": "shift+up",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.moveOutlineUpSelectionFromOutline",
    "key": "shift+alt+up",
    "mac": "shift+alt+up",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.sortSiblingsSelection",
    "key": "alt+a",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.sortSiblingsSelectionFromOutline",
    "key": "alt+a",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.promoteSelection",
    "key": "ctrl+[BracketLeft]",
    "win": "ctrl+oem_4",
    "linux": "ctrl+[",
    "mac": "cmd+[BracketLeft]",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.promoteSelectionFromOutline",
    "key": "ctrl+[BracketLeft]",
    "win": "ctrl+oem_4",
    "linux": "ctrl+[",
    "mac": "cmd+[BracketLeft]",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.demoteSelection",
    "key": "ctrl+[BracketRight]",
    "win": "ctrl+oem_6",
    "linux": "ctrl+]",
    "mac": "cmd+[BracketRight]",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.demoteSelectionFromOutline",
    "key": "ctrl+[BracketRight]",
    "win": "ctrl+oem_6",
    "linux": "ctrl+]",
    "mac": "cmd+[BracketRight]",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.insertNodeSelection",
    "key": "ctrl+i",
    "mac": "cmd+i",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.insertNodeSelectionFromOutline",
    "key": "ctrl+i",
    "mac": "cmd+i",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.insertNodeSelectionInterrupt",
    "key": "ctrl+i",
    "mac": "cmd+i",
    "when": "leoTreeOpened &amp;&amp; !sideBarFocus &amp;&amp; !editorTextFocus"
  },
  {
    "command": "leojs.cloneNodeSelection",
    "key": "ctrl+[Backquote]",
    "win": "ctrl+oem_7",
    "linux": "ctrl+'",
    "mac": "cmd+[Backquote]",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.cloneNodeSelectionFromOutline",
    "key": "ctrl+[Backquote]",
    "win": "ctrl+oem_7",
    "linux": "ctrl+'",
    "mac": "cmd+[Backquote]",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.cutNodeSelection",
    "key": "ctrl+shift+x",
    "mac": "cmd+shift+x",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.cutNodeSelectionFromOutline",
    "key": "ctrl+shift+x",
    "mac": "cmd+shift+x",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.copyNodeSelection",
    "key": "ctrl+shift+c",
    "mac": "cmd+shift+c",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.copyNodeSelection",
    "key": "ctrl+shift+c",
    "mac": "cmd+shift+c",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.pasteNodeAtSelection",
    "key": "ctrl+shift+v",
    "mac": "cmd+shift+v",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.pasteNodeAtSelectionFromOutline",
    "key": "ctrl+shift+v",
    "mac": "cmd+shift+v",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.deleteSelection",
    "key": "ctrl+shift+backspace",
    "mac": "cmd+shift+backspace",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.deleteSelectionFromOutline",
    "key": "ctrl+shift+backspace",
    "mac": "cmd+shift+backspace",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoFirstVisible",
    "key": "alt+home",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoLastSibling",
    "key": "alt+end",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoFirstVisible",
    "key": "home",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoLastVisible",
    "key": "end",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.pageUp",
    "key": "pageup",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.pageDown",
    "key": "pagedown",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoNextCloneSelectionFromOutline",
    "key": "alt+n",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoNextCloneSelection",
    "key": "alt+n",
    "when": "leoTreeOpened &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.gotoNextVisible",
    "key": "down",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoNextVisible",
    "key": "alt+down",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.gotoNextVisible",
    "key": "alt+down",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.gotoPrevVisible",
    "key": "up",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.gotoPrevVisible",
    "key": "alt+up",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.gotoPrevVisible",
    "key": "alt+up",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection  &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.contractOrGoLeft",
    "key": "left",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.contractOrGoLeft",
    "key": "alt+left",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.contractOrGoLeft",
    "key": "alt+left",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  },
  {
    "command": "leojs.expandAndGoRight",
    "key": "right",
    "when": "leoTreeBrowse &amp;&amp; leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs/"
  },
  {
    "command": "leojs.expandAndGoRight",
    "key": "alt+right",
    "when": "leoTreeOpened &amp;&amp; sideBarFocus &amp;&amp; focusedView =~ /leoJs|leoDocuments|leoButtons/"
  },
  {
    "command": "leojs.expandAndGoRight",
    "key": "alt+right",
    "when": "leoTreeOpened &amp;&amp; !editorHasSelection &amp;&amp; editorTextFocus &amp;&amp; resourceScheme == leo"
  }
]
</t>
<t tx="felix.20201208222541.1">"views": {
  "explorer": [
    {
      "id": "leoJsExplorer",
      "name": "Leo",
      "contextualTitle": "Leo"
    }
  ]
},
</t>
<t tx="felix.20201208223531.1"></t>
<t tx="felix.20201208223553.1">import * as vscode from 'vscode';
import { LeoNode } from './leoNode';
import { ProviderResult } from "vscode";
import { Icon, PNode } from './types';
import * as utils from "./utils";

@others
@language typescript
@tabwidth -4
</t>
<t tx="felix.20201208223554.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Icon, PNode } from "./types"; // ArchivedPosition included to help debug

/**
 * * Implementation of tree nodes for usage in a TreeDataProvider
 */
@others
@language typescript
@tabwidth -4
</t>
<t tx="felix.20201208224407.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import { Icon } from "./types";
import { LeoNode } from "./leoNode";

// String and other types/structures helper functions, along with common vscode API calls

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224407.10">/**
 * * Returns the milliseconds between a given starting process.hrtime tuple and the current call to process.hrtime
 * @param p_start starting process.hrtime to subtract from current immediate time
 * @returns number of milliseconds passed since the given start hrtime
 */
export function getDurationMs(p_start: [number, number]): number {
    const [w_secs, w_nanosecs] = process.hrtime(p_start);
    return w_secs * 1000 + Math.floor(w_nanosecs / 1000000);
}

</t>
<t tx="felix.20201208224407.11">/**
 * * Extracts the file name from a full path, such as "foo.bar" from "/abc/def/foo.bar"
 * @param p_path Full path such as "/var/drop/foo/boo/moo.js" or "C:\Documents and Settings\img\recycled log.jpg"
 * @returns file name string such as "moo.js" or "recycled log.jpg""
 */
export function getFileFromPath(p_path: string): string {
    return p_path.replace(/^.*[\\\/]/, '');
}

</t>
<t tx="felix.20201208224407.12">/**
 * * Checks if a node would become dirty if it were to now have body content at all
 * @param p_node LeoNode from vscode's outline
 * @param p_newHasBody Flag to signify presence of body content, to be compared with its current state
 * @returns True if it would change the icon with actual body content, false otherwise
 */
export function isIconChangedByEdit(p_node: LeoNode, p_newHasBody: boolean): boolean {
    if (!p_node.dirty || (p_node.hasBody === !p_newHasBody)) {
        return true;
    }
    return false;
}

</t>
<t tx="felix.20201208224407.14">/**
* Builds a 'Leo Scheme' vscode.Uri from a gnx (or strings like 'LEO BODY' or empty strings to decorate breadcrumbs)
* @param p_str leo node gnx strings are used to build Uri
* @returns A vscode 'Uri' object
*/
export function strToLeoUri(p_str: string): vscode.Uri {
    return vscode.Uri.parse(Constants.URI_SCHEME_HEADER + p_str);
}

</t>
<t tx="felix.20201208224407.15">/**
 * * Gets the gnx, (or another string like 'LEO BODY' or other), from a vscode.Uri object
 * @param p_uri Source uri to extract from
 * @returns The string source that was used to build this Uri
 */
export function leoUriToStr(p_uri: vscode.Uri): string {
    // TODO : Use length of a constant or something other than 'fsPath'
    // For now, just remove the '/' (or backslash on Windows) before the path string
    return p_uri.fsPath.substr(1);
}

</t>
<t tx="felix.20201208224407.16">/**
 * * Sets a vscode context variable with 'vscode.commands.executeCommand' &amp; 'setContext'
 * @param p_key Key string name such as constants 'leoReady' or 'treeOpened', etc.
 * @param p_value Value to be assigned to the p_key 'key'
 * @returns A Thenable that is returned by the executeCommand call
 */
export function setContext(p_key: string, p_value: any): Thenable&lt;unknown&gt; {
    return vscode.commands.executeCommand(Constants.VSCODE_COMMANDS.SET_CONTEXT, p_key, p_value);
}

</t>
<t tx="felix.20201208224407.2">/**
 * * Build a string for representing a number that's 2 digits wide, padding with a zero if needed
 * @param p_number Between 0 and 99
 * @returns a 2 digit wide string representation of the number, left padded with zeros as needed.
 */
export function padNumber2(p_number: number): string {
    return ("0" + p_number).slice(-2);
}

</t>
<t tx="felix.20201208224407.4">/**
 * * Performs the actual addition into globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
 */
export function addFileToGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Just push that string into the context.globalState.&lt;something&gt; array
    const w_contextEntry: string[] = p_context.globalState.get(p_key) || [];
    if (w_contextEntry) {
        if (!w_contextEntry.includes(p_file)) {
            w_contextEntry.push(p_file);
            if (w_contextEntry.length &gt; 10) {
                w_contextEntry.shift();
            }
        }
        return p_context.globalState.update(p_key, w_contextEntry); // Added file
    } else {
        // First so create key entry with an array of single file
        return p_context.globalState.update(p_key, [p_file]);
    }
}

</t>
<t tx="felix.20201208224407.5">/**
 * * Removes file entry from globalState context
 * @param p_context Needed to get to vscode global storage
 * @param p_file path+file name string
 * @param p_key A constant string such as RECENT_FILES_KEY or LAST_FILES_KEY
 * @returns A promise that resolves when the global storage modification is done
  */
export function removeFileFromGlobal(p_context: vscode.ExtensionContext, p_file: string, p_key: string): Thenable&lt;void&gt; {
    // Check if exist in context.globalState.&lt;something&gt; and remove if found
    const w_files: string[] = p_context.globalState.get(p_key) || [];
    if (w_files &amp;&amp; w_files.includes(p_file)) {
        w_files.splice(w_files.indexOf(p_file), 1); // Splice and update
        return p_context.globalState.update(p_key, w_files);
    }
    return Promise.resolve(); // not even in list so just resolve
}

</t>
<t tx="felix.20201208224407.6">/**
 * * Build all possible strings for node icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array of the 16 vscode node icons used in this vscode expansion
 */
export function buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_PATH + padNumber2(p_index) + Constants.GUI.ICON_FILE_EXT),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_PATH + padNumber2(p_index) + Constants.GUI.ICON_FILE_EXT)
        };
    });
}

</t>
<t tx="felix.20201208224407.7">/**
 * * Build all possible strings for documents icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildDocumentIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_DOCUMENT_DIRTY),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_DOCUMENT_DIRTY)
        }
    ];
}

</t>
<t tx="felix.20201208224407.8">/**
 * * Build all possible strings for buttons icons graphic file paths
 * @param p_context Needed to get to absolute paths on the system
 * @returns An array containing icons for the documents tree view
 */
export function buildButtonsIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return [
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON)
        },
        {
            light: p_context.asAbsolutePath(Constants.GUI.ICON_LIGHT_BUTTON_ADD),
            dark: p_context.asAbsolutePath(Constants.GUI.ICON_DARK_BUTTON_ADD)
        }
    ];
}

</t>
<t tx="felix.20201208224420.1">import * as vscode from "vscode";
import { LeoNode } from "./leoNode";

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224420.10">/**
 * * ArchivedPosition format package from Leo's leoflexx.py
 */
export interface ArchivedPosition {
    hasBody: boolean;       // bool(p.b),
    hasChildren: boolean;   // p.hasChildren()
    childIndex: number;     // p._childIndex
    cloned: boolean;        // p.isCloned()
    dirty: boolean;         // p.isDirty()
    expanded: boolean;      // p.isExpanded()
    gnx: string;            // p.v.gnx
    level: number;          // p.level()
    headline: string;       // p.h
    marked: boolean;        // p.isMarked()
    atFile: boolean         // p.isAnyAtFileNode():
    selected: boolean;      // p == commander.p
    u?: any;               // User Attributes
    stack: {
        gnx: string;        // stack_v.gnx
        childIndex: number; // stack_childIndex
        headline: string;   // stack_v.h
    }[];                    // for (stack_v, stack_childIndex) in p.stack]
}

</t>
<t tx="felix.20201208224420.16">/**
 * * Icon path names used in leoNodes for rendering in treeview
 */
export interface Icon {
    light: string;
    dark: string;
}

</t>
<t tx="felix.20201208224420.20">/**
 * * Parameter structure used in the 'runSaveFileDialog' equivalent when asking user input
 */
export interface showSaveAsDialogParameters {
    "initialFile": string;
    "title": string;
    "message": string;
    "filetypes": string[];
    "defaultExtension": string;
}

</t>
<t tx="felix.20201208224420.21">/**
 * * Parameter structure used in the 'runAskYesNoDialog' equivalent when asking user input
 */
export interface runAskYesNoDialogParameters {
    "ask": string;
    "message": string;
    "yes_all": boolean;
    "no_all": boolean;
}

</t>
<t tx="felix.20201208224420.22">/**
 * * Parameter structure used in the 'runAskOkDialog' equivalent when showing a warning
 */
export interface runWarnMessageDialogParameters {
    "warn": string;
    "message": string;
}

</t>
<t tx="felix.20201208224420.23">/**
 * * Parameter structure for non-blocking info message about detected file changes
 */
export interface runInfoMessageDialogParameters {
    "message": string;
}

</t>
<t tx="felix.20201208224420.24">/**
 * * Used in showAskModalDialog to get answer from user interaction
 */
export interface AskMessageItem extends vscode.MessageItem {
    value: string;
}

</t>
<t tx="felix.20201208224420.25">/**
 * * Used in switch Leo document to get answer from user interaction
 */
export interface ChooseDocumentItem extends vscode.QuickPickItem {
    value: number;
}

</t>
<t tx="felix.20201208224420.26">/**
 * * Used by the minibuffer command pallette
 * Acquired from the getCommands method in leobridgeserver.py
 */
export interface MinibufferCommand extends vscode.QuickPickItem {
    func: string;
}
</t>
<t tx="felix.20201208224420.4">/**
 * * When refreshing the outline and getting to Leo's selected node
 */
export const enum RevealType {
    NoReveal = 0, // In apToLeoNode conversion, If if the global revealType is "NoReveal" and its the selected node, re-use the old id
    Reveal,
    RevealSelect,
    RevealSelectFocus
}

</t>
<t tx="felix.20201208224420.5">/**
 * * Required Refresh Dictionary of "elements to refresh" flags
 */
export interface ReqRefresh {
    node?: boolean; // Reveal received selected node (Navigation only, no tree change)
    tree?: boolean; // Tree needs refresh
    body?: boolean; // Body needs refresh
    states?: boolean; // States needs refresh (changed, canUndo, canRedo, canDemote, canPromote, canDehoist)
    buttons?: boolean; // Buttons needs refresh
    documents?: boolean; // Documents needs refresh
}

</t>
<t tx="felix.20201208224420.6">/**
 * * Stackable front end commands
 */
export interface UserCommand {
    action: string;
    node?: LeoNode | undefined;  // We can START a stack with a targeted command
    text?: string | undefined; // If a string is required, for headline, etc.
    refreshType: ReqRefresh; // Minimal refresh level required by this command
    fromOutline: boolean; // Focus back on outline instead of body
    keepSelection?: boolean; // Should bring back selection on node prior to command
    resolveFn?: (result: any) =&gt; void; // call that with an answer from python's (or other) side
    rejectFn?: (reason: any) =&gt; void; // call if problem is encountered
}

</t>
<t tx="felix.20201208224420.7">/**
 * * Object container for parameters of leoIntegration's "apply-selected-node-to-body" method
 */
export interface ShowBodyParam {
    node: LeoNode,
    aside: boolean,
    showBodyKeepFocus: boolean,
    force_open?: boolean
}
</t>
<t tx="felix.20201208224441.1">import * as vscode from "vscode";
import { Constants } from "./constants";
import * as path from "path"; // TODO : Use this to have reliable support for window-vs-linux file-paths

@language typescript
@tabwidth -4
@others
</t>
<t tx="felix.20201208224441.2">/**
 * * Handles opening of file browser when choosing which Leo file to open
 */
export class LeoFilesBrowser {

    private _fileBrowserActive: boolean = false;

    constructor(private _context: vscode.ExtensionContext) { }

    @others
}
</t>
<t tx="felix.20201208224441.3">/**
 * * Finds a folder to propose when opening the browse-for-leo-file chooser
 * @returns An Uri for path to a folder for initial opening
 */
private _getBestOpenFolderUri(): vscode.Uri {
    let w_openedFileEnvUri: vscode.Uri | boolean = false;
    let w_activeUri: vscode.Uri | undefined = undefined;

    if (vscode.workspace.workspaceFolders &amp;&amp; vscode.workspace.workspaceFolders[0]) {
        w_activeUri = vscode.workspace.workspaceFolders[0].uri;
    }

    if (w_activeUri) {
        const w_defaultFolder = vscode.workspace.getWorkspaceFolder(w_activeUri);
        if (w_defaultFolder) {
            w_openedFileEnvUri = w_defaultFolder.uri; // Set as current opened document-path's folder
        }
    }
    if (!w_openedFileEnvUri) {
        w_openedFileEnvUri = vscode.Uri.file("~"); // TODO : set as home folder properly, this doesn't work
        // ! EXAMPLE WITH os : const homedir = require('os').homedir();
    }
    return w_openedFileEnvUri;
}

</t>
<t tx="felix.20201208224441.4">/**
 * * Open a file browser and let the user choose a Leo file or cancel the operation
 * @param p_saveAsFlag Optional flag that will ask for a 'save' path+filename
 * @returns A promise resolving to a chosen path string, or rejected with an empty string if cancelled
 */
public getLeoFileUrl(p_saveAsFlag?: boolean): Promise&lt;string&gt; {
    if (this._fileBrowserActive) {
        return Promise.resolve("");
    }
    this._fileBrowserActive = true;
    return new Promise((p_resolve, p_reject) =&gt; {
        const w_filters: { [name: string]: string[] } = {};
        w_filters[Constants.FILE_OPEN_FILTER_MESSAGE] = [Constants.FILE_EXTENSION];

        if (p_saveAsFlag) {
            // Choose file
            vscode.window.showSaveDialog({
                saveLabel: "Save Leo File",
                defaultUri: this._getBestOpenFolderUri(),
                filters: { 'Leo File': ['leo'] }
            })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // single string
                        p_resolve(p_chosenLeoFile.fsPath.replace(/\\/g, "/")); // Replace backslashes for windows support
                    } else {
                        p_resolve(""); // not rejection - resolve empty string
                    }
                });
        } else {
            vscode.window
                .showOpenDialog({
                    canSelectMany: false,
                    defaultUri: this._getBestOpenFolderUri(),
                    filters: w_filters
                })
                .then(p_chosenLeoFile =&gt; {
                    this._fileBrowserActive = false;
                    if (p_chosenLeoFile) {
                        // array instead of single string
                        p_resolve(p_chosenLeoFile[0].fsPath.replace(/\\/g, "/")); // Replace backslashes for windows support
                    } else {
                        p_resolve("");
                    }
                });
        }
    });
}

</t>
<t tx="felix.20201208224703.1">@language rest
@wrap

# How to install and run the development version

Thanks for trying out the development version of LeoInteg! :sunglasses: Contributions and pull requests are more than welcome!

## Introduction

If you're new to vscode and want to try out Leo with this vscode extension, you might want to look at this [Getting Started](https://code.visualstudio.com/docs#vscode-in-action) page to get an overview of vscode.

Furthermore, if you've never ran a vscode extension in an **Extension Development Host**, here is a [short overview about running and modifying a simple extension](https://code.visualstudio.com/api/get-started/your-first-extension).

If you're having problems, try [running this sample extension](https://github.com/Microsoft/vscode-extension-samples/tree/master/helloworld-sample#running-the-sample) first to catch underlying problems or missing dependencies.

</t>
<t tx="felix.20201208235204.1">/**
 * Command strings to be used with vscode.commands.executeCommand
 * See https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command
 */
public static VSCODE_COMMANDS = {
    SET_CONTEXT: "setContext",
    CLOSE_ACTIVE_EDITOR: "workbench.action.closeActiveEditor",
    QUICK_OPEN: "workbench.action.quickOpen"
};

</t>
<t tx="felix.20201209004316.1">export class LeoNode extends vscode.TreeItem {

    public contextValue: string; // * Context string is checked in package.json with 'when' clauses

    public isRoot: boolean = false; // * for hoist/dehoist context flags purposes

    constructor(
        public label: string, // Node headline
        public collapsibleState: vscode.TreeItemCollapsibleState, // Computed in receiver/creator
        public ap: PNode, // Pointer/reference for leo's node position
        public childIndex: number, // For debugging purposes
        public cloned: boolean,
        public dirty: boolean,
        public marked: boolean,
        public atFile: boolean,
        public hasBody: boolean,
        public u: any,
        private _icons: Icon[], // pointer to global array of node icons
        private _id: string
    ) {
        super(label, collapsibleState);
        this.contextValue = this._getNodeContextValue();
        this.command = {
            command: Constants.COMMANDS.SELECT_NODE,
            title: '',
            arguments: [this]
        };
    }

    // * TO HELP DEBUG
    // get description(): string {
    //     // * some smaller grayed-out text accompanying the main label
    //     const w_ap: ArchivedPosition = JSON.parse(this.ap);
    //     return "child:" + w_ap.childIndex + " lvl:" + w_ap.level + " gnx:" + w_ap.gnx;
    // }

    // get description(): string {
    //     // * some smaller grayed-out text accompanying the main label
    //     return "id:" + this.id;
    // }

    /**
     * * Sets this node properties (dirty, marked, etc.) by copying from a given node.
     * * This is needed by the outline provider when refreshing a single node.
     * @param p_node Node to copy properties from.
     * @returns Node itself with the new properties applied
     */
    @others
}
</t>
<t tx="felix.20201209004316.2">public copyProperties(p_node: LeoNode): LeoNode {
    this.label = p_node.label;

    this.collapsibleState = p_node.collapsibleState;
    this.ap = p_node.ap;
    this.childIndex = p_node.childIndex;
    this.cloned = p_node.cloned;
    this.dirty = p_node.dirty;
    this.marked = p_node.marked;
    this.atFile = p_node.atFile;
    this.hasBody = p_node.hasBody;
    this.isRoot = p_node.isRoot;
    this.contextValue = this._getNodeContextValue();
    return this;
}

</t>
<t tx="felix.20201209004316.3">/**
 * * Set this node as the root for hoist/dehoist context flags purposes
 */
public setRoot(): void {
    this.isRoot = true;
    this.contextValue = this._getNodeContextValue();
}

</t>
<t tx="felix.20201209004316.4">private _getNodeContextValue(): string {
    // Start it with 'leoNodeMarked' or 'leoNodeUnmarked'
    let w_contextValue = Constants.CONTEXT_FLAGS.NODE_UNMARKED;
    if (this.marked) {
        w_contextValue = Constants.CONTEXT_FLAGS.NODE_MARKED;
    }
    // then append 'leoNodeAtFile' to existing if needed
    if (this.atFile) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ATFILE;
    }
    // then append 'leoNodeCloned' to existing if needed
    if (this.cloned) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_CLONED;
    }
    // and finally, check for 'root' too
    if (this.isRoot) {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_ROOT;
    } else {
        w_contextValue += Constants.CONTEXT_FLAGS.NODE_NOT_ROOT;
    }
    return w_contextValue;
}

// @ts-ignore
public get iconPath(): Icon {
    // From Leo's leoNodes.py computeIcon function
    // 1=has Body, 2=marked, 4=cloned, 8=dirty
    let w_icon: number =
        (+this.dirty &lt;&lt; 3) |
        (+this.cloned &lt;&lt; 2) |
        (+this.marked &lt;&lt; 1) |
        +this.hasBody;
    return this._icons[w_icon];
}

// Optional id for the tree item that has to be unique across tree.
// The id is used to preserve the selection and expansion state of the tree item.
// If not provided, an id is generated using the tree item's label.
// Note that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.
// @ts-ignore
public get id(): string { return this._id; }

// @ts-ignore
public get description(): string {
    // * some smaller grayed-out text accompanying the main label
    if (this.u) {
        return "\u{1F4CE} (" + Object.keys(this.u).length + ")";
    } else {
        // return "id:" + this.id; // ! debug test
        // return "gnx:" + this.gnx; // ! debug test
        return ""; // Falsy will not be shown
    }
}

// @ts-ignore
public get tooltip(): string {
    if (this.u) {
        //  "\ntotal keys is :" + Object.keys(this.u).length
        return this.label + "\n" +
            JSON.stringify(this.u, undefined, 2);
    } else {
        return this.label; // * Whole headline as tooltip
    }
}

</t>
<t tx="felix.20201209011931.1">export class JsOutlineProvider implements vscode.TreeDataProvider&lt;LeoNode&gt; {
    private _onDidChangeTreeData: vscode.EventEmitter&lt;LeoNode | undefined&gt; = new vscode.EventEmitter&lt;LeoNode | undefined&gt;();

    private _icons: Icon[];

    private _model: PNode[] = [
        {
            header: "node1",
            body: "node1 body",
            children: [
                {
                    header: "nodeInside1",
                    body: "nodeInside1 body",
                    children: []
                }, {
                    header: "nodeInside2",
                    body: "nodeInside2 body",
                    children: []
                },
            ]
        },
        {
            header: "node2",
            body: "node2 body",
            children: []
        },

        {
            header: "node3",
            body: "node3 body",
            children: []
        },
    ];

    private _uniqueId: number = 0;

    @others
}
</t>
<t tx="felix.20201209011931.2">constructor(private _context: vscode.ExtensionContext) {
    this._icons = this._buildNodeIconPaths(_context);
}


</t>
<t tx="felix.20201209011931.3">/**
 * * Refresh the whole outline
 */
public refreshTreeRoot(): void {
    this._onDidChangeTreeData.fire(undefined);
}

</t>
<t tx="felix.20201209011931.4">public getTreeItem(element: LeoNode): Thenable&lt;LeoNode&gt; | LeoNode {
    return element;
}

</t>
<t tx="felix.20201209011931.5">public getChildren(element?: LeoNode): Thenable&lt;LeoNode[]&gt; {
    if (element) {
        return Promise.resolve(this._LeoNodeArray(element.ap.children));
    } else {
        return Promise.resolve(this._LeoNodeArray(this._model));
    }
}

</t>
<t tx="felix.20201209011931.6">public getParent(element: LeoNode): ProviderResult&lt;LeoNode&gt; | null {
    // Buttons are just a list, as such, entries are always child of root so return null
    return null;
}

</t>
<t tx="felix.20201209011931.7">private _buildNodeIconPaths(p_context: vscode.ExtensionContext): Icon[] {
    return Array(16).fill("").map((p_val, p_index) =&gt; {
        return {
            light: p_context.asAbsolutePath("resources/light/box" + utils.padNumber2(p_index) + ".svg"),
            dark: p_context.asAbsolutePath("resources/dark/box" + utils.padNumber2(p_index) + ".svg")
        };
    });
}

</t>
<t tx="felix.20201209011931.8">private _LeoNodeArray(p_children: PNode[]): LeoNode[] {
    const w_children: LeoNode[] = [];
    if (p_children &amp;&amp; p_children.length) {
        p_children.forEach((p_node, p_index) =&gt; {
            w_children.push(new LeoNode(p_node.header,
                p_node.children.length ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None,
                p_node, // ap
                p_index, // childIndex
                false, // cloned
                false, // dirty
                false, // marked
                false, // atFile
                !!p_node.body &amp;&amp; !!p_node.body.length,
                false, // u
                this._icons,
                "id" + this._uniqueId++
            ));
        });
    }
    return w_children;
}

</t>
<t tx="felix.20201209012321.1">export interface PNode {
    header: string;
    children: PNode[];
    parent?: PNode;
    body: string;
}

</t>
</tnodes>
</leo_file>
