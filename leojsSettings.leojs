{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "ekr.20041119035137",
      "vh": "About this file, leoSettings.leo",
      "children": [
        {
          "gnx": "ekr.20041122163623",
          "vh": "About settings names"
        },
        {
          "gnx": "ekr.20041119035704",
          "vh": " Basic setting nodes",
          "children": [
            {
              "gnx": "ekr.20041119042929",
              "vh": "@bool"
            },
            {
              "gnx": "ekr.20041119042929.1",
              "vh": "@color"
            },
            {
              "gnx": "ekr.20041119044139",
              "vh": "@directory"
            },
            {
              "gnx": "ekr.20041119042929.3",
              "vh": "@encoding"
            },
            {
              "gnx": "ekr.20041119042929.4",
              "vh": "@int"
            },
            {
              "gnx": "ekr.20061002115414",
              "vh": "@float"
            },
            {
              "gnx": "ekr.20111003130143.15561",
              "vh": "@font"
            },
            {
              "gnx": "ekr.20041120181045",
              "vh": "@ratio"
            },
            {
              "gnx": "ekr.20041119042929.2",
              "vh": "@path"
            },
            {
              "gnx": "ekr.20041119042929.7",
              "vh": "@string"
            }
          ]
        },
        {
          "gnx": "ekr.20041119035704.1",
          "vh": " Organizer nodes"
        },
        {
          "gnx": "ekr.20071217093419",
          "vh": "\\@data"
        },
        {
          "gnx": "ekr.20080312071248.25",
          "vh": "\\@buttons"
        },
        {
          "gnx": "ekr.20080312071248.19",
          "vh": "\\@button name [@key=value]"
        },
        {
          "gnx": "ekr.20080312071248.26",
          "vh": "\\@commands"
        },
        {
          "gnx": "ekr.20080312071248.20",
          "vh": "\\@command name [@key=value]"
        },
        {
          "gnx": "ekr.20070224073109",
          "vh": "\\@enabled-plugins"
        },
        {
          "gnx": "ekr.20060913144412",
          "vh": "\\@keys keyset-name"
        },
        {
          "gnx": "ekr.20150426033400.1",
          "vh": "\\@ifenv name,value"
        },
        {
          "gnx": "ekr.20150426031409.1",
          "vh": "\\@ifhostname hostname or !hostname"
        },
        {
          "gnx": "ekr.20041119110141",
          "vh": "\\@ifplatform platform-name"
        },
        {
          "gnx": "ekr.20041119035704.2",
          "vh": "\\@ignore comment"
        },
        {
          "gnx": "ekr.20170823083657.1",
          "vh": "\\@menu and \\@item"
        },
        {
          "gnx": "ekr.20130503155210.16364",
          "vh": "\\@menuat "
        },
        {
          "gnx": "ekr.20070411172718",
          "vh": "\\@openwith name = shortcut"
        },
        {
          "gnx": "ekr.20131115075142.18226",
          "vh": "\\@outline-data setting-name"
        },
        {
          "gnx": "ekr.20180124050114.1",
          "vh": "\\@rclick"
        },
        {
          "gnx": "ekr.20041119105509",
          "vh": "\\@set name = value"
        },
        {
          "gnx": "ekr.20041120155431.1",
          "vh": "\\@shortcuts"
        },
        {
          "gnx": "ekr.20041119035704.3",
          "vh": "\\@type type-name: base-type = [list of valid values]"
        },
        {
          "gnx": "ekr.20041120155431.2",
          "vh": "\\@type type-name: script: script-name"
        }
      ],
      "status": 32
    },
    {
      "gnx": "ekr.20061011082224",
      "vh": "About myLeoSettings.leo"
    },
    {
      "gnx": "ekr.20041119034357.1",
      "vh": "@settings",
      "children": [
        {
          "gnx": "ekr.20201010141557.1",
          "vh": "@string theme-name = None"
        },
        {
          "gnx": "ekr.20041119034357.10",
          "vh": "Command options",
          "children": [
            {
              "gnx": "ekr.20131112150804.18737",
              "vh": "@bool force-execute-entire-body = False"
            },
            {
              "gnx": "ekr.20150227102835.1",
              "vh": "@bool make-node-conflicts-node = True"
            },
            {
              "gnx": "ekr.20180117074230.1",
              "vh": "@bool show-tips = True"
            },
            {
              "gnx": "ekr.20060323131801",
              "vh": "@bool warn-about-missing-settings = False"
            },
            {
              "gnx": "ekr.20220105172501.1",
              "vh": "@data add-mypy-annotations"
            },
            {
              "gnx": "ekr.20210530064911.1",
              "vh": "@data exec-script-commands"
            },
            {
              "gnx": "ekr.20210530064922.1",
              "vh": "@data exec-script-patterns"
            },
            {
              "gnx": "ekr.20160428072005.1",
              "vh": "@data history-list"
            },
            {
              "gnx": "ekr.20211014064402.1",
              "vh": "@data python-to-typescript-types"
            },
            {
              "gnx": "ekr.20190608085550.1",
              "vh": "@int max-find-long-lines-length = 110"
            },
            {
              "gnx": "ekr.20180301060510.1",
              "vh": "@int print-settings-at-data-limit = 20"
            },
            {
              "gnx": "ekr.20041119041019.1",
              "vh": "@string remove-sentinels-extension = .txt"
            },
            {
              "gnx": "ekr.20110917104720.9414",
              "vh": "c-to-python settings",
              "children": [
                {
                  "gnx": "ekr.20110917104720.9415",
                  "vh": "@data c-to-python-class-list"
                },
                {
                  "gnx": "ekr.20110917104720.9416",
                  "vh": "@data c-to-python-type-list"
                },
                {
                  "gnx": "ekr.20110917104720.9417",
                  "vh": "@data c-to-python-ivars-dict"
                }
              ]
            },
            {
              "gnx": "ekr.20110611092035.16482",
              "vh": "Headline commands settings",
              "children": [
                {
                  "gnx": "ekr.20181018105904.1",
                  "vh": "@bool headline-gmt-time = False"
                },
                {
                  "gnx": "ekr.20041119050749.10",
                  "vh": "@string headline-time-format-string = %m/%d/%Y %H:%M:%S"
                }
              ]
            },
            {
              "gnx": "ekr.20160127043440.1",
              "vh": "make-stub-files settings",
              "children": [
                {
                  "gnx": "ekr.20160127051552.1",
                  "vh": "@bool stub-overwrite = False"
                },
                {
                  "gnx": "ekr.20160318061607.3",
                  "vh": "@bool stub-trace-matches = False"
                },
                {
                  "gnx": "ekr.20160318061607.4",
                  "vh": "@bool stub-trace-patterns = False"
                },
                {
                  "gnx": "ekr.20160318061607.6",
                  "vh": "@bool stub-trace-reduce = False"
                },
                {
                  "gnx": "ekr.20160318061607.5",
                  "vh": "@bool stub-trace-visitors = False"
                },
                {
                  "gnx": "ekr.20160318061607.7",
                  "vh": "@bool stub-update = False"
                },
                {
                  "gnx": "ekr.20181018103813.1",
                  "vh": "@bool stub-verbose = False"
                },
                {
                  "gnx": "ekr.20181018103757.1",
                  "vh": "@bool stub-warn = False"
                },
                {
                  "gnx": "ekr.20160127043520.1",
                  "vh": "@data stub-def-name-patterns"
                },
                {
                  "gnx": "ekr.20160130145944.1",
                  "vh": "@data stub-general-patterns"
                },
                {
                  "gnx": "ekr.20160112111247.1",
                  "vh": "@data stub-prefix-lines"
                },
                {
                  "gnx": "ekr.20160317062151.1",
                  "vh": "@data stub-regex-patterns"
                },
                {
                  "gnx": "ekr.20160127051243.1",
                  "vh": "@string stub-output-directory = ~/stubs"
                }
              ]
            },
            {
              "gnx": "ekr.20160316111054.1",
              "vh": "python-to-coffeescript settings",
              "children": [
                {
                  "gnx": "ekr.20160316112407.2",
                  "vh": "@bool py2cs-overwrite = True"
                },
                {
                  "gnx": "ekr.20160316112407.8",
                  "vh": "@string py2cs-output-directory = ~/py2cs"
                }
              ]
            },
            {
              "gnx": "ekr.20071213060239",
              "vh": "rst3 command settings",
              "children": [
                {
                  "gnx": "ekr.20210327193736.1",
                  "vh": "rst3 reporting options",
                  "children": [
                    {
                      "gnx": "ekr.20071213061811.2",
                      "vh": "@bool rst3-verbose = True"
                    }
                  ]
                },
                {
                  "gnx": "ekr.20210327193806.1",
                  "vh": "rst3 http options",
                  "children": [
                    {
                      "gnx": "ekr.20071213061454.1",
                      "vh": "@bool rst3-http-server-support = False"
                    },
                    {
                      "gnx": "ekr.20071213061454.3",
                      "vh": "@string rst3-node-begin-marker = http-node-marker-"
                    }
                  ]
                },
                {
                  "gnx": "ekr.20210327193854.1",
                  "vh": "rst3 output options",
                  "children": [
                    {
                      "gnx": "ekr.20071213061504",
                      "vh": "@string rst3-default-path = None"
                    },
                    {
                      "gnx": "ekr.20090430075506.7",
                      "vh": "@bool rst3-generate-rst-header-comment = True"
                    },
                    {
                      "gnx": "ekr.20071213061811.1",
                      "vh": "@string rst3-underline-characters = #=+*^~`-:><-"
                    },
                    {
                      "gnx": "ekr.20071213061811.3",
                      "vh": "@bool rst3-write-intermediate-file = True"
                    },
                    {
                      "gnx": "ekr.20131027064821.18683",
                      "vh": "@string rst3-write-intermediate-extension = .txt"
                    }
                  ]
                },
                {
                  "gnx": "ekr.20210327194119.1",
                  "vh": "rst3 docutils options",
                  "children": [
                    {
                      "gnx": "ekr.20131009050634.17656",
                      "vh": "@bool rst3-call-docutils = True"
                    },
                    {
                      "gnx": "ekr.20210327193418.1",
                      "vh": "@bool rst3-stylesheet-embed = False"
                    },
                    {
                      "gnx": "ekr.20071213061504.3",
                      "vh": "@string rst3-publish-argv-for-missing-stylesheets = None"
                    },
                    {
                      "gnx": "ekr.20071213061504.1",
                      "vh": "@string rst3-stylesheet-name = default.css"
                    },
                    {
                      "gnx": "ekr.20071213061504.2",
                      "vh": "@string rst3-stylesheet-path = None"
                    }
                  ]
                }
              ]
            },
            {
              "gnx": "ekr.20110611092035.16477",
              "vh": "Undo settings",
              "children": [
                {
                  "gnx": "ekr.20041119041019.2",
                  "vh": "@bool save-clears-undo-buffer = False"
                },
                {
                  "gnx": "ekr.20060127050605",
                  "vh": "@int max-undo-stack-size = 0"
                },
                {
                  "gnx": "ekr.20050126083026",
                  "vh": "@string undo-granularity = None"
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20070926132045",
          "vh": "Common @button nodes",
          "children": [
            {
              "gnx": "ekr.20070926082407",
              "vh": "@buttons"
            }
          ]
        },
        {
          "gnx": "ekr.20080312075451.1",
          "vh": "Common @command nodes",
          "children": [
            {
              "gnx": "ekr.20080312075451.2",
              "vh": "@commands"
            }
          ]
        },
        {
          "gnx": "ekr.20061003173413",
          "vh": "Files & directories",
          "children": [
            {
              "gnx": "ekr.20061210091932",
              "vh": "@bool chdir-to-relative-path = False"
            },
            {
              "gnx": "ekr.20150216135059.1",
              "vh": "@bool create-at-persistence-nodes-automatically = False"
            },
            {
              "gnx": "ekr.20041119041304",
              "vh": "@bool create-nonexistent-directories = False"
            },
            {
              "gnx": "ekr.20170718054928.1",
              "vh": "@bool log-show-save-time = False"
            },
            {
              "gnx": "ekr.20200226102131.1",
              "vh": "@bool report-unchanged-files = True"
            },
            {
              "gnx": "ekr.20181018113812.1",
              "vh": "@string initial-chooser-directory = None"
            },
            {
              "gnx": "ekr.20170718054951.1",
              "vh": "@string log-timestamp-format = %H:%M:%S"
            },
            {
              "gnx": "ekr.20041119041304.1",
              "vh": "@string relative-path-base-directory = ."
            },
            {
              "gnx": "ekr.20181018113813.1",
              "vh": "@string script-file-path = None"
            },
            {
              "gnx": "ekr.20170706103843.1",
              "vh": "Checking files",
              "children": [
                {
                  "gnx": "ekr.20071110153046",
                  "vh": "@bool at-auto-warns-about-leading-whitespace = True"
                },
                {
                  "gnx": "ekr.20150403055250.1",
                  "vh": "@bool check-for-changed-external-files = True"
                },
                {
                  "gnx": "ekr.20090514111518.8379",
                  "vh": "@bool check-python-code-on-write = True"
                },
                {
                  "gnx": "ekr.20161021095001.1",
                  "vh": "@bool run-pyflakes-on-write = False"
                },
                {
                  "gnx": "ekr.20150321090958.1",
                  "vh": "@bool verbose-check-outline = False"
                },
                {
                  "gnx": "ekr.20150710084507.1",
                  "vh": "@bool syntax-error-popup = False"
                }
              ]
            },
            {
              "gnx": "ekr.20041119034357.12",
              "vh": "External files",
              "children": [
                {
                  "gnx": "ekr.20041119034357.14",
                  "vh": "@bool at-root-bodies-start-in-doc-mode = True"
                },
                {
                  "gnx": "ekr.20070419103554",
                  "vh": "@bool force-newlines-in-at-nosent-bodies = True"
                },
                {
                  "gnx": "ekr.20041119041747",
                  "vh": "@string output-newline = nl"
                },
                {
                  "gnx": "ekr.20081216090156.5",
                  "vh": "@string underindent-escape-string = \\\\-"
                }
              ]
            },
            {
              "gnx": "ekr.20041119034357.7",
              "vh": "Leo files",
              "children": [
                {
                  "gnx": "ekr.20041119034357.8",
                  "vh": "@string output-initial-comment = None"
                },
                {
                  "gnx": "ekr.20041119034357.9",
                  "vh": "@string stylesheet = "
                },
                {
                  "gnx": "ekr.20080921060401.3",
                  "vh": "@string default-leo-file = ~/.leo/workbook.leo"
                },
                {
                  "gnx": "vitalije.20170811125150.1",
                  "vh": "@string default-leo-extension = .leo"
                }
              ]
            },
            {
              "gnx": "ekr.20110611092035.16474",
              "vh": "Recent files",
              "children": [
                {
                  "gnx": "tbrown.20081003103821.1",
                  "vh": "@bool recent-files-group = False"
                },
                {
                  "gnx": "tbrown.20081003103821.2",
                  "vh": "@bool recent-files-group-always = False"
                },
                {
                  "gnx": "tbrown.20180212145842.1",
                  "vh": "@data path-demangle"
                }
              ]
            },
            {
              "gnx": "ekr.20060730101451",
              "vh": "Shadow files",
              "children": [
                {
                  "gnx": "ekr.20181018110022.1",
                  "vh": "@bool shadow-in-home-dir = False"
                },
                {
                  "gnx": "ekr.20060730101451.3",
                  "vh": "@string shadow-prefix = x"
                },
                {
                  "gnx": "ekr.20060730101451.5",
                  "vh": "@string shadow-subdir = .leo_shadow"
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20041119034357.20",
          "vh": "Find/replace options",
          "children": [
            {
              "gnx": "ekr.20141024165714.1",
              "vh": "@bool auto-scroll-find-tab = True"
            },
            {
              "gnx": "ekr.20131119143342.20107",
              "vh": "@bool minibuffer-find-mode = False"
            },
            {
              "gnx": "tbrown.20151010094807.1",
              "vh": "@bool show-find-result-in-status = True"
            },
            {
              "gnx": "ekr.20150710065036.1",
              "vh": "@bool preload-find-pattern = False"
            },
            {
              "gnx": "ekr.20210901110017.1",
              "vh": "@bool reverse-find-defs = False"
            },
            {
              "gnx": "ekr.20150618105435.1",
              "vh": "@bool use-find-dialog = False"
            },
            {
              "gnx": "ekr.20041119050105.1",
              "vh": "@string change-text = None"
            },
            {
              "gnx": "ekr.20041119050105.2",
              "vh": "@string find-text = None"
            },
            {
              "gnx": "ekr.20131119143342.20108",
              "vh": "Find panel defaults",
              "children": [
                {
                  "gnx": "ekr.20041119050105.3",
                  "vh": "Checkboxes in the Find panel",
                  "children": [
                    {
                      "gnx": "ekr.20041119050105.4",
                      "vh": "@bool batch = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.5",
                      "vh": "@bool ignore-case = True"
                    },
                    {
                      "gnx": "ekr.20041119050105.6",
                      "vh": "@bool mark-changes = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.7",
                      "vh": "@bool mark-finds = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.9",
                      "vh": "@bool reverse = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.8",
                      "vh": "@bool pattern-match = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.14",
                      "vh": "@bool search-body = True"
                    },
                    {
                      "gnx": "ekr.20041119050105.15",
                      "vh": "@bool search-headline = True"
                    },
                    {
                      "gnx": "ekr.20041119050105.10",
                      "vh": "@bool whole-word = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.11",
                      "vh": "@bool wrap = False"
                    }
                  ]
                },
                {
                  "gnx": "ekr.20110611092035.16476",
                  "vh": "Radio buttons in the Find panel",
                  "children": [
                    {
                      "gnx": "ekr.20041119050105.12",
                      "vh": "@bool node-only = False"
                    },
                    {
                      "gnx": "ekr.20041119050105.16",
                      "vh": "@bool suboutline-only = False"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20110611092035.16480",
          "vh": "Import options",
          "children": [
            {
              "gnx": "ekr.20211209060458.1",
              "vh": "@bool put-class-in-imported-headlines = True"
            },
            {
              "gnx": "tbrown.20180525163032.1",
              "vh": "@bool add-context-to-headlines = True"
            },
            {
              "gnx": "ekr.20200620064409.1",
              "vh": "@bool add-file-context-to-headlines = True"
            },
            {
              "gnx": "ekr.20200620060909.1",
              "vh": "@bool put-cython-decorators-in-imported-headlines = False"
            },
            {
              "gnx": "ekr.20080811105020.2",
              "vh": "@bool suppress-import-parsing = False"
            },
            {
              "gnx": "ekr.20170825083426.1",
              "vh": "@data c-import-typedefs"
            },
            {
              "gnx": "ekr.20111029055127.16616",
              "vh": "@data import-html-tags"
            },
            {
              "gnx": "ekr.20111029055127.16614",
              "vh": "@data import-xml-tags"
            },
            {
              "gnx": "ekr.20181018075844.1",
              "vh": "zim importer options",
              "children": [
                {
                  "gnx": "ekr.20181018075857.1",
                  "vh": "@int zim-rst-level = 0"
                },
                {
                  "gnx": "ekr.20181018075747.1",
                  "vh": "@string path-to-zim = None"
                },
                {
                  "gnx": "ekr.20181018075857.3",
                  "vh": "@string zim-node-name = Imported Zim Tree"
                },
                {
                  "gnx": "ekr.20181018075857.2",
                  "vh": "@string zim-rst-type = rst"
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20110611092035.16491",
          "vh": "Leo Directives",
          "children": [
            {
              "gnx": "ekr.20041119034357.32",
              "vh": "@int page-width = 80"
            },
            {
              "gnx": "ekr.20041119034357.31",
              "vh": "@int tab-width = -4"
            }
          ]
        },
        {
          "gnx": "felix.20230927160655.1",
          "vh": "Plugins",
          "children": [
            {
              "gnx": "felix.20230927161926.1",
              "vh": "scripting plugin",
              "children": [
                {
                  "gnx": "felix.20230927161926.2",
                  "vh": "@bool scripting-at-button-nodes = True"
                },
                {
                  "gnx": "felix.20230927161926.3",
                  "vh": "@bool scripting-at-rclick-nodes = False"
                },
                {
                  "gnx": "felix.20230927161926.4",
                  "vh": "@bool scripting-at-commands-nodes = True"
                },
                {
                  "gnx": "felix.20230927161926.5",
                  "vh": "@bool scripting-at-plugin-nodes = False"
                },
                {
                  "gnx": "felix.20230927161926.6",
                  "vh": "@bool scripting-at-script-nodes = False"
                },
                {
                  "gnx": "felix.20230927161926.7",
                  "vh": "@bool scripting-create-debug-button = False"
                },
                {
                  "gnx": "felix.20230927161926.8",
                  "vh": "@bool scripting-create-run-script-button = False"
                },
                {
                  "gnx": "felix.20230927161926.9",
                  "vh": "@bool scripting-create-script-button-button = True"
                },
                {
                  "gnx": "felix.20230927161926.10",
                  "vh": "@int scripting-max-button-size = 18"
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20110611092035.16481",
          "vh": "Scripting",
          "children": [
            {
              "gnx": "ekr.20061029091403",
              "vh": "@bool show-full-tracebacks-in-scripts = False"
            }
          ]
        },
        {
          "gnx": "ekr.20110611092035.16463",
          "vh": "Tree operation",
          "children": [
            {
              "gnx": "nh910.20110621123823.3423",
              "vh": "@bool collapse-nodes-after-move = True"
            },
            {
              "gnx": "ekr.20060930085532",
              "vh": "@bool collapse-nodes-during-finds = True"
            },
            {
              "gnx": "ekr.20080315083057.7",
              "vh": "@bool collapse-nodes-while-spelling = True"
            },
            {
              "gnx": "felix.20220506230435.1",
              "vh": "@bool collapse-on-goto-first-last-visible = True"
            },
            {
              "gnx": "ekr.20111109104336.12503",
              "vh": "@bool collapse-on-lt-arrow = True"
            },
            {
              "gnx": "ekr.20070615094204",
              "vh": "@bool contractVisitedNodes = True"
            },
            {
              "gnx": "tbnorth.20160414102131.1",
              "vh": "@bool drag-alt-drag-expands = True"
            },
            {
              "gnx": "ekr.20041119050749.4",
              "vh": "@bool enable-drag-messages = False"
            },
            {
              "gnx": "ekr.20131008181812.17533",
              "vh": "@bool enable-tree-dragging = True"
            },
            {
              "gnx": "ekr.20061012122620",
              "vh": "@bool insert-new-nodes-at-end = False"
            },
            {
              "gnx": "tbrown.20110212091818.20118",
              "vh": "@bool inter-outline-drag-moves = False"
            },
            {
              "gnx": "ekr.20181018105945.1",
              "vh": "@bool invisible-outline-navigation = False"
            },
            {
              "gnx": "ekr.20100107060708.6390",
              "vh": "@bool qt-tree-multiple-selection = True"
            },
            {
              "gnx": "ekr.20110601103939.19339",
              "vh": "@bool single-click-auto-edits-headline = False"
            },
            {
              "gnx": "ekr.20061007211759",
              "vh": "@bool sparse-move-outline-left = False"
            },
            {
              "gnx": "ekr.20060122105527.7",
              "vh": "@bool stayInTreeAfterSelect = True"
            },
            {
              "gnx": "ekr.20061002115414.1",
              "vh": "@float outline-nav-extend-delay = 2.0"
            },
            {
              "gnx": "chris.20180324074923.1",
              "vh": "@int icon-height = 16"
            },
            {
              "gnx": "ekr.20171121100639.1",
              "vh": "Declutter",
              "children": [
                {
                  "gnx": "tbrown.20150807123339.1",
                  "vh": "@bool tree-declutter = False"
                },
                {
                  "gnx": "tbrown.20150807123421.1",
                  "vh": "@data tree-declutter-patterns",
                  "children": [
                    {
                      "gnx": "ekr.20171122113628.1",
                      "vh": " About Decluttering",
                      "children": [
                        {
                          "gnx": "ekr.20171122113628.3",
                          "vh": "Rule & replacement lines"
                        },
                        {
                          "gnx": "ekr.20171122113628.4",
                          "vh": "Style lines"
                        }
                      ]
                    },
                    {
                      "gnx": "ekr.20171122044441.3",
                      "vh": "declutter: add icon to folders and remove..."
                    },
                    {
                      "gnx": "ekr.20171122044441.1",
                      "vh": "declutter: demo pattern"
                    },
                    {
                      "gnx": "ekr.20171122044417.1",
                      "vh": "declutter: hide org-mode tags"
                    },
                    {
                      "gnx": "ekr.20171122044441.2",
                      "vh": "declutter: replace @<file> with an icon"
                    },
                    {
                      "gnx": "ekr.20171122044906.1",
                      "vh": "declutter: show last part of long filenames"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "gnx": "ekr.20041119034357.15",
          "vh": "Unicode options",
          "children": [
            {
              "gnx": "ekr.20041119042929.10",
              "vh": "@string new-leo-file-encoding = utf-8"
            },
            {
              "gnx": "ekr.20080212084020",
              "vh": "@string default-at-auto-file-encoding = utf-8"
            },
            {
              "gnx": "ekr.20041119042929.9",
              "vh": "@string default-derived-file-encoding = utf-8"
            }
          ]
        },
        {
          "gnx": "ekr.20110611092035.16471",
          "vh": "Widget colors",
          "children": [
            {
              "gnx": "ekr.20080326060254.3",
              "vh": "@string target-language = plain"
            }
          ]
        },
        {
          "gnx": "ekr.20041213105954",
          "vh": "Windows",
          "children": [
            {
              "gnx": "ekr.20041119034357.38",
              "vh": "Body pane options",
              "children": [
                {
                  "gnx": "jlunz.20151119171553.1",
                  "vh": "@bool cursor-stay-on-paste = True"
                },
                {
                  "gnx": "ekr.20061010111324",
                  "vh": "@bool select-all-text-when-editing-headlines = False"
                },
                {
                  "gnx": "ekr.20060531094310",
                  "vh": "@bool autoindent-in-nocolor-mode = True"
                },
                {
                  "gnx": "ekr.20041119034357.43",
                  "vh": "@bool body-gmt-time = False"
                },
                {
                  "gnx": "jlunz.20151120072157.1",
                  "vh": "@bool body-pane-wraps = True"
                },
                {
                  "gnx": "ekr.20041119034357.42",
                  "vh": "@string body-time-format-string = %m/%d/%Y %H:%M:%S"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "tnodes": {
    "ekr.20041119035137": "@language rest\n@wrap\n@pagewidth 80\n\nThis is the LeoJS main settings file.  It specifies settings used to customize LeoJS.\n\n@settings trees are composed of various kinds of nodes.\n\nThe headline of each node indicates its type.\n\nThe body text of most nodes contain comments. However, the body text of @data, @font and @shortcuts nodes contain settings. See the children of this node for details.\n",
    "ekr.20041122163623": "When looking for @whatever, Leo converts whatever to lower case and removes\nminus signs. For example, the following are equivalent::\n\n    @if-platform\n    @ifPlatform\n    @ifplatform\n",
    "ekr.20041119035704": "These nodes describe the type, name and value of a single setting. Their\nheadlines have the form::\n\n    @type-name setting-name = value\n\nThe basic types are: @bool, @color, @directory, @encoding, @font, @int, @path,\nand @string.\n\nNone is a valid value for all types, indicating that the setting node has no\neffect.\n",
    "ekr.20041119042929.1": "Value must be Qt color name or value, such as 'red' or 'xf2fddff' (without the quotes).\n\nUnlike in @data qt-gui-plugin-style-sheet, @values are not allowed as color values.",
    "ekr.20111003130143.15561": "**Important**: these nodes **only** specify fonts used by Leo's syntax colorizer.\n\nTo set fonts in Leo's widgets, change Leo's master style sheet::\n    \n    @data qt-gui-plugin-style-sheet\n    \n**Notes**\n    \n- Leo ignores everything in the headline after @font: only the body matters.\n- Body lines starting with '#' are comments.\n- All other body lines should have the form:\n\n    <optional language name><jEdit or Pygments key><specifiers>\n\n- Underlines and '-' characters are ignored, and can be used for readability.\n- Valid specifiers are:\n    \n    family: a font family name.\n            None is the default, indicating the default font.\n    size:   an integer.  Leo will ignore suffixes like pt and px.\n    weight: bold, normal, None.'\n            Default is normal.\n    slant:  roman, italic, None.\n            Default is roman.\n\n- **Note**: A single @font node may create settings for different languages.\n            See example 3 below.\n\nExample 1: Sets the comment1 font, for python only:\n\npython_comment1_family = None\npython_comment1_size = 12\npython_comment1_slant = italic\npython_comment1_weight = None\n\nExample 2: Sets the comment1 font for all languages:\n\ncomment1_family = None\ncomment1_size = 12\ncomment1_slant = italic\ncomment1_weight = bold\n\nExample 3: Combining the previous two examples:\n\npython_comment1_size = 12\npython_comment1_slant = italic\ncomment1_size = 12\ncomment1_slant = italic\n\nUse the show-fonts command to pick fonts, then copy the values shown by the\nshow-fonts command to the values here.\n",
    "ekr.20041120181045": "A float value restricted to the range 0.0 to 1.0.",
    "ekr.20041119042929.2": "Same as @directory.",
    "ekr.20041119035704.1": "Organizer nodes have headlines that do **not** start with @.\n\nOrganizer nodes may be inserted freely without changing the meaning of an @setting tree.",
    "ekr.20071217093419": "The body text should contain the data, one string per line. Lines starting with '#' are *included* in the data.\n\n@data nodes may be split: the data consists of the body text of the @data node itself and the body text of all descendant nodes, in outline order. Two fine points about the concatenation of data:\n\n1. Descendant nodes whose headlines start with '@' do not become part of the data. At present, no @data nodes have descendants, but this convention does something reasonable if nodes like @int or @string were descendants of an @data node.\n\n2. The @data parser adds a newline to every \"fragment\" if necessary. This doesn't seem to matter for style sheets, but it could matter for other kinds of @data data.\n\n**@data qt-gui-plugin-style-sheet**\n\nThe @data qt-gui-plugin-style-sheet node consists of some general comments, with descendant nodes for the body pane, tree pane, etc. etc. There is no limit of nesting: the Plugins node has a child for each plugin that uses style sheets.\n\nThis makes debugging style sheets easier. Typically, an error in any part of the style sheet invalidates the whole style sheet. With the new organization, one can swap nodes into or out of the @data node to find the invalid node or nodes.\n\n**@data history-list**\n\nContains a list, one per line, of command names to be added to command history.  Order is significant.\n",
    "ekr.20080312071248.25": "Denotes the tree containing active @button nodes.\n@button nodes outside this tree are ignored.",
    "ekr.20080312071248.19": "The headline contains the button name, optionally followed by an @key=val field indicating a shortcut.\n\nThe body text contains the script associated with the button.",
    "ekr.20080312071248.26": "Denotes the tree containing active @command nodes.\n@command nodes outside this tree are ignored.",
    "ekr.20080312071248.20": "The headline contains the command name, optionally followed by an @key=val field indicating a shortcut.\n\nThe body text contains the script associated with the command.",
    "ekr.20070224073109": "The body text of @enabled-plugins nodes contain the list of enabled plugins, one per line.\n\nComment lines starting with '#' are ignored.\n\nLeo loads plugins in the order they appear.\n\nThere has been considerable confusion in the past about just how this works. Please read the following carefully.\n\nLet us distinguish two different situations. First, what Leo does when loading a file, say x.leo initially. Second, what Leo does when loading a second file, say y.leo, *from x.leo*.\n\nIn the first case, Leo will use the *last* found @enabled-plugins node from the list list of settings files.  As always, the search order for settings is:\n\n1. leo/config/leoSettings.leo\n2. ~/.leo/leoSettings.leo\n3. leo/config/myLeoSettings.leo\n4. ~/.leo/myLeoSettings.leo\n5.  x.leo\n\nIn the first case, it *is* possible to disable any or all plugins. For example, you could put an empty @enabled-plugins node in x.leo. If x.leo contains no @enabled-plugins node, you could put an empty @enabled-plugins node in myLeoSettings.leo.\n\nIn the second case, plugins have *already* been loaded and enabled. In this case, there is *no way* to disable already-loaded-and-enabled plugins. All you can do is enable more plugins.\n\ny.leo can enable more plugins if it contains an @enabled-plugins node that mentions more plugins. If y.leo contains no @enabled-plugins node, loading y.leo might cause myLeoSettings.leo to enable more plugins if\n\na) x.leo contained an @enabled-plugins node and\nb) myLeoSettings.leo mentions plugins not mentioned x.leo\n\nTo summarize, Leo enables plugins in a (relatively) straightforward way when it loads x.leo. Leo also enables plugins (in the same way) when loading y.leo. But things might get confusing, depending on whether x.leo or y.leo (or both or neither) contain @enabled-plugins nodes. This simply can't be helped, and it is emphatically *not* a bug in Leo.\n\nLeo acts in a reasonable manner, but it is still possible to get confused even if you know the rules. This suggests that you refrain from putting @enabled-plugins nodes in any .leo file except myLeoSettings.leo. That way all your .leo files will use the same plugins. If you do put @enabled-plugins nodes in x.leo, be prepared for confusion from time to time.\n",
    "ekr.20060913144412": "@keys nodes mark as set of @shortcuts nodes.  @keys nodes are used only by the script in the node:\n    \n    @button Check Bindings\n    \nin this file.  This makes it possible for the script to produce better error messages.",
    "ekr.20150426033400.1": "Enables descendant settings depending on the value of an environment variable.\n\nValid form is:\n\n    @ifenv name,comma-separated-values\n\nCase is significant in the *name* of the environment variable.\nCase is ignored in the *values*.\n\nExamples:\n\n@ifenv HOSTNAME,bob\n    Enables descendant settings if os.environ('HOSTNAME') is 'Bob' or 'bob'\n    \n@ifenv EDITOR,leo,lion\n    Enables descendant settings if os.environ('Editor') is 'Leo' or 'Lion'.\n",
    "ekr.20150426031409.1": "Enables descendant settings depending on the HOSTNAME environmental variable.\n\nCase is ignored in the value of the environment variable.\n\nFor example, let h = os.environ('HOSTNAME').lower()\n        \n@ifhostname bob\n    Enables descendant settings if h == 'bob'\n\n@ifhostname !bob\n    Enables descendant settings if h != 'bob'\n",
    "ekr.20041119110141": "Enable descendant settings if sys.platform is the given platform name or names.\n\nTypical platform names are darwin, linux2, win32.\n\nCase is ignored in platform names.\n\nExamples:\n\n@ifplatform darwwin, linux2\n    Enables descendant settings for MacOs or Linux\n    \n@ifplatform win32\n    Enables descendant settings for Windows\n    \n",
    "ekr.20041119035704.2": "Leo ignores subtrees of @settings trees whose headline starts with @ignore.",
    "ekr.20170823083657.1": "Leo creates its menus using @menus trees. Within @menus trees,\n@menu nodes create menus and @item nodes create menu items.\n\nNotes:\n\n- The menu name always follows @menu. If the menu name is 'Plugins', Leo will create the Plugins menu and populate the menu by calling the 'create-optional-menus' hook. This creates the Plugins menu as usual.\n\n- The first non-blank, non-comment line of the body of an @menu item is an an alternate name for the menu.  This allows translations of menus.\n\n- Nested @menu nodes contain submenus.\n\n- The command name follows @item. If the body text of an @item node exists, the first non-blank, non-comment line of the body text is the menu name. Otherwise, the menu name is the command name. However, if the command name starts with a '*', hyphens are removed from the menu name.\n\n- Menu names and command names may contain a single ampersand (&). If present, the following character is underlined in the name.\n\n- If the command name in an @item node is just a hyphen (-), the item represents a menu separator.\n",
    "ekr.20130503155210.16364": "\\@menuat modifies the menu tree created by \\@menus. This allows settings in\nmyLeoSettings.leo to change menues without copying the entire menu tree from\nleoSettings.leo. This ensures you don\u2019t miss out when new things are added in\nthe @menus in leoSettings.leo, as you would if you replaced the @menus in\nleoSettings.leo with one in myLeoSettings.leo.\n\n\\@menuat should occur in a \\@settings tree, but not as a descendant of a \\@menus\ntree. Its children are \\@menu and \\@item nodes as for the\n@menu setting.\n\nThe @menuat setting has 2-3 parameters in its head text.\n\n    @menuat *<path>* *<action>* *[clipboard]*\n\nThe path argument specifies a **target** in the menu tree as defined by\n\\@menus and modified by earlier @menuat settings. The path takes the form::\n\n    /entry1/entry2/entry3\n    \nEach entry is the **cleaned** name of a menu or item. Cleaned names are a\nname with all text except a-z and 0-9 removed and upper case letters converted\nto lower case. For example, specify::\n\n    Outline->Move->Move Down\n    \nas::\n    \n     /outline/move/movedown\n\nThe action argument specifies what the menu item does. There are 5 available\nactions:\n\n- before: Insert items and sub menus immediately before the target.\n- after:  Insert items and sub menus immediately after the target.\n- append: Append items and sub menus at the end of the target menu or item.\n- cut:    Remove the target from the menu tree and save it to an internal clipboard.\n- copy:   Copy the target to an internal clipboard. Descendants of the @menuat setting are ignored.\n\nThe cut and copy arguments ignore descendants of the @menuat setting .\n\nThe optional clipboard argument modifies the action of the before, after, and\nappend actions. By default these actions insert the menus and items supplied as\ndescendants of the @menuat setting. If you specify \u201cclipboard\u201d (without the\nquotes) as the source, the contents of the clipboard from a previous cut or copy\naction will be used instead.",
    "ekr.20070411172718": "@openwith nodes in @settings trees create menu items. The openWith\nplugin must be active for these settings to have any effect.\n\nThe headline of an @openwith node has the form::\n\n    @openwith name = shortcut\n    \nname is name of the menu item. shortcut specifies the shortcut used to invoke\nthe menu item. shortcut may be None.\n\nThe body text @openwith nodes should contain a single line contain a tuple of the form::\n\n    command,arg,ext\n\nFor example::\n    \n    'subprocess.Popen',['pythonw','C:/Python24/Lib/idlelib/idle.pyw'],'.py'\n    \nWhen the user selects this menu item Leo executes command(arg+path) where path\nis the full path to the temp file. The ext argument specifies the extension of\nthe temp file. Notes:\n\n- command is a string.  Valid values are::\n    \n  'subprocess.Popen'\n  'os.system'\n  'os.startfile'\n  'os.spawnl'\n  'os.spawnv'\n  'exec'\n  \n- arg is either a single string or a list of strings.\n\n- ext is a string or None. If None, Leo computes a file extension base on what\n  @language directive is in effect.\n  \n- If the .leo file being loaded contains @openwith nodes, the File:Open With\nmenu contains only the items created by those nodes. Similarly, @openwith nodes\nin myLeoSettings.leo override entries in leoSettings.leo.\n",
    "ekr.20131115075142.18226": "\\@outline-data nodes and their descendants create settings whose values are\nentire trees. Here's how it works:\n\nThe *value* returned by c.config.getOutlineData is the xml string created when\nLeo pastes the @outline-data node to the clipboard. As a result, Leo can use all\nthe standard configuration code for @outline-data! Settings in a local file\noverride myLeoSettings.leo settings, which override settings in leoSettings.leo.\n\nTo retrive the value of an @outline-data setting::\n\n    s = c.config.getOutlineData(setting-name)\n    c.fileCommands.leo_file_encoding='utf-8' p =\n    c.pasteOutline(s=tree_s,redrawFlag=False,undoFlag=False)\n    \nThis makes the outline available for further processing.\n\nFor example, to handle tree-valued abbreviations, the inint code in the\nabbrevCommandsClass pastes the outline into the present outline, uses the pasted\noutline to discover tree-valued abbreviations, and then *deletes* the tree.\n\n",
    "ekr.20180124050114.1": "For each @button node, Leo adds right-click menu items for:\n\n- @rclick nodes directly *following* the @button.\n\n- @rclick nodes that are *children* of the @button node, provided that the\n  @button node has no ``@others`` directive.\n\n**Standard rclick items**: Leo adds two standard right-click menu items for\neach @button node: ``Remove Button`` and ``Goto Script``. Leo adds the\nindicator text **only** to buttons that contain right-click menu items in\naddition to these two standard right-click menu items.\n\nThe headline of the @rclick node gives the menu title. The body contains a\nLeo script to execute when the user selects the menu item.\n\n**Related Setting**:\n\n@string mod_scripting_subtext = \u25bc\n\nThis setting specifies **indicator text** that indicates that an @button button has right-click menu items created by @rclick nodes.\n\nUnicode chars like \u25bc \u25be and \u2026 are typical choices for this text.\n",
    "ekr.20041119105509": "**Not implemented**.\n\nCreates a permanent value that can be tested later with @if. That is, it alters\nthe environment in which @if code is executed.",
    "ekr.20041120155431.1": "The body text of @shortcut nodes contain the specification for zero or more shortcuts.\n\nLines starting with # are ignored.\n\nAll other non-blank lines should have the form:\n\ncommandName = shortcut specifier.\n\n**Note**: not all bindings are possible on MacOS, especially Ctrl-H and Ctrl-period.",
    "ekr.20041119035704.3": "Not implemented yet.\n\nCreates a user-defined type. For example:\n\n@type relief: string = [raised, sunken, flat, ridge, solid, groove]\n\nThis is much better than using a base type because the dialog creator can\npresent the user with a listbox containing only the valid options.",
    "ekr.20041120155431.2": "Not implemented yet.\n\nAutments the settings parser and the dialog creator with scripts.",
    "ekr.20061011082224": "@language rest\n@wrap\n\nmyLeoSettings.leo contains your personal settings.\n\nSettings in myLeoSettings.leo override the settings in this file.\n\nPut myLeoSettings.leo in your home (~) directory or in the ~/.leo directory.\n\nDistributions of Leo do not contain myLeoSettings.leo; Leo never\nchanges your personal myLeoSettings.leo file.\n\n**Note**: If you don't have myLeoSettings.leo, Leo creates it for you with a copy of @enabled-plugins from leoSettings.leo.\n",
    "ekr.20041119034357.1": "@language rest\n@wrap\n\nThis @settings tree contains all active settings.\n\nSettings outside this tree have no effect.\n\nThe node \"Qt Gui Stylesheet settings\" contains most of the setting relating to appearance.\n",
    "ekr.20201010141557.1": "The name of Leo's active theme, or None, which gives Leo's legacy (light) theme.\n\nTo enable a theme, put the following setting in myLeoSettings.leo:\n\n@string theme-name = <name of .leo file>\n\nThe .leo suffix is optional. Leo looks for the named .leo file in this order:\n\n~  (The user's home directory)\n~/themes\n~/.leo\n~/.leo/themes\nleo/themes\n\nThe .leo file in the leo/themes folder are:\n\nBreezeDarkTheme.leo\nBreezeDark2Theme.leo\nDefaultTheme.leo\nEKRDark.leo\nEKRLight.leo\nLeoBlackSolarized.leo\nPaperLightTheme.leo\nZephyrDarkTheme.leo",
    "ekr.20041119034357.10": "See the \"Tree Operation\" node for settings that affect how the tree pane works.",
    "ekr.20131112150804.18737": "True: the execute-script command executes the entire body, even if text is selected.",
    "ekr.20150227102835.1": "True: (Recommended) Make a \"Recovered Nodes\" node whenever Leo reads a file that has been changed outside of Leo.\n",
    "ekr.20180117074230.1": "# True: Show user tips on startup.",
    "ekr.20060323131801": "True: warn if a command has no setting.",
    "ekr.20220105172501.1": "# comma-separated pairs of strings: (argument-name, typescript-type)\n\n# Note: add-mypy-annotations can automatically annotate kwargs initialized to \n#       bool, float, int or string constants.\n\n# Define default annotations for arguments and return types.\n\nDEFAULT, str\nDEFAULT_RETURN, None\n\n# Naming conventions used in Leo.\n\nc, Cmdr\ncallback, Callable\nch, str\nchar, str\nd, Dict[str, str]\nevent, Event\ngnx, str\ni, int\nj, int\nk, int\nn, int\np, Pos\ns, str\nv, VNode\nw, Wrapper\n",
    "ekr.20210530064911.1": "# This node contains the commands needed to execute a program in a particular language.\n\n# Format: language-name: command\n\n# Create a temporary file if c.p is not any kind of @<file> node.\n\n# Compute the final command as follows:\n\n# 1. If command contains <FILE>, replace <FILE> with the full path to the external file.\n# 2. If command contains <NO-FILE>, just remove <NO-FILE>.\n# 3. Otherwise, append the full path to the external file to the command.\n\ngo: go run . <NO-FILE>\npython: python\nrust: rustc\n",
    "ekr.20210530064922.1": "# This node contains the regex pattern to determine the line number in error messages.\n# Format: language-name: regex pattern\n#\n# Patterns must define two groups, in either order:\n# One group, containing only digits, defines the line number.\n# The other group defines the file name.\n\ngo: ^\\s*(.*):([0-9]+):([0-9]+):.+$\npython: ^\\s*File \"(.+)\", line ([0-9]+), in .+$\nrust: ^\\s*--> (.+):([0-9]+):([0-9]+)\\s*$",
    "ekr.20160428072005.1": "# Lines starting with '#' are comment lines.\n# A list of command names to be pre-loaded into the history list.\n# pylint\n# sort-lines\n",
    "ekr.20211014064402.1": "# comma-separated pairs of strings: (argument-name, typescript-type)\nc, Commands\nch, character\ngnx, string\nd, dictionary\ni, number\nj, number\nk, number\nn, number\np, Position\ns, string\nv, VNode",
    "ekr.20190608085550.1": "The maximum line length allowed by the find-long-lines command.",
    "ekr.20180301060510.1": "The maximum number of lines to show in @data nodes.\n\n0 causes all lines to be shown.\n",
    "ekr.20041119041019.1": "The string to be appended to file names resulting from the Remove Sentinels command.\nIf the value starts with . the extension is appended to the original file name.\nOtherwise, the extension is appended before the file extension.\nExample 1:\n  File name x.y\n  remove_sentinels_extension = _ns\n  Result: x_ns.y\nExample 2:\n  File name x.y\n  remove_sentinels_extension = .txt\n  Result: x.y.txt\n\n",
    "ekr.20110917104720.9415": "# The names of your classes, one per line.\n\nCommands\nvnode\nposition\n",
    "ekr.20110917104720.9416": "# The names of your typedef types and standard types, one per line.\n#\n# c-to-python converts::\n#\n#   new aType(...)\n#\n# to::\n#\n#   aType(...)\n\nchar\nvoid\nshort\nlong\nint\ndouble\nfloat\nunsigned",
    "ekr.20110917104720.9417": "# The instance variables (ivars) used by your programs classes.\n# This creates a dictionary.  Keys are class names, values are lists of ivars.\n\n# Lines ending with a colon specify keys.\n# All other lines are comma-delimited lists of ivars for the last-seen key.\n# Trailing commas are ignored.\n\natFile:\n    mCommands, mErrors, mStructureErrors,\n    mTargetFileName, mOutputFileName, mOutputStream,\n    mStartSentinelComment, mEndSentinelComment, mRoot\n\nvnode:\n    mCommands, mJoinList, mIconVal, mTreeID, mT, mStatusBits\n\ntnode:\n    mBodyString, mBodyRTF, mJoinHead, mStatusBits, mFileIndex,\n    mSelectionStart, mSelectionLength, mCloneIndex,\n\nLeoFrame:\n    mNextFrame, mPrevFrame, mCommands,\n\nCommands:\n# public\n    mCurrentVnode, mLeoFrame, mInhibitOnTreeChanged, mMaxTnodeIndex,\n    mTreeCtrl, mBodyCtrl, mFirstWindowAndNeverSaved,\n#private\n    mTabWidth, mChanged, mOutlineExpansionLevel, mUsingClipboard,\n    mFileName, mMemoryInputStream, mMemoryOutputStream, mFileInputStream,\n    mInputFile, mFileOutputStream, mFileSize, mTopVnode, mTagList,\n    mMaxVnodeTag,\n    mUndoType, mUndoVnode, mUndoParent, mUndoBack, mUndoN,\n    mUndoDVnodes, mUndoLastChild, mUndoablyDeletedVnode,\n",
    "ekr.20041119050749.10": "The format string used when creating the Time/Date string for the Insert Time/Date command.\n\nSee the Python documentation for time.strftime for full details.\n\nExamples:\n1/30\n%m/%d\n\n1/30/03 8:31:02\n%m/%d/%y %H:%M:%S\n\nThu, 30 Jan 2003 16:57:12\n%a, %d %b %Y %H:%M:%S\n",
    "ekr.20160127051552.1": "True: allow stub files to be overwritten\n",
    "ekr.20181018103813.1": "True: use verbose mode.",
    "ekr.20181018103757.1": "\n",
    "ekr.20160127043520.1": "AstFormatter.*: str\nPattern.all_matches: Sequence\nPattern.full_balanced_match: Optional[int]\nPattern.match_balanced: int\nPattern.match_entire_string: bool\nStandAloneMakeStubFile.scan_types: Dict[str, str]\nStubFormatter.do_.*: str\nStubTraverser.format_returns: str\nStubTraverser.match_return_patterns: Tuple[bool,str]\nStubTraverser.match_return_pattern: Optional[str]\nStubTraverser.match_balanced: int",
    "ekr.20160130145944.1": "# Patterns to be applied to argument lists and return expressions.\n\naList: Sequence\ncontroller: StandAloneMakeStubFile\nfn: str\ni[0-3]*: int\nnode: Node\nparser: optparse.OptionParser\nrepr(*): str\ns[0-3]*: str\nstr%(*): str\nstr%str: str\nstr.join(*): str\nstr.replace(*): str\n\n# Leo patterns:\n\naList: Sequence\naList1: Sequence\naList2: Sequence\nc: C\nc1: C\nc2: C\ni: int\nj: int\nk: int\nnode: ast.Ast\np: P\np1: P\np2: P\ns: str\ns2: str\nstrict: bool\nv: V\nv1: V\nv2: V",
    "ekr.20160112111247.1": "# Lines to be inserted at the start of each stub file.\n\nfrom typing import Any, Dict, Optional, Sequence, Tuple, Union\n\n# At present, I don't understand how to tell mypy about ast.Node\n# import ast\n# Node = ast.Node\n\nNode = Any\n",
    "ekr.20160317062151.1": "# Regular expression patterns.\n\n.*__name__: str\n",
    "ekr.20160127051243.1": "The directory to which stub files are written.",
    "ekr.20160316112407.2": "True: allow stub files to be overwritten\n",
    "ekr.20160316112407.8": "The directory to which stub files are written.",
    "ekr.20071213060239": "@color",
    "ekr.20071213061811.2": "**True**: write additional informational messages to the log.",
    "ekr.20071213061454.1": "True: Writes **node markers** for use by the http plugin.\n\nNode markers are rst named hyperlink targets. By default they look like:\n``.. _http-node-marker-N``, where N is a unique node number.\n\n`@string rst3-node-begin-marker` specifies the format of these node markers.\n\n",
    "ekr.20071213061454.3": "The string used for node markers.  See `@bool rst3-http-server-support`.\n",
    "ekr.20071213061504": "The path to be prepended to *relative* filenames given in @rst nodes.\n\nThis setting has no effect for *absolute* filenames.",
    "ekr.20090430075506.7": "True: write comment line of the form:\n    \n.. rst3: filename: <filename>\n\nat these start of the output.",
    "ekr.20071213061811.1": "The underlining characters to be used to specify rST sections.\n\nThe first character is reserved (not used) so you can specify the top-level\nsection explicitly.",
    "ekr.20071213061811.3": "True: writes the intermediate file to the external file system.\n      Must be True when using Sphinx.\n    \nThe name of the intermediate file is the name of the output file with the extension given by\n\n`@string rst3-write-intermediate-extension`.\n",
    "ekr.20131027064821.18683": "The extention appended to the names of intermediate files.\n\nSee `@bool rst3-write-intermediate-file`",
    "ekr.20131009050634.17656": "True: Call docutils to process the intermediate file.\n\nSet this option to False when using Sphinx.",
    "ekr.20210327193418.1": "This setting has effect only if `@bool rst3-call-docutils = True`.\n\nTrue: Docutils will embed a the stylesheet in the output file.\nFalse: Docutils will link to an external stylesheet file.",
    "ekr.20071213061504.3": "This setting has effect only if `@bool rst3-call-docutils = True`.\n\nThis setting gives arguments to be passed to ``docutils.core.Publisher().publish()``\nwhen no stylesheet is in effect.\n\nThe setting should be comma-separated list of strings: For example, the option::\n\n    publish-argv-for-missing-stylesheets=--language=de,--documentclass=report,--use-latex-toc\n\nresults in the call::\n\n    publish(['--language=de','--documentclass=report','--use-latex-toc'])",
    "ekr.20071213061504.1": "The name of the stylesheet passed to docutils.\n\nThis setting has effect only if `@bool rst3-call-docutils = True`.\n",
    "ekr.20071213061504.2": "The directory containing the stylesheet passed to docutils.\n\nThis setting has effect only if `@bool rst3-call-docutils = True`.\n",
    "ekr.20041119041019.2": "True:  The Save command clears undo buffer.\nFalse: The undo buffer persists across saves.",
    "ekr.20060127050605": "Zero (recommended): unlimited stack size.\nNon-zero: limit the maximum stack size to the given number.",
    "ekr.20050126083026": "node granularity: start a new undo unit when typing moves to a new node.\nline granularity: start a new undo unit when typing moves to new line.\nword granularity: start a new undo unit when typing starts a new word.\nchar granularity: start a new undo unit for each character typed.\n\n'line' granularity is the default used if no valid setting is specified.\n\nLeo used char granularity for all version prior to 4.3. char granularity is not\nrecommended; it is clumsy and wasteful of computer memory.",
    "ekr.20070926132045": "@language rest\n\nAll @button nodes in the @buttons tree define **global buttons** that\nappear in all Leo outlines.\n\nAll other @button nodes define **local buttons** that appear only in this\noutline.\n\n@language python\n",
    "ekr.20070926082407": "@language rest\n\nAll @button nodes in the @buttons tree define **global buttons** that appear in all Leo outlines.\n\nAll other @button nodes define **local buttons** that appear only in this outline.\n\n@language python\n",
    "ekr.20080312075451.1": "@language rest\n\nAll @command nodes in the @commands tree define **global commands** that\nappear in all Leo outlines.\n\nAll other @command nodes define **local commands** that are defined only in\nthis outline.\n",
    "ekr.20080312075451.2": "@language python\n@nocolor-node\n\nAll @command nodes in the @commands tree define **global commands** that appear in all Leo outlines.\n\nAll other @command nodes define **local commands** that are defined only in this outline.\n",
    "ekr.20061210091932": "True: call os.chdir(base) when handling a relative path.\n      as specified by the @string relative_path_base_directory setting.\n      \nFalse: Do not call os.chdir(base) when handing a relative path.",
    "ekr.20150216135059.1": "With @clean and @file, Leo can store persistent data in nodes. This\ninformation consists of the node\u2019s gnx (Global Node Index) and the node\u2019s\nuA, (User Attributes).\n\nThe gnx gives each node a unique, immutable identity. Gnx\u2019s make clones\npossible. The uA allows scripts and plugins to associate arbitrarily much\nadditional data with each node.\n\nBy default, Leo\u2019s importers preserve neither gnx\u2019s nor uA\u2019s. This makes\nimported @auto trees second class citizens. To remedy this, if an outline\ncontains an @persistence node, Leo will save data in the @persistence tree\nthat allows Leo to recover gnx\u2019s and uA\u2019s when re-reading @auto files\nlater. This allows clone links and uA\u2019s to persist.\n\nThis is an optional feature. The stored data is akin to bookmarks. The data\ncan \u201cbreak\u201d (become inaccessible) if the structure (including\nclass/method/function names) changes.\n",
    "ekr.20041119041304": "This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.\n\nTrue:  Leo attempts to create directories if they do not exist.\nFalse: Leo never attempts to create directories.",
    "ekr.20200226102131.1": "True: report unchanged files when saving a .leo file.",
    "ekr.20181018113812.1": "\n",
    "ekr.20041119041304.1": "This option specifies the directory to be used as a prefix for <filename> in\n\n@path <filename>\n@file <filename>\n@root <filename>\n\nwhen <filename> is a relative path.\n\nValid values for this option:\n\n'!' means relative to the location leo.py (recommended).\n'.' means relative to the location of the .leo file in the top window.\n\nAn absolute path (in platform-dependent format).\n\nRelative paths are not allowed because their meaning would depend on the changing value of the current working directory.",
    "ekr.20071110153046": "This option has effect only when importing so-called non-strict languages,\nfor which leading whitespace is not terribly significant.\n\nTrue: @auto warns about mismatches that occur solely in leading whitespace.",
    "ekr.20150403055250.1": "True: check all @<file> nodes in the outline for changes in corresponding external files.\n\nWarning: Checking many networked files can hang Leo. See:\nhttps://github.com/leo-editor/leo-editor/issues/262\n",
    "ekr.20161021095001.1": "True: run Pyflakes on each saved files, but only if it has been changed.",
    "ekr.20150321090958.1": "True: write check messages to Leo's log pane as well as the console.\n\nNote: check-outline always writes error messages to both log and console.",
    "ekr.20150710084507.1": "True: raise a dialog warning about Python errors when writing files.",
    "ekr.20041119034357.14": "This option affects how Leo treats body text in @root trees.\n\nTrue:    Body text in @root trees start in doc mode.\n\nThis is the way @root trees always worked prior to version 3.10.\n\nFalse:    Body text in @root trees start in code mode.\n\nThis way makes @root trees more compatible with @file trees.",
    "ekr.20070419103554": "True:  Leo ensures that non-empty body text ends in a newline in @nosent trees.\nFalse: Leo leaves body text alone when writing @nosent trees.",
    "ekr.20041119041747": "nl or lf: (recommended) All lines end with \"\\n\"\ncr:       All lines end with \"\\r\"\ncrlf:     All lines end with \"\\r\\n\"\nplatform: Lines end in platform-specific way.\n\nWith platform Leo opens output files in \"w\" mode rather than \"wb\" mode and writes '\\n'\n\nPlease specify nl when uploading files to Leo's CVS site.",
    "ekr.20081216090156.5": "The escape string that Leo inserts to represent underindented lines.\n\nIf a line starts with \\\\-N, Leo will write the line with N fewer spaces\nthan expected.\n\nAn **underindented line** is a line of body text that is indented less then\nthe starting line of the class, method or function in which it appears. Leo\noutlines can not represent such lines exactly: every line in an external\nfile will have at least the indentation of any unindented line of the\ncorresponding node in the outline. Leo will issue a warning (not an error)\nfor underindented Python comment lines. Such lines can not change the\nmeaning of Python programs.\n",
    "ekr.20041119034357.8": "Example:\n\n\"Created by Leo at @date\"\n\nA comment to be iserted in derived files just after the initial @+leo line.\nThe comment will appear in an @comment sentinel.\nNotes:\n1. Leo replaces @date with the date and time that the derived file was created.\n2. Use \\n to separate lines.\n3. This must be empty for compatibility with older versions of Leo.\n4. Please use an empty comment when updating to CVS!",
    "ekr.20041119034357.9": "@language rest\n\nIf present, say::\n    \n    @string stylesheet = x\n    \nThe .leo file will contain the following line::\n\n  <?xml-stylesheet x ?>\n\n**Note**: x should contain any needed XML escapes.\n\n**Note**: if x is empty, Leo will retain any xml-stylesheet line in the .leo file.\n",
    "tbrown.20081003103821.1": "True: if the same file (basename) occurs more than once in the recent files\nlist, i.e. on two different paths it will appear as a submenu with the basename\nas its heading, and the two (or more) paths as its entries.  This is easier to\nscan visually than multiple full paths.  If recent_files_omit_directories is\nTrue this setting has no effect.\n\nFalse: don't use submenus for multiple path entries, unless recent_files_group_always\nis true (and recent_files_omit_directories is False)\n",
    "tbrown.20081003103821.2": "True: same as recent_files_group, except that even files (basenames) which are unique\nhave their containing path listed in the submenu - so visual clutter is reduced\nbut you can still see where things come from before you load them.\n\nFalse: don't use submenus for multiple path entries, unless recent_files_group\nis true (and recent_files_omit_directories is False)\n",
    "tbrown.20180212145842.1": "# pairs of lines in this text indicate search and replace targets for\n# cleaning the recent files list.  Each pair of lines should start with\n# \"REPLACE:\" (first line) and \"WITH:\" (second line).  For example:\n#\n#  REPLACE: .gnome-desktop\n#     WITH: My Desktop\n#  REPLACE: /mnt/usr1/\n#     WITH: /\n\n",
    "ekr.20041119034357.20": "\n",
    "ekr.20141024165714.1": "True:  Scroll the find tab ensure find input field visible. (fixes bug 1254861)\nFalse: Never scroll the find tab automatically.",
    "ekr.20131119143342.20107": "@language rest\n\nThe @bool use-find-dialog and @bool minibuffer-find-mode settings comprise\na tri-state setting, as shown in this table:\n    \nminibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in\n--------------------    ---------------     --------------------------\n    True                    Ignored         minibuffer\n    False                   True            dialog\n    False                   False           Find tab in the log pane\n\n*All modes*\n\n- Start the search with Ctrl-F (start-search).\n- Enter the find pattern.\n- (Optional) Use <Tab> to enter the search pattern.\n- Use <Enter> to start the search.\n\n*dialog and find tab modes*\n\n- Non-functional \"buttons\" remind you of key bindings.\n\n*minibuffer mode*\n\n- Use Ctrl-G as always to leave the minibuffer.\n- The Find tab is not made visible, but the status area shows the settings.",
    "tbrown.20151010094807.1": "Should find commands show their result in the status line?\nThis setting must be explicitly set to `False` to suppress\nthe status line output, just deleting it to get a value of `None`\nwon't work - this preserves the default `True` action in the\nabsence of this setting.",
    "ekr.20150710065036.1": "True: start-search (F3) automatically loads the Find Pattern.",
    "ekr.20210901110017.1": "True: search for definitions starting from the last node of the ouline.",
    "ekr.20150618105435.1": "@language rest\n\nThe @bool use-find-dialog and @bool minibuffer-find-mode settings comprise\na tri-state setting, as shown in this table:\n    \nminibuffer-find-mode    use-find-dialog     mode: Ctrl-F puts focus in\n--------------------    ---------------     --------------------------\n    True                    Ignored         minibuffer\n    False                   True            dialog\n    False                   False           Find tab in the log pane\n\n*All modes*\n\n- Start the search with Ctrl-F (start-search).\n- Enter the find pattern.\n- (Optional) Use <Tab> to enter the search pattern.\n- Use <Enter> to start the search.\n\n*dialog and find tab modes*\n\n- Non-functional \"buttons\" remind you of key bindings.\n\n*minibuffer mode*\n\n- Use Ctrl-G as always to leave the minibuffer.\n- The Find tab is not made visible, but the status area shows the settings.",
    "ekr.20041119050105.1": "The change string (without the quotes unless quotes are part of the string).\n\nN.B. Leo requires utf-8 encoding for any non-ascii characters.",
    "ekr.20041119050105.2": "The find string (without the quotes unless quotes are part of the string).\n\nN.B. Leo requires utf-8 encoding for any non-ascii characters.\n\n",
    "ekr.20041119050105.3": "These settings determine whether the corresponding checkbox is checked by default.",
    "ekr.20041119050105.4": "Despite its name, this setting affects the default value of the Show Context checkbox.",
    "ekr.20041119050105.5": "When checked, the Find and Change commands ignore the case of alphabetic characters when determining matches.\n",
    "ekr.20041119050105.6": "When checked, the Change command marks all headlines whose headline or body text are changed by the command.\n",
    "ekr.20041119050105.7": "When checked, the Find and Change commands mark all headlines in which a match is found with the pattern.\n",
    "ekr.20041119050105.8": "When checked, the Find and Change commands treat several characters specially in\nthe find pattern. The '*' character matches any sequence of zero or more\ncharacters. The '.' character matches any single character. The '^' character at\nthe start of a pattern, or a '$' character at the end of a pattern matches a\nnewline.\n\nExamples:\n\nThe pattern \"^abc$\" matches lines that only contain \"abc\".\nThe pattern \"^a\" matches any line starting with \"A\".\nThe pattern \"a$\" matches any line ending with \"a\".\nThe pattern \"^*$\" matches any line at all.",
    "ekr.20041119050105.14": "When checked, the Find and Change commands search body text.\n",
    "ekr.20041119050105.15": "When checked, the Find and Change commands search headline text.\n",
    "ekr.20110611092035.16476": "If neither is checked, Leo searches the entire outline.",
    "ekr.20041119050105.16": "When checked, the Find and Change commands search only the currently selected headline and its offspring.\n",
    "ekr.20110611092035.16480": "@language rest\n@wrap\n\n",
    "ekr.20211209060458.1": "True: Add 'class' to the headlines of class nodes (python only).",
    "tbrown.20180525163032.1": "If True, uses headline \"Foo.bar\" for bar() defined in class Foo.\n\nIf False, does not do the above, useful if you don't use clones and don't\nwant the visual clutter of repeated class / file names.",
    "ekr.20200620064409.1": "*Note*: Used only if @bool add-context-to-headlines is True.\n\nIf True, use headline \"bar (foo.py)\" for bar() defined at top level in foo.py. This is\nuseful if you've cloned the node so its origin is not obvious from context.\n\nIf False, does not do the above, useful if you don't use clones and don't\nwant the visual clutter of repeated class / file names.",
    "ekr.20200620060909.1": "True: The cython importer will copy the first decorator preceding a\n      function/method into the headline of the imported node.\n      \n**Note**: The importer will copy only the first line of a multiline decorator.",
    "ekr.20080811105020.2": "False: (recommended) Enable import parsing for @shadow and @auto\nTrue: @shadow and @auto create a single node for the entire file.",
    "ekr.20170825083426.1": "# typedef names, one per line\n\n# These fix #545:\n\n    # _Bool\n    # scr_enter_status_t\n    # scr_exec_status_t\n    # scr_exit_status_t\n    # scr_node_api_t\n    # scr_update_status_t\n    # uint16_t\n    # uint8_t\n",
    "ekr.20111029055127.16616": "# lowercase html tags, one per line.\n\na\nabbr\nacronym\naddress\napplet\narea\nb\nbase\nbasefont\nbdo\nbig\nblockquote\nbody\nbr\nbutton\ncaption\ncenter\ncite\ncode\ncol\ncolgroup\ndd\ndel\ndfn\ndir\ndiv\ndl\ndt\nem\nfieldset\nfont\nform\nframe\nframeset\nhead\nh1\nh2\nh3\nh4\nh5\nh6\nhr\nhtml\ni\niframe\nimg\ninput\nins\nkbd\nlabel\nlegend\nli\nlink\nmap\nmenu\nmeta\nnoframes\nnoscript\nobject\nol\noptgroup\noption\np\nparam\npre\nq\ns\nsamp\nscript\nselect\nsmall\nspan\nstrike\nstrong\nstyle\nsub\nsup\ntable\ntbody\ntd\ntextarea\ntfoot\nth\nthead\ntitle\ntr\ntt\nu\nul\nvar",
    "ekr.20111029055127.16614": "# lowercase xml tags, one per line.\n\nhtml\nbody\nhead\ndiv\ntable\n",
    "ekr.20041119034357.32": "The page width for wrapping doc parts in external files.\n\nValid values: any nonzero positive integer.",
    "ekr.20041119034357.31": "The width of tabs on the screen.  This setting is also used when writing doc parts.\n\nValid values: Any nonzero integer.\n\nNegative tab widths (recommended) cause Leo to convert tabs to blanks when typing.",
    "felix.20230927161926.2": "True: adds a button for every @button node.\n",
    "felix.20230927161926.3": "@killcolor \n\nTrue: create minibuffer commands for each @rclick node.\nDefault False.",
    "felix.20230927161926.4": "True: define a minibuffer command for every @command node.\n",
    "felix.20230927161926.5": "True: dynamically loads plugins in @plugins nodes when a window is created.\n",
    "felix.20230927161926.6": "True: dynamically executes script in @script nodes when a window is created.  DANGEROUS!\n",
    "felix.20230927161926.7": "True: create Debug Script button.\n",
    "felix.20230927161926.8": "True: create Run Script button.\n\nNote: The plugin creates the press-run-script-button command regardless of this setting.",
    "felix.20230927161926.9": "True: create Script Button button in icon area.\n\nNote: The plugin creates the press-script-button-button regardless of this setting.",
    "felix.20230927161926.10": "The maximum length of button names.\n",
    "ekr.20060930085532": "True: (Recommended) The find commands collapse all nodes that are not ancestors of the node containing the match.\nFalse: The find command expands nodes needed to show the match, but does not collapse any nodes.",
    "ekr.20080315083057.7": "True: (Recommended) The spell commands collapse all nodes that are not ancestors of the node containing the match.\nFalse: The spell commands do not collapse any nodes.",
    "felix.20220506230435.1": "True: (Legacy) The goto-first-visible-node and goto-first-visible-node commands collapse all nodes that are not ancestors of the target node that is selected.\n\nFalse: (Recommended) The commands act as simple navigation commands, and do not change the outline state.",
    "ekr.20111109104336.12503": "New in Leo 4.9.1.\n\nTrue (Recommended):\n    An excellent, subliminal, improvement.\n    The contract-or-goto-parent (Alt-RtArrow) contracts all\n    children of the to-be-selected parent.\n",
    "ekr.20070615094204": "True: goto-next-node and goto-prev-node commands contract the selected node.",
    "tbnorth.20160414102131.1": "Alt drag onto another node indicates dropped node should\nbe added as a child of the receiving node, set this to\nFalse to not expand the receiving node, keeping a list of\nrecipient nodes conveniently compact for additional drops.",
    "ekr.20041119050749.4": "True:  Tell whether drags will move nodes or clone nodes.\nFalse: Don't issue such messages.\n\n",
    "ekr.20131008181812.17533": "False: disable all drag and drop operations in the outline.",
    "ekr.20061012122620": "True:  When a node is expanded, insert new nodes as the last child.\nFalse: (legacy & recommended) When a node is expanded, insert new nodes as the first child.",
    "tbrown.20110212091818.20118": "Set to False, dragging nodes between different outlines\ncreates copies.  Set to True, the node is moved and no\nlonger exists in the source outline.",
    "ekr.20110601103939.19339": "True: A *single* click in an already selected node begins editing of the headline.",
    "ekr.20061007211759": "True: collapse the parent of the moved node when moving a node left.\n",
    "ekr.20060122105527.7": "True: (Recommended) Selecting an outline node leaves the focus in the outline pane.\n\nIf this is False it will be harder to use the arrow keys in the headline.\n    \nFalse: (Legacy) Selecting an outline node transfers focus to the body pane.",
    "ekr.20061002115414.1": "The time (in seconds) that controls how handles keystrokes when the outline pane has focus.\n\nWhen two keystrokes are separated by less than this time, Leo will attempt to\nfind the next headline that starts with the previous match, extended by the key\njust typed. Otherwise, Leo will find the next headline that starts with the key\njust typed.\n\nThe outline nav search reverts to a single-character search if the extended\nsearch fails, so in practice everything works well without thinking about what\nis happening.\n",
    "tbrown.20150807123339.1": "Set to True to enable node appearance modifications\nSee tree-declutter-patterns\n",
    "tbrown.20150807123421.1": "# **Decluttering** replaces controls custom formatting of headlines, including:\n\n# - Hiding or changing headline text,\n# - Adding icons to headlines,\n# - Changing the styling of headlines.\n\n# @bool tree-declutter must be True to enable decluttering.\n\n# blank lines and lines starting with '#' are ignored.\n# See the children of this node for details.\n",
    "ekr.20171122113628.1": "# **Decluttering** replaces controls custom formatting of headlines, including:\n\n# - Hiding or changing headline text,\n# - Adding icons to headlines,\n# - Changing the styling of headlines.\n\n# Decluttering is *inactive* when you are editing a headline.\n\n# Decluttering is *completely optional*. To enable decluttering, use::\n\n     # @bool tree-declutter = True\n     \n# Decluttering is controlled by **decluttering rulesets**.\n# You specify decluttering rulesets in the body text of::\n     \n    # @data tree-declutter-patterns\n    \n# As usual with @data nodes:\n\n# - Blank lines and lines starting with '#' are ignored.\n# - You may organize the text of the @data node using child nodes.\n\n# Each ruleset consists of a list of lines:\n\n# - The first line is a **rule line**, containing a **find pattern**.\n# - The second line is a **replacement line**.\n# - The ruleset ends with zero or more **style lines**.\n\n# Find patterns are `regular expressions <https://docs.python.org/2/library/re.html>`_.\n# Decluttering affects only those headlines that match a rule pattern. \n\n# The following section shows some example rulesets. Later sections discuss decluttering commands, patterns and styles in more detail.\n",
    "ekr.20171122113628.3": "# All rulesets start with a **rule line** of the form::\n\n    # RULE <regular expression>\n    \n# The ruleset matches a headline if and only if the regular expression matches. Matches can start anywhere in the headline. Leo first attempts to a match using re.match. If that doesn't work, Leo tries re.search.\n\n# A **replacement line** must follow the rule line. Here are the valid forms::\n\n    # REPLACE <substitution expression>\n    # REPLACE-HEAD\n    # REPLACE-TAIL\n    # REPLACE-REST\n    \n# - REPLACE replaces the headline by the value of the substitution expression.  For example::\n\n    # REPLACE \\1\n    \n  # matches replaces the headline by the first matched regex group.\n\n# - REPLACE-HEAD replaces replace the headline by the text that precedes the matched text.\n\n# - REPLACE-TAIL replaces the headline by the text that follows the matched text.\n\n# - REPLACE-REST replaces the headline by everything except the matched text.\n",
    "ekr.20171122113628.4": "# Leo applies style lines only if they appear in a ruleset that matches a headline.\n# Style lines do the following...\n\n# Add an icon to the headline::\n\n    # ICON path/to/icon\n    \n# Set the background or foreground color to a color number or names::\n\n    # BG #FF8800\n    # FG @solarized-magenta\n\n# Set the font to a given font name::\n\n    # Font Times\n    \n# Set the font size in pixels (PX) or points (PT)::\n\n    # PX 40\n    # PT 16\n    \n# Enable or disable italics::\n\n    # ITALIC 0\n    # ITALIC 1\n\n# Set the font weight to one of Light, Normal, DemiBold, Bold, Black::\n\n    # WEIGHT DemoBold\n",
    "ekr.20171122044441.3": "# Add Icon to folders and remove /-/\nRULE ^/(.*)/$\nREPLACE \\1 \nICON file_icons/folder.png\n\n# Add icon to path folders and remove @path\nRULE ^@path (.*)\nREPLACE \\1 \nICON file_icons/folder_path.png\n\n# Add Icon to removed folders and remove */-/*\nRULE ^\\*/(.*)/\\*$\nREPLACE \\1 \nICON file_icons/folder_removed.png\n\n# Add Icon to removed files and remove *-* but not **-**\nRULE ^\\*([^\\*/]*[^\\*]*[^\\*/]*)\\*$\nREPLACE \\1 \nICON file_icons/removed.png\n",
    "ekr.20171122044441.1": "# if the node name starts with 'peacock node DEMO', make a mess of it\nRULE ^(peacock node DEMO)\nREPLACE LOOK: \\1\nICON Tango/16x16/emotes/face-grin.png\nICON Tango/16x16/emotes/face-wink.png\nFG @solarized-magenta\nBG white\nFONT Times\nPX 40\nITALIC 1\nWEIGHT Bold\n",
    "ekr.20171122044417.1": "# RULE :([\\w_@]+:)+\\s*$\n# REPLACE-HEAD\n",
    "ekr.20171122044441.2": "# remove @clean etc. and use an icon\nRULE ^@clean (.*)\nREPLACE \\1\nICON file_icons/file_clean.png\n\nRULE ^@auto (.*)\nREPLACE \\1\nICON file_icons/file_auto.png\n\nRULE ^@edit (.*)\nREPLACE \\1\nICON file_icons/file_edit.png\n\nRULE ^@asis (.*)\nREPLACE \\1\nICON file_icons/file_asis.png\n\nRULE ^@nosent (.*)\nREPLACE \\1\nICON file_icons/file_nosent.png\n\nRULE ^@file (.*)\nREPLACE \\1\nICON file_icons/file_file.png\n",
    "ekr.20171122044906.1": "# show the last part of long filenames\nRULE ^.{1,1000}/(.{20})\nREPLACE \u2026/\\1\n",
    "ekr.20041119042929.10": "The encoding specified in the following line of new .leo files:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n\nThe recommended value is UTF-8 (upper case for compatibility for old versions of Leo).\n\niso-8859-1 would be a popular alternative.\n\nImportant: Once a .leo file is created the <?xml...\"> line can only be changed by hand.  Alas, changing the <?xml...\"> line by hand may cause unicode errors the next time the .leo file is loaded.  Therefore, you should change the <?xml...\"> line by hand only when first creating a .leo file.",
    "ekr.20080212084020": "The encoding used for files imported by @auto if no @encoding directive is in effect.\nDefault is UTF-8 (case not important).",
    "ekr.20041119042929.9": "The encoding used for derived files if no @encoding directive is in effect.\nDefault is UTF-8 (case not important).",
    "ekr.20080326060254.3": "The default language if no @language or @comment is in effect.\n\nValid values are (case is ignored):\n\nactionscript,c,csharp,css,cweb,elisp,html,java,latex,\npascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.",
    "ekr.20041213105954": "Options that require pixel values can be any Python expression that yields an int.\nWarning: the number of pixels per inch varies...",
    "ekr.20061010111324": "True: (legacy) Select all headline text when editing a headline.\nFalse: Put the cursor at the end of the headline text.",
    "ekr.20060531094310": "True:  auto-indent regardless of how text is colored.\nFalse: suppress auto-indenting if in range @nocolor or @kill.",
    "ekr.20041119034357.43": "True:  use gmt time.\nFalse: use local time.",
    "jlunz.20151120072157.1": "True: Wrap body text.\n\n",
    "ekr.20041119034357.42": "The format string used when creating the Time/Date string for the Insert Time/Date command.\nSee the Python documentation for time.strftime for full details.\n\nExamples:\n\n1/30/2003 8:31:55\n%m/%d/%y %H:%M:%S\n\nThu, 30 Jan 2003 16:57:12\n%a, %d %b %Y %H:%M:%S"
  }
}